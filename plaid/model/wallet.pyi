# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class Wallet(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An object representing the e-wallet
    """


    class MetaOapg:
        required = {
            "wallet_id",
            "balance",
            "numbers",
            "status",
        }
        
        class properties:
            wallet_id = schemas.StrSchema
        
            @staticmethod
            def balance() -> typing.Type['WalletBalance']:
                return WalletBalance
        
            @staticmethod
            def numbers() -> typing.Type['WalletNumbers']:
                return WalletNumbers
        
            @staticmethod
            def status() -> typing.Type['WalletStatus']:
                return WalletStatus
            recipient_id = schemas.StrSchema
            __annotations__ = {
                "wallet_id": wallet_id,
                "balance": balance,
                "numbers": numbers,
                "status": status,
                "recipient_id": recipient_id,
            }
        additional_properties = schemas.AnyTypeSchema
    
    wallet_id: MetaOapg.properties.wallet_id
    balance: 'WalletBalance'
    numbers: 'WalletNumbers'
    status: 'WalletStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wallet_id"]) -> MetaOapg.properties.wallet_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balance"]) -> 'WalletBalance': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numbers"]) -> 'WalletNumbers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'WalletStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipient_id"]) -> MetaOapg.properties.recipient_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["wallet_id"], typing_extensions.Literal["balance"], typing_extensions.Literal["numbers"], typing_extensions.Literal["status"], typing_extensions.Literal["recipient_id"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wallet_id"]) -> MetaOapg.properties.wallet_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balance"]) -> 'WalletBalance': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numbers"]) -> 'WalletNumbers': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'WalletStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipient_id"]) -> typing.Union[MetaOapg.properties.recipient_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["wallet_id"], typing_extensions.Literal["balance"], typing_extensions.Literal["numbers"], typing_extensions.Literal["status"], typing_extensions.Literal["recipient_id"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        wallet_id: typing.Union[MetaOapg.properties.wallet_id, str, ],
        balance: 'WalletBalance',
        numbers: 'WalletNumbers',
        status: 'WalletStatus',
        recipient_id: typing.Union[MetaOapg.properties.recipient_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'Wallet':
        return super().__new__(
            cls,
            *_args,
            wallet_id=wallet_id,
            balance=balance,
            numbers=numbers,
            status=status,
            recipient_id=recipient_id,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.wallet_balance import WalletBalance
from plaid.model.wallet_numbers import WalletNumbers
from plaid.model.wallet_status import WalletStatus
