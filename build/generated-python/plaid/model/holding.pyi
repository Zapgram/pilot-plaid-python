# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class Holding(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A securities holding at an institution.
    """


    class MetaOapg:
        required = {
            "cost_basis",
            "unofficial_currency_code",
            "institution_price",
            "account_id",
            "quantity",
            "institution_value",
            "iso_currency_code",
            "security_id",
        }
        
        class properties:
            account_id = schemas.StrSchema
            security_id = schemas.StrSchema
            institution_price = schemas.Float64Schema
            institution_value = schemas.Float64Schema
            
            
            class cost_basis(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cost_basis':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            quantity = schemas.Float64Schema
            
            
            class iso_currency_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'iso_currency_code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class unofficial_currency_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'unofficial_currency_code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class institution_price_as_of(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'institution_price_as_of':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class institution_price_datetime(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'institution_price_datetime':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "account_id": account_id,
                "security_id": security_id,
                "institution_price": institution_price,
                "institution_value": institution_value,
                "cost_basis": cost_basis,
                "quantity": quantity,
                "iso_currency_code": iso_currency_code,
                "unofficial_currency_code": unofficial_currency_code,
                "institution_price_as_of": institution_price_as_of,
                "institution_price_datetime": institution_price_datetime,
            }
        additional_properties = schemas.AnyTypeSchema
    
    cost_basis: MetaOapg.properties.cost_basis
    unofficial_currency_code: MetaOapg.properties.unofficial_currency_code
    institution_price: MetaOapg.properties.institution_price
    account_id: MetaOapg.properties.account_id
    quantity: MetaOapg.properties.quantity
    institution_value: MetaOapg.properties.institution_value
    iso_currency_code: MetaOapg.properties.iso_currency_code
    security_id: MetaOapg.properties.security_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost_basis"]) -> MetaOapg.properties.cost_basis: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unofficial_currency_code"]) -> MetaOapg.properties.unofficial_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_price"]) -> MetaOapg.properties.institution_price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_value"]) -> MetaOapg.properties.institution_value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["security_id"]) -> MetaOapg.properties.security_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_price_as_of"]) -> MetaOapg.properties.institution_price_as_of: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_price_datetime"]) -> MetaOapg.properties.institution_price_datetime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cost_basis"], typing_extensions.Literal["unofficial_currency_code"], typing_extensions.Literal["institution_price"], typing_extensions.Literal["account_id"], typing_extensions.Literal["quantity"], typing_extensions.Literal["institution_value"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["security_id"], typing_extensions.Literal["institution_price_as_of"], typing_extensions.Literal["institution_price_datetime"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost_basis"]) -> MetaOapg.properties.cost_basis: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unofficial_currency_code"]) -> MetaOapg.properties.unofficial_currency_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_price"]) -> MetaOapg.properties.institution_price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_value"]) -> MetaOapg.properties.institution_value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["security_id"]) -> MetaOapg.properties.security_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_price_as_of"]) -> typing.Union[MetaOapg.properties.institution_price_as_of, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_price_datetime"]) -> typing.Union[MetaOapg.properties.institution_price_datetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cost_basis"], typing_extensions.Literal["unofficial_currency_code"], typing_extensions.Literal["institution_price"], typing_extensions.Literal["account_id"], typing_extensions.Literal["quantity"], typing_extensions.Literal["institution_value"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["security_id"], typing_extensions.Literal["institution_price_as_of"], typing_extensions.Literal["institution_price_datetime"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        cost_basis: typing.Union[MetaOapg.properties.cost_basis, None, decimal.Decimal, int, float, ],
        unofficial_currency_code: typing.Union[MetaOapg.properties.unofficial_currency_code, None, str, ],
        institution_price: typing.Union[MetaOapg.properties.institution_price, decimal.Decimal, int, float, ],
        account_id: typing.Union[MetaOapg.properties.account_id, str, ],
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, float, ],
        institution_value: typing.Union[MetaOapg.properties.institution_value, decimal.Decimal, int, float, ],
        iso_currency_code: typing.Union[MetaOapg.properties.iso_currency_code, None, str, ],
        security_id: typing.Union[MetaOapg.properties.security_id, str, ],
        institution_price_as_of: typing.Union[MetaOapg.properties.institution_price_as_of, None, str, date, schemas.Unset] = schemas.unset,
        institution_price_datetime: typing.Union[MetaOapg.properties.institution_price_datetime, None, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'Holding':
        return super().__new__(
            cls,
            *_args,
            cost_basis=cost_basis,
            unofficial_currency_code=unofficial_currency_code,
            institution_price=institution_price,
            account_id=account_id,
            quantity=quantity,
            institution_value=institution_value,
            iso_currency_code=iso_currency_code,
            security_id=security_id,
            institution_price_as_of=institution_price_as_of,
            institution_price_datetime=institution_price_datetime,
            _configuration=_configuration,
            **kwargs,
        )
