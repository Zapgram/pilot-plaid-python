# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class AssetReport(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An object representing an Asset Report
    """


    class MetaOapg:
        required = {
            "date_generated",
            "client_report_id",
            "items",
            "user",
            "asset_report_id",
            "days_requested",
        }
        
        class properties:
            asset_report_id = schemas.StrSchema
            
            
            class client_report_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'client_report_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            date_generated = schemas.DateTimeSchema
            days_requested = schemas.NumberSchema
        
            @staticmethod
            def user() -> typing.Type['AssetReportUser']:
                return AssetReportUser
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AssetReportItem']:
                        return AssetReportItem
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AssetReportItem'], typing.List['AssetReportItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AssetReportItem':
                    return super().__getitem__(i)
            __annotations__ = {
                "asset_report_id": asset_report_id,
                "client_report_id": client_report_id,
                "date_generated": date_generated,
                "days_requested": days_requested,
                "user": user,
                "items": items,
            }
        additional_properties = schemas.AnyTypeSchema
    
    date_generated: MetaOapg.properties.date_generated
    client_report_id: MetaOapg.properties.client_report_id
    items: MetaOapg.properties.items
    user: 'AssetReportUser'
    asset_report_id: MetaOapg.properties.asset_report_id
    days_requested: MetaOapg.properties.days_requested
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_generated"]) -> MetaOapg.properties.date_generated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_report_id"]) -> MetaOapg.properties.client_report_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'AssetReportUser': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asset_report_id"]) -> MetaOapg.properties.asset_report_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_requested"]) -> MetaOapg.properties.days_requested: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["date_generated"], typing_extensions.Literal["client_report_id"], typing_extensions.Literal["items"], typing_extensions.Literal["user"], typing_extensions.Literal["asset_report_id"], typing_extensions.Literal["days_requested"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_generated"]) -> MetaOapg.properties.date_generated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_report_id"]) -> MetaOapg.properties.client_report_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'AssetReportUser': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asset_report_id"]) -> MetaOapg.properties.asset_report_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_requested"]) -> MetaOapg.properties.days_requested: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date_generated"], typing_extensions.Literal["client_report_id"], typing_extensions.Literal["items"], typing_extensions.Literal["user"], typing_extensions.Literal["asset_report_id"], typing_extensions.Literal["days_requested"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        date_generated: typing.Union[MetaOapg.properties.date_generated, str, datetime, ],
        client_report_id: typing.Union[MetaOapg.properties.client_report_id, None, str, ],
        items: typing.Union[MetaOapg.properties.items, list, tuple, ],
        user: 'AssetReportUser',
        asset_report_id: typing.Union[MetaOapg.properties.asset_report_id, str, ],
        days_requested: typing.Union[MetaOapg.properties.days_requested, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'AssetReport':
        return super().__new__(
            cls,
            *_args,
            date_generated=date_generated,
            client_report_id=client_report_id,
            items=items,
            user=user,
            asset_report_id=asset_report_id,
            days_requested=days_requested,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.asset_report_item import AssetReportItem
from plaid.model.asset_report_user import AssetReportUser
