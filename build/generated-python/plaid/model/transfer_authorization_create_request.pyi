# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class TransferAuthorizationCreateRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Defines the request schema for `/transfer/authorization/create`
    """


    class MetaOapg:
        required = {
            "amount",
            "type",
            "user",
            "network",
        }
        
        class properties:
        
            @staticmethod
            def type() -> typing.Type['TransferType']:
                return TransferType
        
            @staticmethod
            def network() -> typing.Type['TransferNetwork']:
                return TransferNetwork
            amount = schemas.StrSchema
        
            @staticmethod
            def user() -> typing.Type['TransferAuthorizationUserInRequest']:
                return TransferAuthorizationUserInRequest
            client_id = schemas.StrSchema
            secret = schemas.StrSchema
            access_token = schemas.StrSchema
            account_id = schemas.StrSchema
        
            @staticmethod
            def funding_account_id() -> typing.Type['TransferFundingAccountIDRequest']:
                return TransferFundingAccountIDRequest
            payment_profile_token = schemas.StrSchema
        
            @staticmethod
            def ach_class() -> typing.Type['ACHClass']:
                return ACHClass
        
            @staticmethod
            def device() -> typing.Type['TransferAuthorizationDevice']:
                return TransferAuthorizationDevice
            origination_account_id = schemas.StrSchema
            iso_currency_code = schemas.StrSchema
        
            @staticmethod
            def idempotency_key() -> typing.Type['TransferAuthorizationIdempotencyKey']:
                return TransferAuthorizationIdempotencyKey
            
            
            class user_present(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'user_present':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class with_guarantee(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'with_guarantee':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class beacon_session_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'beacon_session_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class originator_client_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'originator_client_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def credit_funds_source() -> typing.Type['TransferCreditFundsSource']:
                return TransferCreditFundsSource
            
            
            class test_clock_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'test_clock_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "type": type,
                "network": network,
                "amount": amount,
                "user": user,
                "client_id": client_id,
                "secret": secret,
                "access_token": access_token,
                "account_id": account_id,
                "funding_account_id": funding_account_id,
                "payment_profile_token": payment_profile_token,
                "ach_class": ach_class,
                "device": device,
                "origination_account_id": origination_account_id,
                "iso_currency_code": iso_currency_code,
                "idempotency_key": idempotency_key,
                "user_present": user_present,
                "with_guarantee": with_guarantee,
                "beacon_session_id": beacon_session_id,
                "originator_client_id": originator_client_id,
                "credit_funds_source": credit_funds_source,
                "test_clock_id": test_clock_id,
            }
    
    amount: MetaOapg.properties.amount
    type: 'TransferType'
    user: 'TransferAuthorizationUserInRequest'
    network: 'TransferNetwork'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'TransferType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network"]) -> 'TransferNetwork': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'TransferAuthorizationUserInRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_id"]) -> MetaOapg.properties.client_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["funding_account_id"]) -> 'TransferFundingAccountIDRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_profile_token"]) -> MetaOapg.properties.payment_profile_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ach_class"]) -> 'ACHClass': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device"]) -> 'TransferAuthorizationDevice': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origination_account_id"]) -> MetaOapg.properties.origination_account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idempotency_key"]) -> 'TransferAuthorizationIdempotencyKey': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_present"]) -> MetaOapg.properties.user_present: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["with_guarantee"]) -> MetaOapg.properties.with_guarantee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beacon_session_id"]) -> MetaOapg.properties.beacon_session_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originator_client_id"]) -> MetaOapg.properties.originator_client_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credit_funds_source"]) -> 'TransferCreditFundsSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["test_clock_id"]) -> MetaOapg.properties.test_clock_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "network", "amount", "user", "client_id", "secret", "access_token", "account_id", "funding_account_id", "payment_profile_token", "ach_class", "device", "origination_account_id", "iso_currency_code", "idempotency_key", "user_present", "with_guarantee", "beacon_session_id", "originator_client_id", "credit_funds_source", "test_clock_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'TransferType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network"]) -> 'TransferNetwork': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'TransferAuthorizationUserInRequest': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_id"]) -> typing.Union[MetaOapg.properties.client_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_token"]) -> typing.Union[MetaOapg.properties.access_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> typing.Union[MetaOapg.properties.account_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["funding_account_id"]) -> typing.Union['TransferFundingAccountIDRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_profile_token"]) -> typing.Union[MetaOapg.properties.payment_profile_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ach_class"]) -> typing.Union['ACHClass', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device"]) -> typing.Union['TransferAuthorizationDevice', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origination_account_id"]) -> typing.Union[MetaOapg.properties.origination_account_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iso_currency_code"]) -> typing.Union[MetaOapg.properties.iso_currency_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idempotency_key"]) -> typing.Union['TransferAuthorizationIdempotencyKey', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_present"]) -> typing.Union[MetaOapg.properties.user_present, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["with_guarantee"]) -> typing.Union[MetaOapg.properties.with_guarantee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beacon_session_id"]) -> typing.Union[MetaOapg.properties.beacon_session_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originator_client_id"]) -> typing.Union[MetaOapg.properties.originator_client_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credit_funds_source"]) -> typing.Union['TransferCreditFundsSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["test_clock_id"]) -> typing.Union[MetaOapg.properties.test_clock_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "network", "amount", "user", "client_id", "secret", "access_token", "account_id", "funding_account_id", "payment_profile_token", "ach_class", "device", "origination_account_id", "iso_currency_code", "idempotency_key", "user_present", "with_guarantee", "beacon_session_id", "originator_client_id", "credit_funds_source", "test_clock_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, str, ],
        type: 'TransferType',
        user: 'TransferAuthorizationUserInRequest',
        network: 'TransferNetwork',
        client_id: typing.Union[MetaOapg.properties.client_id, str, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        access_token: typing.Union[MetaOapg.properties.access_token, str, schemas.Unset] = schemas.unset,
        account_id: typing.Union[MetaOapg.properties.account_id, str, schemas.Unset] = schemas.unset,
        funding_account_id: typing.Union['TransferFundingAccountIDRequest', schemas.Unset] = schemas.unset,
        payment_profile_token: typing.Union[MetaOapg.properties.payment_profile_token, str, schemas.Unset] = schemas.unset,
        ach_class: typing.Union['ACHClass', schemas.Unset] = schemas.unset,
        device: typing.Union['TransferAuthorizationDevice', schemas.Unset] = schemas.unset,
        origination_account_id: typing.Union[MetaOapg.properties.origination_account_id, str, schemas.Unset] = schemas.unset,
        iso_currency_code: typing.Union[MetaOapg.properties.iso_currency_code, str, schemas.Unset] = schemas.unset,
        idempotency_key: typing.Union['TransferAuthorizationIdempotencyKey', schemas.Unset] = schemas.unset,
        user_present: typing.Union[MetaOapg.properties.user_present, None, bool, schemas.Unset] = schemas.unset,
        with_guarantee: typing.Union[MetaOapg.properties.with_guarantee, None, bool, schemas.Unset] = schemas.unset,
        beacon_session_id: typing.Union[MetaOapg.properties.beacon_session_id, None, str, schemas.Unset] = schemas.unset,
        originator_client_id: typing.Union[MetaOapg.properties.originator_client_id, None, str, schemas.Unset] = schemas.unset,
        credit_funds_source: typing.Union['TransferCreditFundsSource', schemas.Unset] = schemas.unset,
        test_clock_id: typing.Union[MetaOapg.properties.test_clock_id, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransferAuthorizationCreateRequest':
        return super().__new__(
            cls,
            *_args,
            amount=amount,
            type=type,
            user=user,
            network=network,
            client_id=client_id,
            secret=secret,
            access_token=access_token,
            account_id=account_id,
            funding_account_id=funding_account_id,
            payment_profile_token=payment_profile_token,
            ach_class=ach_class,
            device=device,
            origination_account_id=origination_account_id,
            iso_currency_code=iso_currency_code,
            idempotency_key=idempotency_key,
            user_present=user_present,
            with_guarantee=with_guarantee,
            beacon_session_id=beacon_session_id,
            originator_client_id=originator_client_id,
            credit_funds_source=credit_funds_source,
            test_clock_id=test_clock_id,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.ach_class import ACHClass
from plaid.model.transfer_authorization_device import TransferAuthorizationDevice
from plaid.model.transfer_authorization_idempotency_key import TransferAuthorizationIdempotencyKey
from plaid.model.transfer_authorization_user_in_request import TransferAuthorizationUserInRequest
from plaid.model.transfer_credit_funds_source import TransferCreditFundsSource
from plaid.model.transfer_funding_account_id_request import TransferFundingAccountIDRequest
from plaid.model.transfer_network import TransferNetwork
from plaid.model.transfer_type import TransferType
