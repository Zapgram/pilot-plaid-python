# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class CreditBankStatementUploadBankAccount(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An object containing data about a user's bank account related to an uploaded bank statement.
    """


    class MetaOapg:
        required = {
            "owner",
            "account_number",
            "account_type",
            "account_id",
            "bank_name",
            "name",
            "periods",
        }
        
        class properties:
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class bank_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bank_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class account_type(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'account_type':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class account_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'account_number':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def owner() -> typing.Type['CreditBankStatementUploadAccountOwner']:
                return CreditBankStatementUploadAccountOwner
            
            
            class periods(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CreditBankStatementUploadBankAccountPeriod']:
                        return CreditBankStatementUploadBankAccountPeriod
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CreditBankStatementUploadBankAccountPeriod'], typing.List['CreditBankStatementUploadBankAccountPeriod']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'periods':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CreditBankStatementUploadBankAccountPeriod':
                    return super().__getitem__(i)
            
            
            class account_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'account_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "name": name,
                "bank_name": bank_name,
                "account_type": account_type,
                "account_number": account_number,
                "owner": owner,
                "periods": periods,
                "account_id": account_id,
            }
        additional_properties = schemas.AnyTypeSchema
    
    owner: 'CreditBankStatementUploadAccountOwner'
    account_number: MetaOapg.properties.account_number
    account_type: MetaOapg.properties.account_type
    account_id: MetaOapg.properties.account_id
    bank_name: MetaOapg.properties.bank_name
    name: MetaOapg.properties.name
    periods: MetaOapg.properties.periods
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> 'CreditBankStatementUploadAccountOwner': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_number"]) -> MetaOapg.properties.account_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_type"]) -> MetaOapg.properties.account_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_name"]) -> MetaOapg.properties.bank_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periods"]) -> MetaOapg.properties.periods: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["owner"], typing_extensions.Literal["account_number"], typing_extensions.Literal["account_type"], typing_extensions.Literal["account_id"], typing_extensions.Literal["bank_name"], typing_extensions.Literal["name"], typing_extensions.Literal["periods"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> 'CreditBankStatementUploadAccountOwner': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_number"]) -> MetaOapg.properties.account_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_type"]) -> MetaOapg.properties.account_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_name"]) -> MetaOapg.properties.bank_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periods"]) -> MetaOapg.properties.periods: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["owner"], typing_extensions.Literal["account_number"], typing_extensions.Literal["account_type"], typing_extensions.Literal["account_id"], typing_extensions.Literal["bank_name"], typing_extensions.Literal["name"], typing_extensions.Literal["periods"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        owner: 'CreditBankStatementUploadAccountOwner',
        account_number: typing.Union[MetaOapg.properties.account_number, None, str, ],
        account_type: typing.Union[MetaOapg.properties.account_type, None, str, ],
        account_id: typing.Union[MetaOapg.properties.account_id, None, str, ],
        bank_name: typing.Union[MetaOapg.properties.bank_name, None, str, ],
        name: typing.Union[MetaOapg.properties.name, None, str, ],
        periods: typing.Union[MetaOapg.properties.periods, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'CreditBankStatementUploadBankAccount':
        return super().__new__(
            cls,
            *_args,
            owner=owner,
            account_number=account_number,
            account_type=account_type,
            account_id=account_id,
            bank_name=bank_name,
            name=name,
            periods=periods,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.credit_bank_statement_upload_account_owner import CreditBankStatementUploadAccountOwner
from plaid.model.credit_bank_statement_upload_bank_account_period import CreditBankStatementUploadBankAccountPeriod
