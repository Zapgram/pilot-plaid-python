# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class JWKPublicKey(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A JSON Web Key (JWK) that can be used in conjunction with [JWT libraries](https://jwt.io/#libraries-io) to verify Plaid webhooks
    """


    class MetaOapg:
        required = {
            "kty",
            "crv",
            "use",
            "kid",
            "x",
            "created_at",
            "y",
            "expired_at",
            "alg",
        }
        
        class properties:
            alg = schemas.StrSchema
            crv = schemas.StrSchema
            kid = schemas.StrSchema
            kty = schemas.StrSchema
            use = schemas.StrSchema
            x = schemas.StrSchema
            y = schemas.StrSchema
            created_at = schemas.IntSchema
            
            
            class expired_at(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'expired_at':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "alg": alg,
                "crv": crv,
                "kid": kid,
                "kty": kty,
                "use": use,
                "x": x,
                "y": y,
                "created_at": created_at,
                "expired_at": expired_at,
            }
        additional_properties = schemas.AnyTypeSchema
    
    kty: MetaOapg.properties.kty
    crv: MetaOapg.properties.crv
    use: MetaOapg.properties.use
    kid: MetaOapg.properties.kid
    x: MetaOapg.properties.x
    created_at: MetaOapg.properties.created_at
    y: MetaOapg.properties.y
    expired_at: MetaOapg.properties.expired_at
    alg: MetaOapg.properties.alg
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kty"]) -> MetaOapg.properties.kty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crv"]) -> MetaOapg.properties.crv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use"]) -> MetaOapg.properties.use: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kid"]) -> MetaOapg.properties.kid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expired_at"]) -> MetaOapg.properties.expired_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alg"]) -> MetaOapg.properties.alg: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["kty"], typing_extensions.Literal["crv"], typing_extensions.Literal["use"], typing_extensions.Literal["kid"], typing_extensions.Literal["x"], typing_extensions.Literal["created_at"], typing_extensions.Literal["y"], typing_extensions.Literal["expired_at"], typing_extensions.Literal["alg"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kty"]) -> MetaOapg.properties.kty: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crv"]) -> MetaOapg.properties.crv: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use"]) -> MetaOapg.properties.use: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kid"]) -> MetaOapg.properties.kid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expired_at"]) -> MetaOapg.properties.expired_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alg"]) -> MetaOapg.properties.alg: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["kty"], typing_extensions.Literal["crv"], typing_extensions.Literal["use"], typing_extensions.Literal["kid"], typing_extensions.Literal["x"], typing_extensions.Literal["created_at"], typing_extensions.Literal["y"], typing_extensions.Literal["expired_at"], typing_extensions.Literal["alg"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        kty: typing.Union[MetaOapg.properties.kty, str, ],
        crv: typing.Union[MetaOapg.properties.crv, str, ],
        use: typing.Union[MetaOapg.properties.use, str, ],
        kid: typing.Union[MetaOapg.properties.kid, str, ],
        x: typing.Union[MetaOapg.properties.x, str, ],
        created_at: typing.Union[MetaOapg.properties.created_at, decimal.Decimal, int, ],
        y: typing.Union[MetaOapg.properties.y, str, ],
        expired_at: typing.Union[MetaOapg.properties.expired_at, None, decimal.Decimal, int, ],
        alg: typing.Union[MetaOapg.properties.alg, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'JWKPublicKey':
        return super().__new__(
            cls,
            *_args,
            kty=kty,
            crv=crv,
            use=use,
            kid=kid,
            x=x,
            created_at=created_at,
            y=y,
            expired_at=expired_at,
            alg=alg,
            _configuration=_configuration,
            **kwargs,
        )
