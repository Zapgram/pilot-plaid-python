# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class LinkDeliveryAccount(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Information related to account attached to the connected Item
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            mask = schemas.StrSchema
            type = schemas.StrSchema
            subtype = schemas.StrSchema
        
            @staticmethod
            def verification_status() -> typing.Type['LinkDeliveryVerificationStatus']:
                return LinkDeliveryVerificationStatus
            class_type = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "mask": mask,
                "type": type,
                "subtype": subtype,
                "verification_status": verification_status,
                "class_type": class_type,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mask"]) -> MetaOapg.properties.mask: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtype"]) -> MetaOapg.properties.subtype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verification_status"]) -> 'LinkDeliveryVerificationStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["class_type"]) -> MetaOapg.properties.class_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["name"], typing_extensions.Literal["mask"], typing_extensions.Literal["type"], typing_extensions.Literal["subtype"], typing_extensions.Literal["verification_status"], typing_extensions.Literal["class_type"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mask"]) -> typing.Union[MetaOapg.properties.mask, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtype"]) -> typing.Union[MetaOapg.properties.subtype, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verification_status"]) -> typing.Union['LinkDeliveryVerificationStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["class_type"]) -> typing.Union[MetaOapg.properties.class_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["name"], typing_extensions.Literal["mask"], typing_extensions.Literal["type"], typing_extensions.Literal["subtype"], typing_extensions.Literal["verification_status"], typing_extensions.Literal["class_type"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        mask: typing.Union[MetaOapg.properties.mask, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        subtype: typing.Union[MetaOapg.properties.subtype, str, schemas.Unset] = schemas.unset,
        verification_status: typing.Union['LinkDeliveryVerificationStatus', schemas.Unset] = schemas.unset,
        class_type: typing.Union[MetaOapg.properties.class_type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'LinkDeliveryAccount':
        return super().__new__(
            cls,
            *_args,
            id=id,
            name=name,
            mask=mask,
            type=type,
            subtype=subtype,
            verification_status=verification_status,
            class_type=class_type,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.link_delivery_verification_status import LinkDeliveryVerificationStatus
