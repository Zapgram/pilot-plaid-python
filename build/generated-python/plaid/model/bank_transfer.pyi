# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class BankTransfer(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Represents a bank transfer within the Bank Transfers API.
    """


    class MetaOapg:
        required = {
            "amount",
            "metadata",
            "created",
            "description",
            "failure_reason",
            "type",
            "cancellable",
            "network",
            "custom_tag",
            "account_id",
            "ach_class",
            "iso_currency_code",
            "origination_account_id",
            "id",
            "user",
            "direction",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
        
            @staticmethod
            def ach_class() -> typing.Type['ACHClass']:
                return ACHClass
            account_id = schemas.StrSchema
        
            @staticmethod
            def type() -> typing.Type['BankTransferType']:
                return BankTransferType
        
            @staticmethod
            def user() -> typing.Type['BankTransferUser']:
                return BankTransferUser
            amount = schemas.StrSchema
            iso_currency_code = schemas.StrSchema
            description = schemas.StrSchema
            created = schemas.DateTimeSchema
        
            @staticmethod
            def status() -> typing.Type['BankTransferStatus']:
                return BankTransferStatus
        
            @staticmethod
            def network() -> typing.Type['BankTransferNetwork']:
                return BankTransferNetwork
            cancellable = schemas.BoolSchema
        
            @staticmethod
            def failure_reason() -> typing.Type['BankTransferFailure']:
                return BankTransferFailure
            
            
            class custom_tag(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_tag':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def metadata() -> typing.Type['BankTransferMetadata']:
                return BankTransferMetadata
            origination_account_id = schemas.StrSchema
        
            @staticmethod
            def direction() -> typing.Type['BankTransferDirection']:
                return BankTransferDirection
            __annotations__ = {
                "id": id,
                "ach_class": ach_class,
                "account_id": account_id,
                "type": type,
                "user": user,
                "amount": amount,
                "iso_currency_code": iso_currency_code,
                "description": description,
                "created": created,
                "status": status,
                "network": network,
                "cancellable": cancellable,
                "failure_reason": failure_reason,
                "custom_tag": custom_tag,
                "metadata": metadata,
                "origination_account_id": origination_account_id,
                "direction": direction,
            }
        additional_properties = schemas.AnyTypeSchema
    
    amount: MetaOapg.properties.amount
    metadata: 'BankTransferMetadata'
    created: MetaOapg.properties.created
    description: MetaOapg.properties.description
    failure_reason: 'BankTransferFailure'
    type: 'BankTransferType'
    cancellable: MetaOapg.properties.cancellable
    network: 'BankTransferNetwork'
    custom_tag: MetaOapg.properties.custom_tag
    account_id: MetaOapg.properties.account_id
    ach_class: 'ACHClass'
    iso_currency_code: MetaOapg.properties.iso_currency_code
    origination_account_id: MetaOapg.properties.origination_account_id
    id: MetaOapg.properties.id
    user: 'BankTransferUser'
    direction: 'BankTransferDirection'
    status: 'BankTransferStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'BankTransferMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failure_reason"]) -> 'BankTransferFailure': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'BankTransferType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cancellable"]) -> MetaOapg.properties.cancellable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network"]) -> 'BankTransferNetwork': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_tag"]) -> MetaOapg.properties.custom_tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ach_class"]) -> 'ACHClass': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origination_account_id"]) -> MetaOapg.properties.origination_account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'BankTransferUser': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["direction"]) -> 'BankTransferDirection': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'BankTransferStatus': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount"], typing_extensions.Literal["metadata"], typing_extensions.Literal["created"], typing_extensions.Literal["description"], typing_extensions.Literal["failure_reason"], typing_extensions.Literal["type"], typing_extensions.Literal["cancellable"], typing_extensions.Literal["network"], typing_extensions.Literal["custom_tag"], typing_extensions.Literal["account_id"], typing_extensions.Literal["ach_class"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["origination_account_id"], typing_extensions.Literal["id"], typing_extensions.Literal["user"], typing_extensions.Literal["direction"], typing_extensions.Literal["status"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'BankTransferMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failure_reason"]) -> 'BankTransferFailure': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'BankTransferType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cancellable"]) -> MetaOapg.properties.cancellable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network"]) -> 'BankTransferNetwork': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_tag"]) -> MetaOapg.properties.custom_tag: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ach_class"]) -> 'ACHClass': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origination_account_id"]) -> MetaOapg.properties.origination_account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'BankTransferUser': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["direction"]) -> 'BankTransferDirection': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'BankTransferStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount"], typing_extensions.Literal["metadata"], typing_extensions.Literal["created"], typing_extensions.Literal["description"], typing_extensions.Literal["failure_reason"], typing_extensions.Literal["type"], typing_extensions.Literal["cancellable"], typing_extensions.Literal["network"], typing_extensions.Literal["custom_tag"], typing_extensions.Literal["account_id"], typing_extensions.Literal["ach_class"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["origination_account_id"], typing_extensions.Literal["id"], typing_extensions.Literal["user"], typing_extensions.Literal["direction"], typing_extensions.Literal["status"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, str, ],
        metadata: 'BankTransferMetadata',
        created: typing.Union[MetaOapg.properties.created, str, datetime, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        failure_reason: 'BankTransferFailure',
        type: 'BankTransferType',
        cancellable: typing.Union[MetaOapg.properties.cancellable, bool, ],
        network: 'BankTransferNetwork',
        custom_tag: typing.Union[MetaOapg.properties.custom_tag, None, str, ],
        account_id: typing.Union[MetaOapg.properties.account_id, str, ],
        ach_class: 'ACHClass',
        iso_currency_code: typing.Union[MetaOapg.properties.iso_currency_code, str, ],
        origination_account_id: typing.Union[MetaOapg.properties.origination_account_id, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        user: 'BankTransferUser',
        direction: 'BankTransferDirection',
        status: 'BankTransferStatus',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'BankTransfer':
        return super().__new__(
            cls,
            *_args,
            amount=amount,
            metadata=metadata,
            created=created,
            description=description,
            failure_reason=failure_reason,
            type=type,
            cancellable=cancellable,
            network=network,
            custom_tag=custom_tag,
            account_id=account_id,
            ach_class=ach_class,
            iso_currency_code=iso_currency_code,
            origination_account_id=origination_account_id,
            id=id,
            user=user,
            direction=direction,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.ach_class import ACHClass
from plaid.model.bank_transfer_direction import BankTransferDirection
from plaid.model.bank_transfer_failure import BankTransferFailure
from plaid.model.bank_transfer_metadata import BankTransferMetadata
from plaid.model.bank_transfer_network import BankTransferNetwork
from plaid.model.bank_transfer_status import BankTransferStatus
from plaid.model.bank_transfer_type import BankTransferType
from plaid.model.bank_transfer_user import BankTransferUser
