# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class LinkEventMetadata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Metadata about an event that occured while the user was going through Link
    """


    class MetaOapg:
        required = {
            "request_id",
        }
        
        class properties:
            request_id = schemas.StrSchema
            error_code = schemas.StrSchema
            error_message = schemas.StrSchema
            error_type = schemas.StrSchema
            exit_status = schemas.StrSchema
            institution_id = schemas.StrSchema
            institution_name = schemas.StrSchema
            institution_search_query = schemas.StrSchema
            mfa_type = schemas.StrSchema
            view_name = schemas.StrSchema
            selection = schemas.StrSchema
            brand_name = schemas.StrSchema
            match_reason = schemas.StrSchema
            routing_number = schemas.StrSchema
            account_number_mask = schemas.StrSchema
            __annotations__ = {
                "request_id": request_id,
                "error_code": error_code,
                "error_message": error_message,
                "error_type": error_type,
                "exit_status": exit_status,
                "institution_id": institution_id,
                "institution_name": institution_name,
                "institution_search_query": institution_search_query,
                "mfa_type": mfa_type,
                "view_name": view_name,
                "selection": selection,
                "brand_name": brand_name,
                "match_reason": match_reason,
                "routing_number": routing_number,
                "account_number_mask": account_number_mask,
            }
        additional_properties = schemas.AnyTypeSchema
    
    request_id: MetaOapg.properties.request_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_code"]) -> MetaOapg.properties.error_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_message"]) -> MetaOapg.properties.error_message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_type"]) -> MetaOapg.properties.error_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exit_status"]) -> MetaOapg.properties.exit_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_id"]) -> MetaOapg.properties.institution_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_name"]) -> MetaOapg.properties.institution_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_search_query"]) -> MetaOapg.properties.institution_search_query: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mfa_type"]) -> MetaOapg.properties.mfa_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["view_name"]) -> MetaOapg.properties.view_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selection"]) -> MetaOapg.properties.selection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brand_name"]) -> MetaOapg.properties.brand_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["match_reason"]) -> MetaOapg.properties.match_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routing_number"]) -> MetaOapg.properties.routing_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_number_mask"]) -> MetaOapg.properties.account_number_mask: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["request_id"], typing_extensions.Literal["error_code"], typing_extensions.Literal["error_message"], typing_extensions.Literal["error_type"], typing_extensions.Literal["exit_status"], typing_extensions.Literal["institution_id"], typing_extensions.Literal["institution_name"], typing_extensions.Literal["institution_search_query"], typing_extensions.Literal["mfa_type"], typing_extensions.Literal["view_name"], typing_extensions.Literal["selection"], typing_extensions.Literal["brand_name"], typing_extensions.Literal["match_reason"], typing_extensions.Literal["routing_number"], typing_extensions.Literal["account_number_mask"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_code"]) -> typing.Union[MetaOapg.properties.error_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_message"]) -> typing.Union[MetaOapg.properties.error_message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_type"]) -> typing.Union[MetaOapg.properties.error_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exit_status"]) -> typing.Union[MetaOapg.properties.exit_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_id"]) -> typing.Union[MetaOapg.properties.institution_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_name"]) -> typing.Union[MetaOapg.properties.institution_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_search_query"]) -> typing.Union[MetaOapg.properties.institution_search_query, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mfa_type"]) -> typing.Union[MetaOapg.properties.mfa_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["view_name"]) -> typing.Union[MetaOapg.properties.view_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selection"]) -> typing.Union[MetaOapg.properties.selection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brand_name"]) -> typing.Union[MetaOapg.properties.brand_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["match_reason"]) -> typing.Union[MetaOapg.properties.match_reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routing_number"]) -> typing.Union[MetaOapg.properties.routing_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_number_mask"]) -> typing.Union[MetaOapg.properties.account_number_mask, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["request_id"], typing_extensions.Literal["error_code"], typing_extensions.Literal["error_message"], typing_extensions.Literal["error_type"], typing_extensions.Literal["exit_status"], typing_extensions.Literal["institution_id"], typing_extensions.Literal["institution_name"], typing_extensions.Literal["institution_search_query"], typing_extensions.Literal["mfa_type"], typing_extensions.Literal["view_name"], typing_extensions.Literal["selection"], typing_extensions.Literal["brand_name"], typing_extensions.Literal["match_reason"], typing_extensions.Literal["routing_number"], typing_extensions.Literal["account_number_mask"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        request_id: typing.Union[MetaOapg.properties.request_id, str, ],
        error_code: typing.Union[MetaOapg.properties.error_code, str, schemas.Unset] = schemas.unset,
        error_message: typing.Union[MetaOapg.properties.error_message, str, schemas.Unset] = schemas.unset,
        error_type: typing.Union[MetaOapg.properties.error_type, str, schemas.Unset] = schemas.unset,
        exit_status: typing.Union[MetaOapg.properties.exit_status, str, schemas.Unset] = schemas.unset,
        institution_id: typing.Union[MetaOapg.properties.institution_id, str, schemas.Unset] = schemas.unset,
        institution_name: typing.Union[MetaOapg.properties.institution_name, str, schemas.Unset] = schemas.unset,
        institution_search_query: typing.Union[MetaOapg.properties.institution_search_query, str, schemas.Unset] = schemas.unset,
        mfa_type: typing.Union[MetaOapg.properties.mfa_type, str, schemas.Unset] = schemas.unset,
        view_name: typing.Union[MetaOapg.properties.view_name, str, schemas.Unset] = schemas.unset,
        selection: typing.Union[MetaOapg.properties.selection, str, schemas.Unset] = schemas.unset,
        brand_name: typing.Union[MetaOapg.properties.brand_name, str, schemas.Unset] = schemas.unset,
        match_reason: typing.Union[MetaOapg.properties.match_reason, str, schemas.Unset] = schemas.unset,
        routing_number: typing.Union[MetaOapg.properties.routing_number, str, schemas.Unset] = schemas.unset,
        account_number_mask: typing.Union[MetaOapg.properties.account_number_mask, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'LinkEventMetadata':
        return super().__new__(
            cls,
            *_args,
            request_id=request_id,
            error_code=error_code,
            error_message=error_message,
            error_type=error_type,
            exit_status=exit_status,
            institution_id=institution_id,
            institution_name=institution_name,
            institution_search_query=institution_search_query,
            mfa_type=mfa_type,
            view_name=view_name,
            selection=selection,
            brand_name=brand_name,
            match_reason=match_reason,
            routing_number=routing_number,
            account_number_mask=account_number_mask,
            _configuration=_configuration,
            **kwargs,
        )
