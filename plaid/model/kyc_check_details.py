# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class KYCCheckDetails(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Additional information for the `kyc_check` step. This field will be `null` unless `steps.kyc_check` has reached a terminal state of either `success` or `failed`.
    """


    class MetaOapg:
        required = {
            "id_number",
            "address",
            "date_of_birth",
            "name",
            "phone_number",
            "status",
        }
        
        class properties:
            status = schemas.StrSchema
        
            @staticmethod
            def address() -> typing.Type['KYCCheckAddressSummary']:
                return KYCCheckAddressSummary
        
            @staticmethod
            def name() -> typing.Type['KYCCheckNameSummary']:
                return KYCCheckNameSummary
        
            @staticmethod
            def date_of_birth() -> typing.Type['KYCCheckDateOfBirthSummary']:
                return KYCCheckDateOfBirthSummary
        
            @staticmethod
            def id_number() -> typing.Type['KYCCheckIDNumberSummary']:
                return KYCCheckIDNumberSummary
        
            @staticmethod
            def phone_number() -> typing.Type['KYCCheckPhoneSummary']:
                return KYCCheckPhoneSummary
            __annotations__ = {
                "status": status,
                "address": address,
                "name": name,
                "date_of_birth": date_of_birth,
                "id_number": id_number,
                "phone_number": phone_number,
            }
        additional_properties = schemas.AnyTypeSchema

    
    id_number: 'KYCCheckIDNumberSummary'
    address: 'KYCCheckAddressSummary'
    date_of_birth: 'KYCCheckDateOfBirthSummary'
    name: 'KYCCheckNameSummary'
    phone_number: 'KYCCheckPhoneSummary'
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id_number"]) -> 'KYCCheckIDNumberSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'KYCCheckAddressSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_of_birth"]) -> 'KYCCheckDateOfBirthSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> 'KYCCheckNameSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone_number"]) -> 'KYCCheckPhoneSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id_number"], typing_extensions.Literal["address"], typing_extensions.Literal["date_of_birth"], typing_extensions.Literal["name"], typing_extensions.Literal["phone_number"], typing_extensions.Literal["status"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id_number"]) -> 'KYCCheckIDNumberSummary': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> 'KYCCheckAddressSummary': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_of_birth"]) -> 'KYCCheckDateOfBirthSummary': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> 'KYCCheckNameSummary': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone_number"]) -> 'KYCCheckPhoneSummary': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id_number"], typing_extensions.Literal["address"], typing_extensions.Literal["date_of_birth"], typing_extensions.Literal["name"], typing_extensions.Literal["phone_number"], typing_extensions.Literal["status"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'KYCCheckDetails':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.kyc_check_address_summary import KYCCheckAddressSummary
from plaid.model.kyc_check_date_of_birth_summary import KYCCheckDateOfBirthSummary
from plaid.model.kyc_check_id_number_summary import KYCCheckIDNumberSummary
from plaid.model.kyc_check_name_summary import KYCCheckNameSummary
from plaid.model.kyc_check_phone_summary import KYCCheckPhoneSummary
