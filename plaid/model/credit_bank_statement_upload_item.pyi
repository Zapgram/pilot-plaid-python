# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class CreditBankStatementUploadItem(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An object containing information about the bank statement upload Item.
    """


    class MetaOapg:
        required = {
            "updated_at",
            "item_id",
            "bank_statements",
            "status",
        }
        
        class properties:
            item_id = schemas.StrSchema
            
            
            class bank_statements(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CreditBankStatementUploadObject']:
                        return CreditBankStatementUploadObject
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CreditBankStatementUploadObject'], typing.List['CreditBankStatementUploadObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bank_statements':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CreditBankStatementUploadObject':
                    return super().__getitem__(i)
        
            @staticmethod
            def status() -> typing.Type['PayrollItemStatus']:
                return PayrollItemStatus
            
            
            class updated_at(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'updated_at':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "item_id": item_id,
                "bank_statements": bank_statements,
                "status": status,
                "updated_at": updated_at,
            }
    
    updated_at: MetaOapg.properties.updated_at
    item_id: MetaOapg.properties.item_id
    bank_statements: MetaOapg.properties.bank_statements
    status: 'PayrollItemStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_statements"]) -> MetaOapg.properties.bank_statements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'PayrollItemStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["item_id", "bank_statements", "status", "updated_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_statements"]) -> MetaOapg.properties.bank_statements: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'PayrollItemStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["item_id", "bank_statements", "status", "updated_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, None, str, datetime, ],
        item_id: typing.Union[MetaOapg.properties.item_id, str, ],
        bank_statements: typing.Union[MetaOapg.properties.bank_statements, list, tuple, ],
        status: 'PayrollItemStatus',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreditBankStatementUploadItem':
        return super().__new__(
            cls,
            *_args,
            updated_at=updated_at,
            item_id=item_id,
            bank_statements=bank_statements,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.credit_bank_statement_upload_object import CreditBankStatementUploadObject
from plaid.model.payroll_item_status import PayrollItemStatus
