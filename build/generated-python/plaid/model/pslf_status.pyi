# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class PSLFStatus(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Information about the student's eligibility in the Public Service Loan Forgiveness program. This is only returned if the institution is FedLoan (`ins_116527`). 
    """


    class MetaOapg:
        required = {
            "payments_remaining",
            "payments_made",
            "estimated_eligibility_date",
        }
        
        class properties:
            
            
            class estimated_eligibility_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'estimated_eligibility_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class payments_made(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payments_made':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class payments_remaining(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payments_remaining':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "estimated_eligibility_date": estimated_eligibility_date,
                "payments_made": payments_made,
                "payments_remaining": payments_remaining,
            }
        additional_properties = schemas.AnyTypeSchema
    
    payments_remaining: MetaOapg.properties.payments_remaining
    payments_made: MetaOapg.properties.payments_made
    estimated_eligibility_date: MetaOapg.properties.estimated_eligibility_date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payments_remaining"]) -> MetaOapg.properties.payments_remaining: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payments_made"]) -> MetaOapg.properties.payments_made: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estimated_eligibility_date"]) -> MetaOapg.properties.estimated_eligibility_date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payments_remaining"], typing_extensions.Literal["payments_made"], typing_extensions.Literal["estimated_eligibility_date"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payments_remaining"]) -> MetaOapg.properties.payments_remaining: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payments_made"]) -> MetaOapg.properties.payments_made: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estimated_eligibility_date"]) -> MetaOapg.properties.estimated_eligibility_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payments_remaining"], typing_extensions.Literal["payments_made"], typing_extensions.Literal["estimated_eligibility_date"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        payments_remaining: typing.Union[MetaOapg.properties.payments_remaining, None, decimal.Decimal, int, ],
        payments_made: typing.Union[MetaOapg.properties.payments_made, None, decimal.Decimal, int, ],
        estimated_eligibility_date: typing.Union[MetaOapg.properties.estimated_eligibility_date, None, str, date, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'PSLFStatus':
        return super().__new__(
            cls,
            *_args,
            payments_remaining=payments_remaining,
            payments_made=payments_made,
            estimated_eligibility_date=estimated_eligibility_date,
            _configuration=_configuration,
            **kwargs,
        )
