# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class Numbers(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Account and bank identifier number data used to configure the test account. All values are optional.
    """


    class MetaOapg:
        
        class properties:
            account = schemas.StrSchema
            ach_routing = schemas.StrSchema
            ach_wire_routing = schemas.StrSchema
            eft_institution = schemas.StrSchema
            eft_branch = schemas.StrSchema
            international_bic = schemas.StrSchema
            international_iban = schemas.StrSchema
            bacs_sort_code = schemas.StrSchema
            __annotations__ = {
                "account": account,
                "ach_routing": ach_routing,
                "ach_wire_routing": ach_wire_routing,
                "eft_institution": eft_institution,
                "eft_branch": eft_branch,
                "international_bic": international_bic,
                "international_iban": international_iban,
                "bacs_sort_code": bacs_sort_code,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ach_routing"]) -> MetaOapg.properties.ach_routing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ach_wire_routing"]) -> MetaOapg.properties.ach_wire_routing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eft_institution"]) -> MetaOapg.properties.eft_institution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eft_branch"]) -> MetaOapg.properties.eft_branch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["international_bic"]) -> MetaOapg.properties.international_bic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["international_iban"]) -> MetaOapg.properties.international_iban: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bacs_sort_code"]) -> MetaOapg.properties.bacs_sort_code: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account"], typing_extensions.Literal["ach_routing"], typing_extensions.Literal["ach_wire_routing"], typing_extensions.Literal["eft_institution"], typing_extensions.Literal["eft_branch"], typing_extensions.Literal["international_bic"], typing_extensions.Literal["international_iban"], typing_extensions.Literal["bacs_sort_code"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union[MetaOapg.properties.account, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ach_routing"]) -> typing.Union[MetaOapg.properties.ach_routing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ach_wire_routing"]) -> typing.Union[MetaOapg.properties.ach_wire_routing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eft_institution"]) -> typing.Union[MetaOapg.properties.eft_institution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eft_branch"]) -> typing.Union[MetaOapg.properties.eft_branch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["international_bic"]) -> typing.Union[MetaOapg.properties.international_bic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["international_iban"]) -> typing.Union[MetaOapg.properties.international_iban, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bacs_sort_code"]) -> typing.Union[MetaOapg.properties.bacs_sort_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account"], typing_extensions.Literal["ach_routing"], typing_extensions.Literal["ach_wire_routing"], typing_extensions.Literal["eft_institution"], typing_extensions.Literal["eft_branch"], typing_extensions.Literal["international_bic"], typing_extensions.Literal["international_iban"], typing_extensions.Literal["bacs_sort_code"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        account: typing.Union[MetaOapg.properties.account, str, schemas.Unset] = schemas.unset,
        ach_routing: typing.Union[MetaOapg.properties.ach_routing, str, schemas.Unset] = schemas.unset,
        ach_wire_routing: typing.Union[MetaOapg.properties.ach_wire_routing, str, schemas.Unset] = schemas.unset,
        eft_institution: typing.Union[MetaOapg.properties.eft_institution, str, schemas.Unset] = schemas.unset,
        eft_branch: typing.Union[MetaOapg.properties.eft_branch, str, schemas.Unset] = schemas.unset,
        international_bic: typing.Union[MetaOapg.properties.international_bic, str, schemas.Unset] = schemas.unset,
        international_iban: typing.Union[MetaOapg.properties.international_iban, str, schemas.Unset] = schemas.unset,
        bacs_sort_code: typing.Union[MetaOapg.properties.bacs_sort_code, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'Numbers':
        return super().__new__(
            cls,
            *_args,
            account=account,
            ach_routing=ach_routing,
            ach_wire_routing=ach_wire_routing,
            eft_institution=eft_institution,
            eft_branch=eft_branch,
            international_bic=international_bic,
            international_iban=international_iban,
            bacs_sort_code=bacs_sort_code,
            _configuration=_configuration,
            **kwargs,
        )
