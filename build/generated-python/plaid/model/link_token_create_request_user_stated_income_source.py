# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class LinkTokenCreateRequestUserStatedIncomeSource(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Specifies user stated income sources for the Income product
    """


    class MetaOapg:
        
        class properties:
            employer = schemas.StrSchema
        
            @staticmethod
            def category() -> typing.Type['UserStatedIncomeSourceCategory']:
                return UserStatedIncomeSourceCategory
            pay_per_cycle = schemas.Float64Schema
            pay_annual = schemas.Float64Schema
        
            @staticmethod
            def pay_type() -> typing.Type['UserStatedIncomeSourcePayType']:
                return UserStatedIncomeSourcePayType
        
            @staticmethod
            def pay_frequency() -> typing.Type['UserStatedIncomeSourceFrequency']:
                return UserStatedIncomeSourceFrequency
            __annotations__ = {
                "employer": employer,
                "category": category,
                "pay_per_cycle": pay_per_cycle,
                "pay_annual": pay_annual,
                "pay_type": pay_type,
                "pay_frequency": pay_frequency,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employer"]) -> MetaOapg.properties.employer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> 'UserStatedIncomeSourceCategory': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_per_cycle"]) -> MetaOapg.properties.pay_per_cycle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_annual"]) -> MetaOapg.properties.pay_annual: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_type"]) -> 'UserStatedIncomeSourcePayType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_frequency"]) -> 'UserStatedIncomeSourceFrequency': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employer", "category", "pay_per_cycle", "pay_annual", "pay_type", "pay_frequency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employer"]) -> typing.Union[MetaOapg.properties.employer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union['UserStatedIncomeSourceCategory', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_per_cycle"]) -> typing.Union[MetaOapg.properties.pay_per_cycle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_annual"]) -> typing.Union[MetaOapg.properties.pay_annual, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_type"]) -> typing.Union['UserStatedIncomeSourcePayType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_frequency"]) -> typing.Union['UserStatedIncomeSourceFrequency', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employer", "category", "pay_per_cycle", "pay_annual", "pay_type", "pay_frequency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        employer: typing.Union[MetaOapg.properties.employer, str, schemas.Unset] = schemas.unset,
        category: typing.Union['UserStatedIncomeSourceCategory', schemas.Unset] = schemas.unset,
        pay_per_cycle: typing.Union[MetaOapg.properties.pay_per_cycle, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pay_annual: typing.Union[MetaOapg.properties.pay_annual, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pay_type: typing.Union['UserStatedIncomeSourcePayType', schemas.Unset] = schemas.unset,
        pay_frequency: typing.Union['UserStatedIncomeSourceFrequency', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LinkTokenCreateRequestUserStatedIncomeSource':
        return super().__new__(
            cls,
            *_args,
            employer=employer,
            category=category,
            pay_per_cycle=pay_per_cycle,
            pay_annual=pay_annual,
            pay_type=pay_type,
            pay_frequency=pay_frequency,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.user_stated_income_source_category import UserStatedIncomeSourceCategory
from plaid.model.user_stated_income_source_frequency import UserStatedIncomeSourceFrequency
from plaid.model.user_stated_income_source_pay_type import UserStatedIncomeSourcePayType
