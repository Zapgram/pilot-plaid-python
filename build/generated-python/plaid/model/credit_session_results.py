# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class CreditSessionResults(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The set of results for a Link session.
    """


    class MetaOapg:
        
        class properties:
            
            
            class item_add_results(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CreditSessionItemAddResult']:
                        return CreditSessionItemAddResult
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CreditSessionItemAddResult'], typing.List['CreditSessionItemAddResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'item_add_results':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CreditSessionItemAddResult':
                    return super().__getitem__(i)
            
            
            class bank_income_results(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CreditSessionBankIncomeResult']:
                        return CreditSessionBankIncomeResult
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CreditSessionBankIncomeResult'], typing.List['CreditSessionBankIncomeResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bank_income_results':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CreditSessionBankIncomeResult':
                    return super().__getitem__(i)
            
            
            class bank_employment_results(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CreditSessionBankEmploymentResult']:
                        return CreditSessionBankEmploymentResult
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CreditSessionBankEmploymentResult'], typing.List['CreditSessionBankEmploymentResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bank_employment_results':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CreditSessionBankEmploymentResult':
                    return super().__getitem__(i)
            
            
            class payroll_income_results(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CreditSessionPayrollIncomeResult']:
                        return CreditSessionPayrollIncomeResult
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CreditSessionPayrollIncomeResult'], typing.List['CreditSessionPayrollIncomeResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payroll_income_results':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CreditSessionPayrollIncomeResult':
                    return super().__getitem__(i)
        
            @staticmethod
            def document_income_results() -> typing.Type['CreditSessionDocumentIncomeResult']:
                return CreditSessionDocumentIncomeResult
            __annotations__ = {
                "item_add_results": item_add_results,
                "bank_income_results": bank_income_results,
                "bank_employment_results": bank_employment_results,
                "payroll_income_results": payroll_income_results,
                "document_income_results": document_income_results,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_add_results"]) -> MetaOapg.properties.item_add_results: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_income_results"]) -> MetaOapg.properties.bank_income_results: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_employment_results"]) -> MetaOapg.properties.bank_employment_results: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payroll_income_results"]) -> MetaOapg.properties.payroll_income_results: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document_income_results"]) -> 'CreditSessionDocumentIncomeResult': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["item_add_results", "bank_income_results", "bank_employment_results", "payroll_income_results", "document_income_results", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_add_results"]) -> typing.Union[MetaOapg.properties.item_add_results, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_income_results"]) -> typing.Union[MetaOapg.properties.bank_income_results, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_employment_results"]) -> typing.Union[MetaOapg.properties.bank_employment_results, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payroll_income_results"]) -> typing.Union[MetaOapg.properties.payroll_income_results, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document_income_results"]) -> typing.Union['CreditSessionDocumentIncomeResult', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["item_add_results", "bank_income_results", "bank_employment_results", "payroll_income_results", "document_income_results", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        item_add_results: typing.Union[MetaOapg.properties.item_add_results, list, tuple, schemas.Unset] = schemas.unset,
        bank_income_results: typing.Union[MetaOapg.properties.bank_income_results, list, tuple, schemas.Unset] = schemas.unset,
        bank_employment_results: typing.Union[MetaOapg.properties.bank_employment_results, list, tuple, schemas.Unset] = schemas.unset,
        payroll_income_results: typing.Union[MetaOapg.properties.payroll_income_results, list, tuple, schemas.Unset] = schemas.unset,
        document_income_results: typing.Union['CreditSessionDocumentIncomeResult', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreditSessionResults':
        return super().__new__(
            cls,
            *_args,
            item_add_results=item_add_results,
            bank_income_results=bank_income_results,
            bank_employment_results=bank_employment_results,
            payroll_income_results=payroll_income_results,
            document_income_results=document_income_results,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.credit_session_bank_employment_result import CreditSessionBankEmploymentResult
from plaid.model.credit_session_bank_income_result import CreditSessionBankIncomeResult
from plaid.model.credit_session_document_income_result import CreditSessionDocumentIncomeResult
from plaid.model.credit_session_item_add_result import CreditSessionItemAddResult
from plaid.model.credit_session_payroll_income_result import CreditSessionPayrollIncomeResult
