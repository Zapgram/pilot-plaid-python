# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class AccountFilter(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Enumerates the account subtypes that the application wishes for the user to be able to select from. For more details refer to Plaid documentation on account filters.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def depository() -> typing.Type['AccountFilterSubtypes']:
                return AccountFilterSubtypes
        
            @staticmethod
            def credit() -> typing.Type['AccountFilterSubtypes']:
                return AccountFilterSubtypes
        
            @staticmethod
            def loan() -> typing.Type['AccountFilterSubtypes']:
                return AccountFilterSubtypes
        
            @staticmethod
            def investment() -> typing.Type['AccountFilterSubtypes']:
                return AccountFilterSubtypes
            __annotations__ = {
                "depository": depository,
                "credit": credit,
                "loan": loan,
                "investment": investment,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depository"]) -> 'AccountFilterSubtypes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credit"]) -> 'AccountFilterSubtypes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loan"]) -> 'AccountFilterSubtypes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investment"]) -> 'AccountFilterSubtypes': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["depository", "credit", "loan", "investment", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depository"]) -> typing.Union['AccountFilterSubtypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credit"]) -> typing.Union['AccountFilterSubtypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loan"]) -> typing.Union['AccountFilterSubtypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investment"]) -> typing.Union['AccountFilterSubtypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["depository", "credit", "loan", "investment", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        depository: typing.Union['AccountFilterSubtypes', schemas.Unset] = schemas.unset,
        credit: typing.Union['AccountFilterSubtypes', schemas.Unset] = schemas.unset,
        loan: typing.Union['AccountFilterSubtypes', schemas.Unset] = schemas.unset,
        investment: typing.Union['AccountFilterSubtypes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccountFilter':
        return super().__new__(
            cls,
            *_args,
            depository=depository,
            credit=credit,
            loan=loan,
            investment=investment,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.account_filter_subtypes import AccountFilterSubtypes
