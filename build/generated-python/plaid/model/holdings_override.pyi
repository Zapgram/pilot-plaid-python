# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class HoldingsOverride(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Specify the holdings on the account.
    """


    class MetaOapg:
        required = {
            "institution_price",
            "security",
            "quantity",
            "currency",
        }
        
        class properties:
            institution_price = schemas.Float64Schema
            quantity = schemas.Float64Schema
            currency = schemas.StrSchema
        
            @staticmethod
            def security() -> typing.Type['SecurityOverride']:
                return SecurityOverride
            institution_price_as_of = schemas.DateSchema
            cost_basis = schemas.Float64Schema
            __annotations__ = {
                "institution_price": institution_price,
                "quantity": quantity,
                "currency": currency,
                "security": security,
                "institution_price_as_of": institution_price_as_of,
                "cost_basis": cost_basis,
            }
    
    institution_price: MetaOapg.properties.institution_price
    security: 'SecurityOverride'
    quantity: MetaOapg.properties.quantity
    currency: MetaOapg.properties.currency
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_price"]) -> MetaOapg.properties.institution_price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["security"]) -> 'SecurityOverride': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_price_as_of"]) -> MetaOapg.properties.institution_price_as_of: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost_basis"]) -> MetaOapg.properties.cost_basis: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["institution_price", "quantity", "currency", "security", "institution_price_as_of", "cost_basis", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_price"]) -> MetaOapg.properties.institution_price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["security"]) -> 'SecurityOverride': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_price_as_of"]) -> typing.Union[MetaOapg.properties.institution_price_as_of, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost_basis"]) -> typing.Union[MetaOapg.properties.cost_basis, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["institution_price", "quantity", "currency", "security", "institution_price_as_of", "cost_basis", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        institution_price: typing.Union[MetaOapg.properties.institution_price, decimal.Decimal, int, float, ],
        security: 'SecurityOverride',
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, float, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        institution_price_as_of: typing.Union[MetaOapg.properties.institution_price_as_of, str, date, schemas.Unset] = schemas.unset,
        cost_basis: typing.Union[MetaOapg.properties.cost_basis, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HoldingsOverride':
        return super().__new__(
            cls,
            *_args,
            institution_price=institution_price,
            security=security,
            quantity=quantity,
            currency=currency,
            institution_price_as_of=institution_price_as_of,
            cost_basis=cost_basis,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.security_override import SecurityOverride
