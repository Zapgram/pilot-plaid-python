# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class PartnerEndCustomerOAuthInstitution(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The OAuth registration information for an institution.
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            institution_id = schemas.StrSchema
        
            @staticmethod
            def environments() -> typing.Type['PartnerEndCustomerOAuthInstitutionEnvironments']:
                return PartnerEndCustomerOAuthInstitutionEnvironments
            
            
            class production_enablement_date(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'production_enablement_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class classic_disablement_date(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'classic_disablement_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "name": name,
                "institution_id": institution_id,
                "environments": environments,
                "production_enablement_date": production_enablement_date,
                "classic_disablement_date": classic_disablement_date,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_id"]) -> MetaOapg.properties.institution_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environments"]) -> 'PartnerEndCustomerOAuthInstitutionEnvironments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["production_enablement_date"]) -> MetaOapg.properties.production_enablement_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classic_disablement_date"]) -> MetaOapg.properties.classic_disablement_date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["institution_id"], typing_extensions.Literal["environments"], typing_extensions.Literal["production_enablement_date"], typing_extensions.Literal["classic_disablement_date"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_id"]) -> typing.Union[MetaOapg.properties.institution_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environments"]) -> typing.Union['PartnerEndCustomerOAuthInstitutionEnvironments', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["production_enablement_date"]) -> typing.Union[MetaOapg.properties.production_enablement_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classic_disablement_date"]) -> typing.Union[MetaOapg.properties.classic_disablement_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["institution_id"], typing_extensions.Literal["environments"], typing_extensions.Literal["production_enablement_date"], typing_extensions.Literal["classic_disablement_date"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        institution_id: typing.Union[MetaOapg.properties.institution_id, str, schemas.Unset] = schemas.unset,
        environments: typing.Union['PartnerEndCustomerOAuthInstitutionEnvironments', schemas.Unset] = schemas.unset,
        production_enablement_date: typing.Union[MetaOapg.properties.production_enablement_date, None, str, schemas.Unset] = schemas.unset,
        classic_disablement_date: typing.Union[MetaOapg.properties.classic_disablement_date, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'PartnerEndCustomerOAuthInstitution':
        return super().__new__(
            cls,
            *_args,
            name=name,
            institution_id=institution_id,
            environments=environments,
            production_enablement_date=production_enablement_date,
            classic_disablement_date=classic_disablement_date,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.partner_end_customer_o_auth_institution_environments import PartnerEndCustomerOAuthInstitutionEnvironments
