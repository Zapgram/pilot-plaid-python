# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class AssetReportCreateRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    AssetReportCreateRequest defines the request schema for `/asset_report/create`
    """


    class MetaOapg:
        required = {
            "days_requested",
        }
        
        class properties:
            
            
            class days_requested(
                schemas.IntSchema
            ):
                pass
            client_id = schemas.StrSchema
            secret = schemas.StrSchema
            
            
            class access_tokens(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'access_tokens':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            user_token = schemas.StrSchema
        
            @staticmethod
            def options() -> typing.Type['AssetReportCreateRequestOptions']:
                return AssetReportCreateRequestOptions
            __annotations__ = {
                "days_requested": days_requested,
                "client_id": client_id,
                "secret": secret,
                "access_tokens": access_tokens,
                "user_token": user_token,
                "options": options,
            }
    
    days_requested: MetaOapg.properties.days_requested
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_requested"]) -> MetaOapg.properties.days_requested: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_id"]) -> MetaOapg.properties.client_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_tokens"]) -> MetaOapg.properties.access_tokens: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_token"]) -> MetaOapg.properties.user_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> 'AssetReportCreateRequestOptions': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["days_requested", "client_id", "secret", "access_tokens", "user_token", "options", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_requested"]) -> MetaOapg.properties.days_requested: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_id"]) -> typing.Union[MetaOapg.properties.client_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_tokens"]) -> typing.Union[MetaOapg.properties.access_tokens, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_token"]) -> typing.Union[MetaOapg.properties.user_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> typing.Union['AssetReportCreateRequestOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["days_requested", "client_id", "secret", "access_tokens", "user_token", "options", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        days_requested: typing.Union[MetaOapg.properties.days_requested, decimal.Decimal, int, ],
        client_id: typing.Union[MetaOapg.properties.client_id, str, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        access_tokens: typing.Union[MetaOapg.properties.access_tokens, list, tuple, schemas.Unset] = schemas.unset,
        user_token: typing.Union[MetaOapg.properties.user_token, str, schemas.Unset] = schemas.unset,
        options: typing.Union['AssetReportCreateRequestOptions', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AssetReportCreateRequest':
        return super().__new__(
            cls,
            *_args,
            days_requested=days_requested,
            client_id=client_id,
            secret=secret,
            access_tokens=access_tokens,
            user_token=user_token,
            options=options,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.asset_report_create_request_options import AssetReportCreateRequestOptions
