# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class Warning(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    It is possible for an Asset Report to be returned with missing account owner information. In such cases, the Asset Report will contain warning data in the response, indicating why obtaining the owner information failed.
    """


    class MetaOapg:
        required = {
            "cause",
            "warning_type",
            "warning_code",
        }
        
        class properties:
            warning_type = schemas.StrSchema
            
            
            class warning_code(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "OWNERS_UNAVAILABLE": "OWNERS_UNAVAILABLE",
                        "INVESTMENTS_UNAVAILABLE": "INVESTMENTS_UNAVAILABLE",
                        "TRANSACTIONS_UNAVAILABLE": "TRANSACTIONS_UNAVAILABLE",
                    }
                
                @schemas.classproperty
                def OWNERS_UNAVAILABLE(cls):
                    return cls("OWNERS_UNAVAILABLE")
                
                @schemas.classproperty
                def INVESTMENTS_UNAVAILABLE(cls):
                    return cls("INVESTMENTS_UNAVAILABLE")
                
                @schemas.classproperty
                def TRANSACTIONS_UNAVAILABLE(cls):
                    return cls("TRANSACTIONS_UNAVAILABLE")
        
            @staticmethod
            def cause() -> typing.Type['Cause']:
                return Cause
            __annotations__ = {
                "warning_type": warning_type,
                "warning_code": warning_code,
                "cause": cause,
            }
        additional_properties = schemas.AnyTypeSchema
    
    cause: 'Cause'
    warning_type: MetaOapg.properties.warning_type
    warning_code: MetaOapg.properties.warning_code
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cause"]) -> 'Cause': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["warning_type"]) -> MetaOapg.properties.warning_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["warning_code"]) -> MetaOapg.properties.warning_code: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cause"], typing_extensions.Literal["warning_type"], typing_extensions.Literal["warning_code"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cause"]) -> 'Cause': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["warning_type"]) -> MetaOapg.properties.warning_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["warning_code"]) -> MetaOapg.properties.warning_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cause"], typing_extensions.Literal["warning_type"], typing_extensions.Literal["warning_code"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        cause: 'Cause',
        warning_type: typing.Union[MetaOapg.properties.warning_type, str, ],
        warning_code: typing.Union[MetaOapg.properties.warning_code, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'Warning':
        return super().__new__(
            cls,
            *_args,
            cause=cause,
            warning_type=warning_type,
            warning_code=warning_code,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.cause import Cause
