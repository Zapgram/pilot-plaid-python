# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class Paystub(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An object representing data extracted from the end user's paystub.
    """


    class MetaOapg:
        required = {
            "net_pay",
            "earnings",
            "pay_period_details",
            "employer",
            "deductions",
            "employee",
            "doc_id",
        }
        
        class properties:
        
            @staticmethod
            def deductions() -> typing.Type['Deductions']:
                return Deductions
            doc_id = schemas.StrSchema
        
            @staticmethod
            def earnings() -> typing.Type['Earnings']:
                return Earnings
        
            @staticmethod
            def employee() -> typing.Type['Employee']:
                return Employee
        
            @staticmethod
            def employer() -> typing.Type['PaystubEmployer']:
                return PaystubEmployer
        
            @staticmethod
            def net_pay() -> typing.Type['NetPay']:
                return NetPay
        
            @staticmethod
            def pay_period_details() -> typing.Type['PayPeriodDetails']:
                return PayPeriodDetails
        
            @staticmethod
            def employment_details() -> typing.Type['EmploymentDetails']:
                return EmploymentDetails
        
            @staticmethod
            def paystub_details() -> typing.Type['PaystubDetails']:
                return PaystubDetails
            
            
            class income_breakdown(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IncomeBreakdown']:
                        return IncomeBreakdown
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['IncomeBreakdown'], typing.List['IncomeBreakdown']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'income_breakdown':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IncomeBreakdown':
                    return super().__getitem__(i)
        
            @staticmethod
            def ytd_earnings() -> typing.Type['PaystubYTDDetails']:
                return PaystubYTDDetails
            __annotations__ = {
                "deductions": deductions,
                "doc_id": doc_id,
                "earnings": earnings,
                "employee": employee,
                "employer": employer,
                "net_pay": net_pay,
                "pay_period_details": pay_period_details,
                "employment_details": employment_details,
                "paystub_details": paystub_details,
                "income_breakdown": income_breakdown,
                "ytd_earnings": ytd_earnings,
            }
        additional_properties = schemas.AnyTypeSchema
    
    net_pay: 'NetPay'
    earnings: 'Earnings'
    pay_period_details: 'PayPeriodDetails'
    employer: 'PaystubEmployer'
    deductions: 'Deductions'
    employee: 'Employee'
    doc_id: MetaOapg.properties.doc_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["net_pay"]) -> 'NetPay': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["earnings"]) -> 'Earnings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_period_details"]) -> 'PayPeriodDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employer"]) -> 'PaystubEmployer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductions"]) -> 'Deductions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee"]) -> 'Employee': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["doc_id"]) -> MetaOapg.properties.doc_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employment_details"]) -> 'EmploymentDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paystub_details"]) -> 'PaystubDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["income_breakdown"]) -> MetaOapg.properties.income_breakdown: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ytd_earnings"]) -> 'PaystubYTDDetails': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["net_pay"], typing_extensions.Literal["earnings"], typing_extensions.Literal["pay_period_details"], typing_extensions.Literal["employer"], typing_extensions.Literal["deductions"], typing_extensions.Literal["employee"], typing_extensions.Literal["doc_id"], typing_extensions.Literal["employment_details"], typing_extensions.Literal["paystub_details"], typing_extensions.Literal["income_breakdown"], typing_extensions.Literal["ytd_earnings"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["net_pay"]) -> 'NetPay': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["earnings"]) -> 'Earnings': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_period_details"]) -> 'PayPeriodDetails': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employer"]) -> 'PaystubEmployer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductions"]) -> 'Deductions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee"]) -> 'Employee': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["doc_id"]) -> MetaOapg.properties.doc_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employment_details"]) -> typing.Union['EmploymentDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paystub_details"]) -> typing.Union['PaystubDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["income_breakdown"]) -> typing.Union[MetaOapg.properties.income_breakdown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ytd_earnings"]) -> typing.Union['PaystubYTDDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["net_pay"], typing_extensions.Literal["earnings"], typing_extensions.Literal["pay_period_details"], typing_extensions.Literal["employer"], typing_extensions.Literal["deductions"], typing_extensions.Literal["employee"], typing_extensions.Literal["doc_id"], typing_extensions.Literal["employment_details"], typing_extensions.Literal["paystub_details"], typing_extensions.Literal["income_breakdown"], typing_extensions.Literal["ytd_earnings"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        net_pay: 'NetPay',
        earnings: 'Earnings',
        pay_period_details: 'PayPeriodDetails',
        employer: 'PaystubEmployer',
        deductions: 'Deductions',
        employee: 'Employee',
        doc_id: typing.Union[MetaOapg.properties.doc_id, str, ],
        employment_details: typing.Union['EmploymentDetails', schemas.Unset] = schemas.unset,
        paystub_details: typing.Union['PaystubDetails', schemas.Unset] = schemas.unset,
        income_breakdown: typing.Union[MetaOapg.properties.income_breakdown, list, tuple, schemas.Unset] = schemas.unset,
        ytd_earnings: typing.Union['PaystubYTDDetails', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'Paystub':
        return super().__new__(
            cls,
            *_args,
            net_pay=net_pay,
            earnings=earnings,
            pay_period_details=pay_period_details,
            employer=employer,
            deductions=deductions,
            employee=employee,
            doc_id=doc_id,
            employment_details=employment_details,
            paystub_details=paystub_details,
            income_breakdown=income_breakdown,
            ytd_earnings=ytd_earnings,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.deductions import Deductions
from plaid.model.earnings import Earnings
from plaid.model.employee import Employee
from plaid.model.employment_details import EmploymentDetails
from plaid.model.income_breakdown import IncomeBreakdown
from plaid.model.net_pay import NetPay
from plaid.model.pay_period_details import PayPeriodDetails
from plaid.model.paystub_details import PaystubDetails
from plaid.model.paystub_employer import PaystubEmployer
from plaid.model.paystub_ytd_details import PaystubYTDDetails
