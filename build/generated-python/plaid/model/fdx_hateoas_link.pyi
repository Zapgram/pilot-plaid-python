# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class FDXHateoasLink(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    REST application constraint (Hypermedia As The Engine Of Application State)
    """


    class MetaOapg:
        required = {
            "href",
        }
        
        class properties:
            href = schemas.StrSchema
        
            @staticmethod
            def action() -> typing.Type['FDXHateoasLinkAction']:
                return FDXHateoasLinkAction
            rel = schemas.StrSchema
            
            
            class types(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['FDXContentTypes']:
                        return FDXContentTypes
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['FDXContentTypes'], typing.List['FDXContentTypes']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'types':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'FDXContentTypes':
                    return super().__getitem__(i)
            __annotations__ = {
                "href": href,
                "action": action,
                "rel": rel,
                "types": types,
            }
    
    href: MetaOapg.properties.href
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["action"]) -> 'FDXHateoasLinkAction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rel"]) -> MetaOapg.properties.rel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["types"]) -> MetaOapg.properties.types: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["href", "action", "rel", "types", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["action"]) -> typing.Union['FDXHateoasLinkAction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rel"]) -> typing.Union[MetaOapg.properties.rel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["types"]) -> typing.Union[MetaOapg.properties.types, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["href", "action", "rel", "types", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        href: typing.Union[MetaOapg.properties.href, str, ],
        action: typing.Union['FDXHateoasLinkAction', schemas.Unset] = schemas.unset,
        rel: typing.Union[MetaOapg.properties.rel, str, schemas.Unset] = schemas.unset,
        types: typing.Union[MetaOapg.properties.types, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FDXHateoasLink':
        return super().__new__(
            cls,
            *_args,
            href=href,
            action=action,
            rel=rel,
            types=types,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.fdx_content_types import FDXContentTypes
from plaid.model.fdx_hateoas_link_action import FDXHateoasLinkAction
