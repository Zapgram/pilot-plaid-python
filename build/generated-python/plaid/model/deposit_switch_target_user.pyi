# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class DepositSwitchTargetUser(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The deposit switch target user
    """


    class MetaOapg:
        required = {
            "phone",
            "given_name",
            "family_name",
            "email",
        }
        
        class properties:
            given_name = schemas.StrSchema
            family_name = schemas.StrSchema
            phone = schemas.StrSchema
            email = schemas.StrSchema
        
            @staticmethod
            def address() -> typing.Type['DepositSwitchAddressData']:
                return DepositSwitchAddressData
            tax_payer_id = schemas.StrSchema
            __annotations__ = {
                "given_name": given_name,
                "family_name": family_name,
                "phone": phone,
                "email": email,
                "address": address,
                "tax_payer_id": tax_payer_id,
            }
        additional_properties = schemas.AnyTypeSchema
    
    phone: MetaOapg.properties.phone
    given_name: MetaOapg.properties.given_name
    family_name: MetaOapg.properties.family_name
    email: MetaOapg.properties.email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["given_name"]) -> MetaOapg.properties.given_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["family_name"]) -> MetaOapg.properties.family_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'DepositSwitchAddressData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_payer_id"]) -> MetaOapg.properties.tax_payer_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["phone"], typing_extensions.Literal["given_name"], typing_extensions.Literal["family_name"], typing_extensions.Literal["email"], typing_extensions.Literal["address"], typing_extensions.Literal["tax_payer_id"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["given_name"]) -> MetaOapg.properties.given_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["family_name"]) -> MetaOapg.properties.family_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union['DepositSwitchAddressData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_payer_id"]) -> typing.Union[MetaOapg.properties.tax_payer_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["phone"], typing_extensions.Literal["given_name"], typing_extensions.Literal["family_name"], typing_extensions.Literal["email"], typing_extensions.Literal["address"], typing_extensions.Literal["tax_payer_id"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        phone: typing.Union[MetaOapg.properties.phone, str, ],
        given_name: typing.Union[MetaOapg.properties.given_name, str, ],
        family_name: typing.Union[MetaOapg.properties.family_name, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        address: typing.Union['DepositSwitchAddressData', schemas.Unset] = schemas.unset,
        tax_payer_id: typing.Union[MetaOapg.properties.tax_payer_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'DepositSwitchTargetUser':
        return super().__new__(
            cls,
            *_args,
            phone=phone,
            given_name=given_name,
            family_name=family_name,
            email=email,
            address=address,
            tax_payer_id=tax_payer_id,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.deposit_switch_address_data import DepositSwitchAddressData
