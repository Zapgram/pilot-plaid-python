# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class PayrollItem(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An object containing information about the payroll item.
    """


    class MetaOapg:
        required = {
            "updated_at",
            "item_id",
            "payroll_income",
            "accounts",
            "institution_name",
            "institution_id",
            "status",
        }
        
        class properties:
            item_id = schemas.StrSchema
            institution_id = schemas.StrSchema
            institution_name = schemas.StrSchema
            
            
            class accounts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PayrollIncomeAccountData']:
                        return PayrollIncomeAccountData
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PayrollIncomeAccountData'], typing.List['PayrollIncomeAccountData']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accounts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PayrollIncomeAccountData':
                    return super().__getitem__(i)
            
            
            class payroll_income(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PayrollIncomeObject']:
                        return PayrollIncomeObject
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PayrollIncomeObject'], typing.List['PayrollIncomeObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payroll_income':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PayrollIncomeObject':
                    return super().__getitem__(i)
        
            @staticmethod
            def status() -> typing.Type['PayrollItemStatus']:
                return PayrollItemStatus
            
            
            class updated_at(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'updated_at':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "item_id": item_id,
                "institution_id": institution_id,
                "institution_name": institution_name,
                "accounts": accounts,
                "payroll_income": payroll_income,
                "status": status,
                "updated_at": updated_at,
            }
    
    updated_at: MetaOapg.properties.updated_at
    item_id: MetaOapg.properties.item_id
    payroll_income: MetaOapg.properties.payroll_income
    accounts: MetaOapg.properties.accounts
    institution_name: MetaOapg.properties.institution_name
    institution_id: MetaOapg.properties.institution_id
    status: 'PayrollItemStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_id"]) -> MetaOapg.properties.institution_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_name"]) -> MetaOapg.properties.institution_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accounts"]) -> MetaOapg.properties.accounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payroll_income"]) -> MetaOapg.properties.payroll_income: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'PayrollItemStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["item_id", "institution_id", "institution_name", "accounts", "payroll_income", "status", "updated_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_id"]) -> MetaOapg.properties.institution_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_name"]) -> MetaOapg.properties.institution_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accounts"]) -> MetaOapg.properties.accounts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payroll_income"]) -> MetaOapg.properties.payroll_income: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'PayrollItemStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["item_id", "institution_id", "institution_name", "accounts", "payroll_income", "status", "updated_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, None, str, datetime, ],
        item_id: typing.Union[MetaOapg.properties.item_id, str, ],
        payroll_income: typing.Union[MetaOapg.properties.payroll_income, list, tuple, ],
        accounts: typing.Union[MetaOapg.properties.accounts, list, tuple, ],
        institution_name: typing.Union[MetaOapg.properties.institution_name, str, ],
        institution_id: typing.Union[MetaOapg.properties.institution_id, str, ],
        status: 'PayrollItemStatus',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayrollItem':
        return super().__new__(
            cls,
            *_args,
            updated_at=updated_at,
            item_id=item_id,
            payroll_income=payroll_income,
            accounts=accounts,
            institution_name=institution_name,
            institution_id=institution_id,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.payroll_income_account_data import PayrollIncomeAccountData
from plaid.model.payroll_income_object import PayrollIncomeObject
from plaid.model.payroll_item_status import PayrollItemStatus
