# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class ProcessorSignalEvaluateRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ProcessorSignalEvaluateRequest defines the request schema for `/processor/signal/evaluate`
    """


    class MetaOapg:
        required = {
            "amount",
            "processor_token",
            "client_transaction_id",
        }
        
        class properties:
            processor_token = schemas.StrSchema
            
            
            class client_transaction_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 36
                    min_length = 1
            amount = schemas.Float64Schema
            client_id = schemas.StrSchema
            secret = schemas.StrSchema
            
            
            class user_present(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'user_present':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            client_user_id = schemas.StrSchema
            
            
            class is_recurring(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_recurring':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class default_payment_method(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'default_payment_method':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def user() -> typing.Type['SignalUser']:
                return SignalUser
        
            @staticmethod
            def device() -> typing.Type['SignalDevice']:
                return SignalDevice
            __annotations__ = {
                "processor_token": processor_token,
                "client_transaction_id": client_transaction_id,
                "amount": amount,
                "client_id": client_id,
                "secret": secret,
                "user_present": user_present,
                "client_user_id": client_user_id,
                "is_recurring": is_recurring,
                "default_payment_method": default_payment_method,
                "user": user,
                "device": device,
            }
    
    amount: MetaOapg.properties.amount
    processor_token: MetaOapg.properties.processor_token
    client_transaction_id: MetaOapg.properties.client_transaction_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processor_token"]) -> MetaOapg.properties.processor_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_transaction_id"]) -> MetaOapg.properties.client_transaction_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_id"]) -> MetaOapg.properties.client_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_present"]) -> MetaOapg.properties.user_present: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_user_id"]) -> MetaOapg.properties.client_user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_recurring"]) -> MetaOapg.properties.is_recurring: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_payment_method"]) -> MetaOapg.properties.default_payment_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'SignalUser': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device"]) -> 'SignalDevice': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["processor_token", "client_transaction_id", "amount", "client_id", "secret", "user_present", "client_user_id", "is_recurring", "default_payment_method", "user", "device", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processor_token"]) -> MetaOapg.properties.processor_token: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_transaction_id"]) -> MetaOapg.properties.client_transaction_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_id"]) -> typing.Union[MetaOapg.properties.client_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_present"]) -> typing.Union[MetaOapg.properties.user_present, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_user_id"]) -> typing.Union[MetaOapg.properties.client_user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_recurring"]) -> typing.Union[MetaOapg.properties.is_recurring, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_payment_method"]) -> typing.Union[MetaOapg.properties.default_payment_method, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['SignalUser', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device"]) -> typing.Union['SignalDevice', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["processor_token", "client_transaction_id", "amount", "client_id", "secret", "user_present", "client_user_id", "is_recurring", "default_payment_method", "user", "device", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
        processor_token: typing.Union[MetaOapg.properties.processor_token, str, ],
        client_transaction_id: typing.Union[MetaOapg.properties.client_transaction_id, str, ],
        client_id: typing.Union[MetaOapg.properties.client_id, str, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        user_present: typing.Union[MetaOapg.properties.user_present, None, bool, schemas.Unset] = schemas.unset,
        client_user_id: typing.Union[MetaOapg.properties.client_user_id, str, schemas.Unset] = schemas.unset,
        is_recurring: typing.Union[MetaOapg.properties.is_recurring, None, bool, schemas.Unset] = schemas.unset,
        default_payment_method: typing.Union[MetaOapg.properties.default_payment_method, None, str, schemas.Unset] = schemas.unset,
        user: typing.Union['SignalUser', schemas.Unset] = schemas.unset,
        device: typing.Union['SignalDevice', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProcessorSignalEvaluateRequest':
        return super().__new__(
            cls,
            *_args,
            amount=amount,
            processor_token=processor_token,
            client_transaction_id=client_transaction_id,
            client_id=client_id,
            secret=secret,
            user_present=user_present,
            client_user_id=client_user_id,
            is_recurring=is_recurring,
            default_payment_method=default_payment_method,
            user=user,
            device=device,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.signal_device import SignalDevice
from plaid.model.signal_user import SignalUser
