# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class TransferAuthorizationProposedTransfer(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Details regarding the proposed transfer.
    """


    class MetaOapg:
        required = {
            "funding_account_id",
            "amount",
            "originator_client_id",
            "credit_funds_source",
            "iso_currency_code",
            "origination_account_id",
            "type",
            "user",
            "network",
        }
        
        class properties:
        
            @staticmethod
            def funding_account_id() -> typing.Type['TransferFundingAccountIDResponseNullable']:
                return TransferFundingAccountIDResponseNullable
        
            @staticmethod
            def type() -> typing.Type['TransferType']:
                return TransferType
        
            @staticmethod
            def user() -> typing.Type['TransferUserInResponse']:
                return TransferUserInResponse
            amount = schemas.StrSchema
            network = schemas.StrSchema
            origination_account_id = schemas.StrSchema
            iso_currency_code = schemas.StrSchema
            
            
            class originator_client_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'originator_client_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def credit_funds_source() -> typing.Type['TransferCreditFundsSource']:
                return TransferCreditFundsSource
        
            @staticmethod
            def ach_class() -> typing.Type['ACHClass']:
                return ACHClass
            account_id = schemas.StrSchema
            __annotations__ = {
                "funding_account_id": funding_account_id,
                "type": type,
                "user": user,
                "amount": amount,
                "network": network,
                "origination_account_id": origination_account_id,
                "iso_currency_code": iso_currency_code,
                "originator_client_id": originator_client_id,
                "credit_funds_source": credit_funds_source,
                "ach_class": ach_class,
                "account_id": account_id,
            }
        additional_properties = schemas.AnyTypeSchema
    
    funding_account_id: 'TransferFundingAccountIDResponseNullable'
    amount: MetaOapg.properties.amount
    originator_client_id: MetaOapg.properties.originator_client_id
    credit_funds_source: 'TransferCreditFundsSource'
    iso_currency_code: MetaOapg.properties.iso_currency_code
    origination_account_id: MetaOapg.properties.origination_account_id
    type: 'TransferType'
    user: 'TransferUserInResponse'
    network: MetaOapg.properties.network
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["funding_account_id"]) -> 'TransferFundingAccountIDResponseNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originator_client_id"]) -> MetaOapg.properties.originator_client_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credit_funds_source"]) -> 'TransferCreditFundsSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origination_account_id"]) -> MetaOapg.properties.origination_account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'TransferType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'TransferUserInResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network"]) -> MetaOapg.properties.network: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ach_class"]) -> 'ACHClass': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["funding_account_id"], typing_extensions.Literal["amount"], typing_extensions.Literal["originator_client_id"], typing_extensions.Literal["credit_funds_source"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["origination_account_id"], typing_extensions.Literal["type"], typing_extensions.Literal["user"], typing_extensions.Literal["network"], typing_extensions.Literal["ach_class"], typing_extensions.Literal["account_id"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["funding_account_id"]) -> 'TransferFundingAccountIDResponseNullable': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originator_client_id"]) -> MetaOapg.properties.originator_client_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credit_funds_source"]) -> 'TransferCreditFundsSource': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origination_account_id"]) -> MetaOapg.properties.origination_account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'TransferType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'TransferUserInResponse': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network"]) -> MetaOapg.properties.network: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ach_class"]) -> typing.Union['ACHClass', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> typing.Union[MetaOapg.properties.account_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["funding_account_id"], typing_extensions.Literal["amount"], typing_extensions.Literal["originator_client_id"], typing_extensions.Literal["credit_funds_source"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["origination_account_id"], typing_extensions.Literal["type"], typing_extensions.Literal["user"], typing_extensions.Literal["network"], typing_extensions.Literal["ach_class"], typing_extensions.Literal["account_id"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        funding_account_id: 'TransferFundingAccountIDResponseNullable',
        amount: typing.Union[MetaOapg.properties.amount, str, ],
        originator_client_id: typing.Union[MetaOapg.properties.originator_client_id, None, str, ],
        credit_funds_source: 'TransferCreditFundsSource',
        iso_currency_code: typing.Union[MetaOapg.properties.iso_currency_code, str, ],
        origination_account_id: typing.Union[MetaOapg.properties.origination_account_id, str, ],
        type: 'TransferType',
        user: 'TransferUserInResponse',
        network: typing.Union[MetaOapg.properties.network, str, ],
        ach_class: typing.Union['ACHClass', schemas.Unset] = schemas.unset,
        account_id: typing.Union[MetaOapg.properties.account_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'TransferAuthorizationProposedTransfer':
        return super().__new__(
            cls,
            *_args,
            funding_account_id=funding_account_id,
            amount=amount,
            originator_client_id=originator_client_id,
            credit_funds_source=credit_funds_source,
            iso_currency_code=iso_currency_code,
            origination_account_id=origination_account_id,
            type=type,
            user=user,
            network=network,
            ach_class=ach_class,
            account_id=account_id,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.ach_class import ACHClass
from plaid.model.transfer_credit_funds_source import TransferCreditFundsSource
from plaid.model.transfer_funding_account_id_response_nullable import TransferFundingAccountIDResponseNullable
from plaid.model.transfer_type import TransferType
from plaid.model.transfer_user_in_response import TransferUserInResponse
