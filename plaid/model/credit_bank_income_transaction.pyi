# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class CreditBankIncomeTransaction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The transactions data for the end user's income source(s).
    """


    class MetaOapg:
        
        class properties:
            amount = schemas.NumberSchema
            date = schemas.DateSchema
            name = schemas.StrSchema
            
            
            class original_description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'original_description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            pending = schemas.BoolSchema
            transaction_id = schemas.StrSchema
            
            
            class check_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'check_number':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def iso_currency_code() -> typing.Type['CreditIsoCurrencyCode']:
                return CreditIsoCurrencyCode
        
            @staticmethod
            def unofficial_currency_code() -> typing.Type['CreditUnofficialCurrencyCode']:
                return CreditUnofficialCurrencyCode
            __annotations__ = {
                "amount": amount,
                "date": date,
                "name": name,
                "original_description": original_description,
                "pending": pending,
                "transaction_id": transaction_id,
                "check_number": check_number,
                "iso_currency_code": iso_currency_code,
                "unofficial_currency_code": unofficial_currency_code,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["original_description"]) -> MetaOapg.properties.original_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pending"]) -> MetaOapg.properties.pending: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_id"]) -> MetaOapg.properties.transaction_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["check_number"]) -> MetaOapg.properties.check_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iso_currency_code"]) -> 'CreditIsoCurrencyCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unofficial_currency_code"]) -> 'CreditUnofficialCurrencyCode': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount"], typing_extensions.Literal["date"], typing_extensions.Literal["name"], typing_extensions.Literal["original_description"], typing_extensions.Literal["pending"], typing_extensions.Literal["transaction_id"], typing_extensions.Literal["check_number"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["unofficial_currency_code"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["original_description"]) -> typing.Union[MetaOapg.properties.original_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pending"]) -> typing.Union[MetaOapg.properties.pending, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_id"]) -> typing.Union[MetaOapg.properties.transaction_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["check_number"]) -> typing.Union[MetaOapg.properties.check_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iso_currency_code"]) -> typing.Union['CreditIsoCurrencyCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unofficial_currency_code"]) -> typing.Union['CreditUnofficialCurrencyCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount"], typing_extensions.Literal["date"], typing_extensions.Literal["name"], typing_extensions.Literal["original_description"], typing_extensions.Literal["pending"], typing_extensions.Literal["transaction_id"], typing_extensions.Literal["check_number"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["unofficial_currency_code"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, date, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        original_description: typing.Union[MetaOapg.properties.original_description, None, str, schemas.Unset] = schemas.unset,
        pending: typing.Union[MetaOapg.properties.pending, bool, schemas.Unset] = schemas.unset,
        transaction_id: typing.Union[MetaOapg.properties.transaction_id, str, schemas.Unset] = schemas.unset,
        check_number: typing.Union[MetaOapg.properties.check_number, None, str, schemas.Unset] = schemas.unset,
        iso_currency_code: typing.Union['CreditIsoCurrencyCode', schemas.Unset] = schemas.unset,
        unofficial_currency_code: typing.Union['CreditUnofficialCurrencyCode', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'CreditBankIncomeTransaction':
        return super().__new__(
            cls,
            *_args,
            amount=amount,
            date=date,
            name=name,
            original_description=original_description,
            pending=pending,
            transaction_id=transaction_id,
            check_number=check_number,
            iso_currency_code=iso_currency_code,
            unofficial_currency_code=unofficial_currency_code,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.credit_iso_currency_code import CreditIsoCurrencyCode
from plaid.model.credit_unofficial_currency_code import CreditUnofficialCurrencyCode
