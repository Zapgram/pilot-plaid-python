# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class SandboxIncomeFireWebhookRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    SandboxIncomeFireWebhookRequest defines the request schema for `/sandbox/income/fire_webhook`
    """


    class MetaOapg:
        required = {
            "webhook",
            "item_id",
            "verification_status",
        }
        
        class properties:
            item_id = schemas.StrSchema
            webhook = schemas.StrSchema
            
            
            class verification_status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "VERIFICATION_STATUS_PROCESSING_COMPLETE": "PROCESSING_COMPLETE",
                        "VERIFICATION_STATUS_PROCESSING_FAILED": "PROCESSING_FAILED",
                        "VERIFICATION_STATUS_PENDING_APPROVAL": "PENDING_APPROVAL",
                    }
                
                @schemas.classproperty
                def PROCESSING_COMPLETE(cls):
                    return cls("VERIFICATION_STATUS_PROCESSING_COMPLETE")
                
                @schemas.classproperty
                def PROCESSING_FAILED(cls):
                    return cls("VERIFICATION_STATUS_PROCESSING_FAILED")
                
                @schemas.classproperty
                def PENDING_APPROVAL(cls):
                    return cls("VERIFICATION_STATUS_PENDING_APPROVAL")
            client_id = schemas.StrSchema
            secret = schemas.StrSchema
            user_id = schemas.StrSchema
            __annotations__ = {
                "item_id": item_id,
                "webhook": webhook,
                "verification_status": verification_status,
                "client_id": client_id,
                "secret": secret,
                "user_id": user_id,
            }
    
    webhook: MetaOapg.properties.webhook
    item_id: MetaOapg.properties.item_id
    verification_status: MetaOapg.properties.verification_status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhook"]) -> MetaOapg.properties.webhook: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verification_status"]) -> MetaOapg.properties.verification_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_id"]) -> MetaOapg.properties.client_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["item_id", "webhook", "verification_status", "client_id", "secret", "user_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhook"]) -> MetaOapg.properties.webhook: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verification_status"]) -> MetaOapg.properties.verification_status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_id"]) -> typing.Union[MetaOapg.properties.client_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> typing.Union[MetaOapg.properties.user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["item_id", "webhook", "verification_status", "client_id", "secret", "user_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        webhook: typing.Union[MetaOapg.properties.webhook, str, ],
        item_id: typing.Union[MetaOapg.properties.item_id, str, ],
        verification_status: typing.Union[MetaOapg.properties.verification_status, str, ],
        client_id: typing.Union[MetaOapg.properties.client_id, str, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        user_id: typing.Union[MetaOapg.properties.user_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SandboxIncomeFireWebhookRequest':
        return super().__new__(
            cls,
            *_args,
            webhook=webhook,
            item_id=item_id,
            verification_status=verification_status,
            client_id=client_id,
            secret=secret,
            user_id=user_id,
            _configuration=_configuration,
            **kwargs,
        )
