# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class FDXNotification(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Provides the base fields of a notification. Clients will read the `type` property to determine the expected notification payload
    """


    class MetaOapg:
        required = {
            "notificationPayload",
            "sentOn",
            "publisher",
            "notificationId",
            "category",
            "type",
        }
        
        class properties:
            notificationId = schemas.StrSchema
        
            @staticmethod
            def type() -> typing.Type['FDXNotificationType']:
                return FDXNotificationType
            sentOn = schemas.DateTimeSchema
        
            @staticmethod
            def category() -> typing.Type['FDXNotificationCategory']:
                return FDXNotificationCategory
        
            @staticmethod
            def publisher() -> typing.Type['FDXParty']:
                return FDXParty
        
            @staticmethod
            def notificationPayload() -> typing.Type['FDXNotificationPayload']:
                return FDXNotificationPayload
        
            @staticmethod
            def severity() -> typing.Type['FDXNotificationSeverity']:
                return FDXNotificationSeverity
        
            @staticmethod
            def priority() -> typing.Type['FDXNotificationPriority']:
                return FDXNotificationPriority
        
            @staticmethod
            def subscriber() -> typing.Type['FDXParty']:
                return FDXParty
        
            @staticmethod
            def url() -> typing.Type['FDXHateoasLink']:
                return FDXHateoasLink
            __annotations__ = {
                "notificationId": notificationId,
                "type": type,
                "sentOn": sentOn,
                "category": category,
                "publisher": publisher,
                "notificationPayload": notificationPayload,
                "severity": severity,
                "priority": priority,
                "subscriber": subscriber,
                "url": url,
            }
    
    notificationPayload: 'FDXNotificationPayload'
    sentOn: MetaOapg.properties.sentOn
    publisher: 'FDXParty'
    notificationId: MetaOapg.properties.notificationId
    category: 'FDXNotificationCategory'
    type: 'FDXNotificationType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notificationId"]) -> MetaOapg.properties.notificationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'FDXNotificationType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sentOn"]) -> MetaOapg.properties.sentOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> 'FDXNotificationCategory': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publisher"]) -> 'FDXParty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notificationPayload"]) -> 'FDXNotificationPayload': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severity"]) -> 'FDXNotificationSeverity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> 'FDXNotificationPriority': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscriber"]) -> 'FDXParty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> 'FDXHateoasLink': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["notificationId", "type", "sentOn", "category", "publisher", "notificationPayload", "severity", "priority", "subscriber", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notificationId"]) -> MetaOapg.properties.notificationId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'FDXNotificationType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sentOn"]) -> MetaOapg.properties.sentOn: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> 'FDXNotificationCategory': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publisher"]) -> 'FDXParty': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notificationPayload"]) -> 'FDXNotificationPayload': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severity"]) -> typing.Union['FDXNotificationSeverity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union['FDXNotificationPriority', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscriber"]) -> typing.Union['FDXParty', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union['FDXHateoasLink', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["notificationId", "type", "sentOn", "category", "publisher", "notificationPayload", "severity", "priority", "subscriber", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        notificationPayload: 'FDXNotificationPayload',
        sentOn: typing.Union[MetaOapg.properties.sentOn, str, datetime, ],
        publisher: 'FDXParty',
        notificationId: typing.Union[MetaOapg.properties.notificationId, str, ],
        category: 'FDXNotificationCategory',
        type: 'FDXNotificationType',
        severity: typing.Union['FDXNotificationSeverity', schemas.Unset] = schemas.unset,
        priority: typing.Union['FDXNotificationPriority', schemas.Unset] = schemas.unset,
        subscriber: typing.Union['FDXParty', schemas.Unset] = schemas.unset,
        url: typing.Union['FDXHateoasLink', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FDXNotification':
        return super().__new__(
            cls,
            *_args,
            notificationPayload=notificationPayload,
            sentOn=sentOn,
            publisher=publisher,
            notificationId=notificationId,
            category=category,
            type=type,
            severity=severity,
            priority=priority,
            subscriber=subscriber,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.fdx_hateoas_link import FDXHateoasLink
from plaid.model.fdx_notification_category import FDXNotificationCategory
from plaid.model.fdx_notification_payload import FDXNotificationPayload
from plaid.model.fdx_notification_priority import FDXNotificationPriority
from plaid.model.fdx_notification_severity import FDXNotificationSeverity
from plaid.model.fdx_notification_type import FDXNotificationType
from plaid.model.fdx_party import FDXParty
