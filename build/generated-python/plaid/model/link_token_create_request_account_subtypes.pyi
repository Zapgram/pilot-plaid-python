# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class LinkTokenCreateRequestAccountSubtypes(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    By default, Link will only display account types that are compatible with all products supplied in the `products` parameter of `/link/token/create`. You can further limit the accounts shown in Link by using `account_filters` to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value `"all"`. If the `account_filters` filter is used, any account type for which a filter is not specified will be entirely omitted from Link.

For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).

For institutions using OAuth, the filter will not affect the list of institutions or accounts shown by the bank in the OAuth window.

    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def depository() -> typing.Type['LinkTokenCreateDepositoryFilter']:
                return LinkTokenCreateDepositoryFilter
        
            @staticmethod
            def credit() -> typing.Type['LinkTokenCreateCreditFilter']:
                return LinkTokenCreateCreditFilter
        
            @staticmethod
            def loan() -> typing.Type['LinkTokenCreateLoanFilter']:
                return LinkTokenCreateLoanFilter
        
            @staticmethod
            def investment() -> typing.Type['LinkTokenCreateInvestmentFilter']:
                return LinkTokenCreateInvestmentFilter
            __annotations__ = {
                "depository": depository,
                "credit": credit,
                "loan": loan,
                "investment": investment,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depository"]) -> 'LinkTokenCreateDepositoryFilter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credit"]) -> 'LinkTokenCreateCreditFilter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loan"]) -> 'LinkTokenCreateLoanFilter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investment"]) -> 'LinkTokenCreateInvestmentFilter': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["depository", "credit", "loan", "investment", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depository"]) -> typing.Union['LinkTokenCreateDepositoryFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credit"]) -> typing.Union['LinkTokenCreateCreditFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loan"]) -> typing.Union['LinkTokenCreateLoanFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investment"]) -> typing.Union['LinkTokenCreateInvestmentFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["depository", "credit", "loan", "investment", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        depository: typing.Union['LinkTokenCreateDepositoryFilter', schemas.Unset] = schemas.unset,
        credit: typing.Union['LinkTokenCreateCreditFilter', schemas.Unset] = schemas.unset,
        loan: typing.Union['LinkTokenCreateLoanFilter', schemas.Unset] = schemas.unset,
        investment: typing.Union['LinkTokenCreateInvestmentFilter', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LinkTokenCreateRequestAccountSubtypes':
        return super().__new__(
            cls,
            *_args,
            depository=depository,
            credit=credit,
            loan=loan,
            investment=investment,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.link_token_create_credit_filter import LinkTokenCreateCreditFilter
from plaid.model.link_token_create_depository_filter import LinkTokenCreateDepositoryFilter
from plaid.model.link_token_create_investment_filter import LinkTokenCreateInvestmentFilter
from plaid.model.link_token_create_loan_filter import LinkTokenCreateLoanFilter
