# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class DepositSwitchAltCreateRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    DepositSwitchAltCreateRequest defines the request schema for `/deposit_switch/alt/create`
    """


    class MetaOapg:
        required = {
            "target_user",
            "target_account",
        }
        
        class properties:
        
            @staticmethod
            def target_account() -> typing.Type['DepositSwitchTargetAccount']:
                return DepositSwitchTargetAccount
        
            @staticmethod
            def target_user() -> typing.Type['DepositSwitchTargetUser']:
                return DepositSwitchTargetUser
            client_id = schemas.StrSchema
            secret = schemas.StrSchema
        
            @staticmethod
            def options() -> typing.Type['DepositSwitchCreateRequestOptions']:
                return DepositSwitchCreateRequestOptions
            
            
            class country_code(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "US": "US",
                        "CA": "CA",
                    }
                
                @schemas.classproperty
                def US(cls):
                    return cls("US")
                
                @schemas.classproperty
                def CA(cls):
                    return cls("CA")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'country_code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "target_account": target_account,
                "target_user": target_user,
                "client_id": client_id,
                "secret": secret,
                "options": options,
                "country_code": country_code,
            }
    
    target_user: 'DepositSwitchTargetUser'
    target_account: 'DepositSwitchTargetAccount'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_account"]) -> 'DepositSwitchTargetAccount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_user"]) -> 'DepositSwitchTargetUser': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_id"]) -> MetaOapg.properties.client_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> 'DepositSwitchCreateRequestOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> MetaOapg.properties.country_code: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["target_account", "target_user", "client_id", "secret", "options", "country_code", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_account"]) -> 'DepositSwitchTargetAccount': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_user"]) -> 'DepositSwitchTargetUser': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_id"]) -> typing.Union[MetaOapg.properties.client_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> typing.Union['DepositSwitchCreateRequestOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> typing.Union[MetaOapg.properties.country_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["target_account", "target_user", "client_id", "secret", "options", "country_code", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        target_user: 'DepositSwitchTargetUser',
        target_account: 'DepositSwitchTargetAccount',
        client_id: typing.Union[MetaOapg.properties.client_id, str, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        options: typing.Union['DepositSwitchCreateRequestOptions', schemas.Unset] = schemas.unset,
        country_code: typing.Union[MetaOapg.properties.country_code, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DepositSwitchAltCreateRequest':
        return super().__new__(
            cls,
            *_args,
            target_user=target_user,
            target_account=target_account,
            client_id=client_id,
            secret=secret,
            options=options,
            country_code=country_code,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.deposit_switch_create_request_options import DepositSwitchCreateRequestOptions
from plaid.model.deposit_switch_target_account import DepositSwitchTargetAccount
from plaid.model.deposit_switch_target_user import DepositSwitchTargetUser
