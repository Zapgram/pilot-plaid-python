# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class LinkDeliveryRecipient(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Metadata related to the recipient. If the information required to populate this field is not available, leave it blank.
    """


    class MetaOapg:
        
        class properties:
            
            
            class communication_methods(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LinkDeliveryCommunicationMethod']:
                        return LinkDeliveryCommunicationMethod
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['LinkDeliveryCommunicationMethod'], typing.List['LinkDeliveryCommunicationMethod']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'communication_methods':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LinkDeliveryCommunicationMethod':
                    return super().__getitem__(i)
            first_name = schemas.StrSchema
            __annotations__ = {
                "communication_methods": communication_methods,
                "first_name": first_name,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["communication_methods"]) -> MetaOapg.properties.communication_methods: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["communication_methods", "first_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["communication_methods"]) -> typing.Union[MetaOapg.properties.communication_methods, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> typing.Union[MetaOapg.properties.first_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["communication_methods", "first_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        communication_methods: typing.Union[MetaOapg.properties.communication_methods, list, tuple, schemas.Unset] = schemas.unset,
        first_name: typing.Union[MetaOapg.properties.first_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LinkDeliveryRecipient':
        return super().__new__(
            cls,
            *_args,
            communication_methods=communication_methods,
            first_name=first_name,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.link_delivery_communication_method import LinkDeliveryCommunicationMethod
