# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class Activity(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Describes a consent activity.
    """


    class MetaOapg:
        required = {
            "activity",
            "initiator",
            "initiated_date",
            "id",
            "state",
        }
        
        class properties:
        
            @staticmethod
            def activity() -> typing.Type['ActivityType']:
                return ActivityType
            initiated_date = schemas.DateSchema
            id = schemas.StrSchema
            initiator = schemas.StrSchema
        
            @staticmethod
            def state() -> typing.Type['ActionState']:
                return ActionState
            target_application_id = schemas.StrSchema
        
            @staticmethod
            def scopes() -> typing.Type['ScopesNullable']:
                return ScopesNullable
            __annotations__ = {
                "activity": activity,
                "initiated_date": initiated_date,
                "id": id,
                "initiator": initiator,
                "state": state,
                "target_application_id": target_application_id,
                "scopes": scopes,
            }
    
    activity: 'ActivityType'
    initiator: MetaOapg.properties.initiator
    initiated_date: MetaOapg.properties.initiated_date
    id: MetaOapg.properties.id
    state: 'ActionState'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activity"]) -> 'ActivityType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initiated_date"]) -> MetaOapg.properties.initiated_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initiator"]) -> MetaOapg.properties.initiator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> 'ActionState': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_application_id"]) -> MetaOapg.properties.target_application_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> 'ScopesNullable': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["activity", "initiated_date", "id", "initiator", "state", "target_application_id", "scopes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activity"]) -> 'ActivityType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initiated_date"]) -> MetaOapg.properties.initiated_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initiator"]) -> MetaOapg.properties.initiator: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> 'ActionState': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_application_id"]) -> typing.Union[MetaOapg.properties.target_application_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> typing.Union['ScopesNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["activity", "initiated_date", "id", "initiator", "state", "target_application_id", "scopes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        activity: 'ActivityType',
        initiator: typing.Union[MetaOapg.properties.initiator, str, ],
        initiated_date: typing.Union[MetaOapg.properties.initiated_date, str, date, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        state: 'ActionState',
        target_application_id: typing.Union[MetaOapg.properties.target_application_id, str, schemas.Unset] = schemas.unset,
        scopes: typing.Union['ScopesNullable', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Activity':
        return super().__new__(
            cls,
            *_args,
            activity=activity,
            initiator=initiator,
            initiated_date=initiated_date,
            id=id,
            state=state,
            target_application_id=target_application_id,
            scopes=scopes,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.action_state import ActionState
from plaid.model.activity_type import ActivityType
from plaid.model.scopes_nullable import ScopesNullable
