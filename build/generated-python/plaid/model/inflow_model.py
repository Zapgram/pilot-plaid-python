# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class InflowModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The `inflow_model` allows you to model a test account that receives regular income or make regular payments on a loan. Any transactions generated by the `inflow_model` will appear in addition to randomly generated test data or transactions specified by `override_accounts`.
    """


    class MetaOapg:
        required = {
            "statement_day_of_month",
            "transaction_name",
            "payment_day_of_month",
            "type",
            "income_amount",
        }
        
        class properties:
            type = schemas.StrSchema
            income_amount = schemas.Float64Schema
            payment_day_of_month = schemas.NumberSchema
            transaction_name = schemas.StrSchema
            statement_day_of_month = schemas.StrSchema
            __annotations__ = {
                "type": type,
                "income_amount": income_amount,
                "payment_day_of_month": payment_day_of_month,
                "transaction_name": transaction_name,
                "statement_day_of_month": statement_day_of_month,
            }
        additional_properties = schemas.AnyTypeSchema
    
    statement_day_of_month: MetaOapg.properties.statement_day_of_month
    transaction_name: MetaOapg.properties.transaction_name
    payment_day_of_month: MetaOapg.properties.payment_day_of_month
    type: MetaOapg.properties.type
    income_amount: MetaOapg.properties.income_amount
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statement_day_of_month"]) -> MetaOapg.properties.statement_day_of_month: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_name"]) -> MetaOapg.properties.transaction_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_day_of_month"]) -> MetaOapg.properties.payment_day_of_month: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["income_amount"]) -> MetaOapg.properties.income_amount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["statement_day_of_month"], typing_extensions.Literal["transaction_name"], typing_extensions.Literal["payment_day_of_month"], typing_extensions.Literal["type"], typing_extensions.Literal["income_amount"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statement_day_of_month"]) -> MetaOapg.properties.statement_day_of_month: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_name"]) -> MetaOapg.properties.transaction_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_day_of_month"]) -> MetaOapg.properties.payment_day_of_month: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["income_amount"]) -> MetaOapg.properties.income_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["statement_day_of_month"], typing_extensions.Literal["transaction_name"], typing_extensions.Literal["payment_day_of_month"], typing_extensions.Literal["type"], typing_extensions.Literal["income_amount"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        statement_day_of_month: typing.Union[MetaOapg.properties.statement_day_of_month, str, ],
        transaction_name: typing.Union[MetaOapg.properties.transaction_name, str, ],
        payment_day_of_month: typing.Union[MetaOapg.properties.payment_day_of_month, decimal.Decimal, int, float, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        income_amount: typing.Union[MetaOapg.properties.income_amount, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'InflowModel':
        return super().__new__(
            cls,
            *_args,
            statement_day_of_month=statement_day_of_month,
            transaction_name=transaction_name,
            payment_day_of_month=payment_day_of_month,
            type=type,
            income_amount=income_amount,
            _configuration=_configuration,
            **kwargs,
        )
