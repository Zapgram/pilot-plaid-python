# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class CreditBankEmploymentItem(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The details and metadata for an end user's Item.
    """


    class MetaOapg:
        required = {
            "last_updated_time",
            "item_id",
            "bank_employments",
            "bank_employment_accounts",
            "institution_name",
            "institution_id",
        }
        
        class properties:
            item_id = schemas.StrSchema
            last_updated_time = schemas.DateTimeSchema
            institution_id = schemas.StrSchema
            institution_name = schemas.StrSchema
            
            
            class bank_employments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CreditBankEmployment']:
                        return CreditBankEmployment
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CreditBankEmployment'], typing.List['CreditBankEmployment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bank_employments':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CreditBankEmployment':
                    return super().__getitem__(i)
            
            
            class bank_employment_accounts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CreditBankIncomeAccount']:
                        return CreditBankIncomeAccount
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CreditBankIncomeAccount'], typing.List['CreditBankIncomeAccount']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bank_employment_accounts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CreditBankIncomeAccount':
                    return super().__getitem__(i)
            __annotations__ = {
                "item_id": item_id,
                "last_updated_time": last_updated_time,
                "institution_id": institution_id,
                "institution_name": institution_name,
                "bank_employments": bank_employments,
                "bank_employment_accounts": bank_employment_accounts,
            }
    
    last_updated_time: MetaOapg.properties.last_updated_time
    item_id: MetaOapg.properties.item_id
    bank_employments: MetaOapg.properties.bank_employments
    bank_employment_accounts: MetaOapg.properties.bank_employment_accounts
    institution_name: MetaOapg.properties.institution_name
    institution_id: MetaOapg.properties.institution_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_updated_time"]) -> MetaOapg.properties.last_updated_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_id"]) -> MetaOapg.properties.institution_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_name"]) -> MetaOapg.properties.institution_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_employments"]) -> MetaOapg.properties.bank_employments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_employment_accounts"]) -> MetaOapg.properties.bank_employment_accounts: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["item_id", "last_updated_time", "institution_id", "institution_name", "bank_employments", "bank_employment_accounts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_updated_time"]) -> MetaOapg.properties.last_updated_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_id"]) -> MetaOapg.properties.institution_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_name"]) -> MetaOapg.properties.institution_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_employments"]) -> MetaOapg.properties.bank_employments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_employment_accounts"]) -> MetaOapg.properties.bank_employment_accounts: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["item_id", "last_updated_time", "institution_id", "institution_name", "bank_employments", "bank_employment_accounts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        last_updated_time: typing.Union[MetaOapg.properties.last_updated_time, str, datetime, ],
        item_id: typing.Union[MetaOapg.properties.item_id, str, ],
        bank_employments: typing.Union[MetaOapg.properties.bank_employments, list, tuple, ],
        bank_employment_accounts: typing.Union[MetaOapg.properties.bank_employment_accounts, list, tuple, ],
        institution_name: typing.Union[MetaOapg.properties.institution_name, str, ],
        institution_id: typing.Union[MetaOapg.properties.institution_id, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreditBankEmploymentItem':
        return super().__new__(
            cls,
            *_args,
            last_updated_time=last_updated_time,
            item_id=item_id,
            bank_employments=bank_employments,
            bank_employment_accounts=bank_employment_accounts,
            institution_name=institution_name,
            institution_id=institution_id,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.credit_bank_employment import CreditBankEmployment
from plaid.model.credit_bank_income_account import CreditBankIncomeAccount
