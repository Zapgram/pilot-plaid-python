# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class TransferCreditUsageConfiguration(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Specifies the originator's expected usage of credits. For all dollar amounts, use a decimal string with two digits of precision e.g. "10.00". This field is required if the originator is expected to process credit transfers.
    """


    class MetaOapg:
        required = {
            "expected_monthly_amount",
            "expected_frequency",
            "expected_average_amount",
            "sec_codes",
            "expected_highest_amount",
        }
        
        class properties:
        
            @staticmethod
            def expected_frequency() -> typing.Type['OriginatorExpectedTransferFrequency']:
                return OriginatorExpectedTransferFrequency
            expected_highest_amount = schemas.StrSchema
            expected_average_amount = schemas.StrSchema
            expected_monthly_amount = schemas.StrSchema
            
            
            class sec_codes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CreditACHClass']:
                        return CreditACHClass
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CreditACHClass'], typing.List['CreditACHClass']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sec_codes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CreditACHClass':
                    return super().__getitem__(i)
            __annotations__ = {
                "expected_frequency": expected_frequency,
                "expected_highest_amount": expected_highest_amount,
                "expected_average_amount": expected_average_amount,
                "expected_monthly_amount": expected_monthly_amount,
                "sec_codes": sec_codes,
            }

    
    expected_monthly_amount: MetaOapg.properties.expected_monthly_amount
    expected_frequency: 'OriginatorExpectedTransferFrequency'
    expected_average_amount: MetaOapg.properties.expected_average_amount
    sec_codes: MetaOapg.properties.sec_codes
    expected_highest_amount: MetaOapg.properties.expected_highest_amount
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expected_frequency"]) -> 'OriginatorExpectedTransferFrequency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expected_highest_amount"]) -> MetaOapg.properties.expected_highest_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expected_average_amount"]) -> MetaOapg.properties.expected_average_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expected_monthly_amount"]) -> MetaOapg.properties.expected_monthly_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sec_codes"]) -> MetaOapg.properties.sec_codes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["expected_frequency", "expected_highest_amount", "expected_average_amount", "expected_monthly_amount", "sec_codes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expected_frequency"]) -> 'OriginatorExpectedTransferFrequency': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expected_highest_amount"]) -> MetaOapg.properties.expected_highest_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expected_average_amount"]) -> MetaOapg.properties.expected_average_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expected_monthly_amount"]) -> MetaOapg.properties.expected_monthly_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sec_codes"]) -> MetaOapg.properties.sec_codes: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["expected_frequency", "expected_highest_amount", "expected_average_amount", "expected_monthly_amount", "sec_codes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransferCreditUsageConfiguration':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.credit_ach_class import CreditACHClass
from plaid.model.originator_expected_transfer_frequency import OriginatorExpectedTransferFrequency
