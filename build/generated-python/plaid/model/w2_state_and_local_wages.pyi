# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class W2StateAndLocalWages(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    W2 state and local wages
    """


    class MetaOapg:
        
        class properties:
            
            
            class state(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class employer_state_id_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employer_state_id_number':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class state_wages_tips(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state_wages_tips':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class state_income_tax(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state_income_tax':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class local_wages_tips(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'local_wages_tips':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class local_income_tax(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'local_income_tax':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class locality_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'locality_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "state": state,
                "employer_state_id_number": employer_state_id_number,
                "state_wages_tips": state_wages_tips,
                "state_income_tax": state_income_tax,
                "local_wages_tips": local_wages_tips,
                "local_income_tax": local_income_tax,
                "locality_name": locality_name,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employer_state_id_number"]) -> MetaOapg.properties.employer_state_id_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_wages_tips"]) -> MetaOapg.properties.state_wages_tips: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_income_tax"]) -> MetaOapg.properties.state_income_tax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["local_wages_tips"]) -> MetaOapg.properties.local_wages_tips: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["local_income_tax"]) -> MetaOapg.properties.local_income_tax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locality_name"]) -> MetaOapg.properties.locality_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["state"], typing_extensions.Literal["employer_state_id_number"], typing_extensions.Literal["state_wages_tips"], typing_extensions.Literal["state_income_tax"], typing_extensions.Literal["local_wages_tips"], typing_extensions.Literal["local_income_tax"], typing_extensions.Literal["locality_name"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employer_state_id_number"]) -> typing.Union[MetaOapg.properties.employer_state_id_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_wages_tips"]) -> typing.Union[MetaOapg.properties.state_wages_tips, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_income_tax"]) -> typing.Union[MetaOapg.properties.state_income_tax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["local_wages_tips"]) -> typing.Union[MetaOapg.properties.local_wages_tips, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["local_income_tax"]) -> typing.Union[MetaOapg.properties.local_income_tax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locality_name"]) -> typing.Union[MetaOapg.properties.locality_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["state"], typing_extensions.Literal["employer_state_id_number"], typing_extensions.Literal["state_wages_tips"], typing_extensions.Literal["state_income_tax"], typing_extensions.Literal["local_wages_tips"], typing_extensions.Literal["local_income_tax"], typing_extensions.Literal["locality_name"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        state: typing.Union[MetaOapg.properties.state, None, str, schemas.Unset] = schemas.unset,
        employer_state_id_number: typing.Union[MetaOapg.properties.employer_state_id_number, None, str, schemas.Unset] = schemas.unset,
        state_wages_tips: typing.Union[MetaOapg.properties.state_wages_tips, None, str, schemas.Unset] = schemas.unset,
        state_income_tax: typing.Union[MetaOapg.properties.state_income_tax, None, str, schemas.Unset] = schemas.unset,
        local_wages_tips: typing.Union[MetaOapg.properties.local_wages_tips, None, str, schemas.Unset] = schemas.unset,
        local_income_tax: typing.Union[MetaOapg.properties.local_income_tax, None, str, schemas.Unset] = schemas.unset,
        locality_name: typing.Union[MetaOapg.properties.locality_name, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'W2StateAndLocalWages':
        return super().__new__(
            cls,
            *_args,
            state=state,
            employer_state_id_number=employer_state_id_number,
            state_wages_tips=state_wages_tips,
            state_income_tax=state_income_tax,
            local_wages_tips=local_wages_tips,
            local_income_tax=local_income_tax,
            locality_name=locality_name,
            _configuration=_configuration,
            **kwargs,
        )
