# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class LinkTokenCreateRequestEmployment(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Specifies options for initializing Link for use with the Employment product. This field is required if `employment` is included in the `products` array.
    """


    class MetaOapg:
        
        class properties:
            
            
            class employment_source_types(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EmploymentSourceType']:
                        return EmploymentSourceType
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['EmploymentSourceType'], typing.List['EmploymentSourceType']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employment_source_types':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EmploymentSourceType':
                    return super().__getitem__(i)
        
            @staticmethod
            def bank_employment() -> typing.Type['LinkTokenCreateRequestEmploymentBankIncome']:
                return LinkTokenCreateRequestEmploymentBankIncome
            __annotations__ = {
                "employment_source_types": employment_source_types,
                "bank_employment": bank_employment,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employment_source_types"]) -> MetaOapg.properties.employment_source_types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_employment"]) -> 'LinkTokenCreateRequestEmploymentBankIncome': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employment_source_types", "bank_employment", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employment_source_types"]) -> typing.Union[MetaOapg.properties.employment_source_types, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_employment"]) -> typing.Union['LinkTokenCreateRequestEmploymentBankIncome', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employment_source_types", "bank_employment", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        employment_source_types: typing.Union[MetaOapg.properties.employment_source_types, list, tuple, schemas.Unset] = schemas.unset,
        bank_employment: typing.Union['LinkTokenCreateRequestEmploymentBankIncome', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LinkTokenCreateRequestEmployment':
        return super().__new__(
            cls,
            *_args,
            employment_source_types=employment_source_types,
            bank_employment=bank_employment,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.employment_source_type import EmploymentSourceType
from plaid.model.link_token_create_request_employment_bank_income import LinkTokenCreateRequestEmploymentBankIncome
