# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class BankTransferUser(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The legal name and other information for the account holder.
    """


    class MetaOapg:
        required = {
            "legal_name",
        }
        
        class properties:
            legal_name = schemas.StrSchema
            
            
            class email_address(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'email_address':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            routing_number = schemas.StrSchema
            __annotations__ = {
                "legal_name": legal_name,
                "email_address": email_address,
                "routing_number": routing_number,
            }
        additional_properties = schemas.AnyTypeSchema
    
    legal_name: MetaOapg.properties.legal_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legal_name"]) -> MetaOapg.properties.legal_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email_address"]) -> MetaOapg.properties.email_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routing_number"]) -> MetaOapg.properties.routing_number: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["legal_name"], typing_extensions.Literal["email_address"], typing_extensions.Literal["routing_number"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legal_name"]) -> MetaOapg.properties.legal_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email_address"]) -> typing.Union[MetaOapg.properties.email_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routing_number"]) -> typing.Union[MetaOapg.properties.routing_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["legal_name"], typing_extensions.Literal["email_address"], typing_extensions.Literal["routing_number"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        legal_name: typing.Union[MetaOapg.properties.legal_name, str, ],
        email_address: typing.Union[MetaOapg.properties.email_address, None, str, schemas.Unset] = schemas.unset,
        routing_number: typing.Union[MetaOapg.properties.routing_number, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'BankTransferUser':
        return super().__new__(
            cls,
            *_args,
            legal_name=legal_name,
            email_address=email_address,
            routing_number=routing_number,
            _configuration=_configuration,
            **kwargs,
        )
