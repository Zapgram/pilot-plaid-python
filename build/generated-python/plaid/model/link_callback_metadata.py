# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class LinkCallbackMetadata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Information related to the callback from the hosted Link session.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def callback_type() -> typing.Type['LinkDeliveryWebhookCallbackType']:
                return LinkDeliveryWebhookCallbackType
        
            @staticmethod
            def event_name() -> typing.Type['LinkEventName']:
                return LinkEventName
            status = schemas.StrSchema
            link_session_id = schemas.StrSchema
            request_id = schemas.StrSchema
        
            @staticmethod
            def institution() -> typing.Type['LinkDeliveryInstitution']:
                return LinkDeliveryInstitution
            
            
            class accounts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LinkDeliveryAccount']:
                        return LinkDeliveryAccount
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['LinkDeliveryAccount'], typing.List['LinkDeliveryAccount']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accounts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LinkDeliveryAccount':
                    return super().__getitem__(i)
            __annotations__ = {
                "callback_type": callback_type,
                "event_name": event_name,
                "status": status,
                "link_session_id": link_session_id,
                "request_id": request_id,
                "institution": institution,
                "accounts": accounts,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callback_type"]) -> 'LinkDeliveryWebhookCallbackType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_name"]) -> 'LinkEventName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link_session_id"]) -> MetaOapg.properties.link_session_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution"]) -> 'LinkDeliveryInstitution': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accounts"]) -> MetaOapg.properties.accounts: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["callback_type"], typing_extensions.Literal["event_name"], typing_extensions.Literal["status"], typing_extensions.Literal["link_session_id"], typing_extensions.Literal["request_id"], typing_extensions.Literal["institution"], typing_extensions.Literal["accounts"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callback_type"]) -> typing.Union['LinkDeliveryWebhookCallbackType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_name"]) -> typing.Union['LinkEventName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link_session_id"]) -> typing.Union[MetaOapg.properties.link_session_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> typing.Union[MetaOapg.properties.request_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution"]) -> typing.Union['LinkDeliveryInstitution', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accounts"]) -> typing.Union[MetaOapg.properties.accounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["callback_type"], typing_extensions.Literal["event_name"], typing_extensions.Literal["status"], typing_extensions.Literal["link_session_id"], typing_extensions.Literal["request_id"], typing_extensions.Literal["institution"], typing_extensions.Literal["accounts"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        callback_type: typing.Union['LinkDeliveryWebhookCallbackType', schemas.Unset] = schemas.unset,
        event_name: typing.Union['LinkEventName', schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        link_session_id: typing.Union[MetaOapg.properties.link_session_id, str, schemas.Unset] = schemas.unset,
        request_id: typing.Union[MetaOapg.properties.request_id, str, schemas.Unset] = schemas.unset,
        institution: typing.Union['LinkDeliveryInstitution', schemas.Unset] = schemas.unset,
        accounts: typing.Union[MetaOapg.properties.accounts, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'LinkCallbackMetadata':
        return super().__new__(
            cls,
            *_args,
            callback_type=callback_type,
            event_name=event_name,
            status=status,
            link_session_id=link_session_id,
            request_id=request_id,
            institution=institution,
            accounts=accounts,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.link_delivery_account import LinkDeliveryAccount
from plaid.model.link_delivery_institution import LinkDeliveryInstitution
from plaid.model.link_delivery_webhook_callback_type import LinkDeliveryWebhookCallbackType
from plaid.model.link_event_name import LinkEventName
