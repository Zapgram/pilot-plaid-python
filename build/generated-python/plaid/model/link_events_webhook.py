# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class LinkEventsWebhook(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Contains a summary of the events from a link session
    """


    class MetaOapg:
        required = {
            "webhook_type",
            "link_session_id",
            "link_token",
            "webhook_code",
            "events",
        }
        
        class properties:
            webhook_type = schemas.StrSchema
            webhook_code = schemas.StrSchema
            
            
            class events(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LinkEvent']:
                        return LinkEvent
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['LinkEvent'], typing.List['LinkEvent']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'events':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LinkEvent':
                    return super().__getitem__(i)
            link_session_id = schemas.StrSchema
            link_token = schemas.StrSchema
            __annotations__ = {
                "webhook_type": webhook_type,
                "webhook_code": webhook_code,
                "events": events,
                "link_session_id": link_session_id,
                "link_token": link_token,
            }
        additional_properties = schemas.AnyTypeSchema
    
    webhook_type: MetaOapg.properties.webhook_type
    link_session_id: MetaOapg.properties.link_session_id
    link_token: MetaOapg.properties.link_token
    webhook_code: MetaOapg.properties.webhook_code
    events: MetaOapg.properties.events
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhook_type"]) -> MetaOapg.properties.webhook_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link_session_id"]) -> MetaOapg.properties.link_session_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link_token"]) -> MetaOapg.properties.link_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhook_code"]) -> MetaOapg.properties.webhook_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["events"]) -> MetaOapg.properties.events: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["webhook_type"], typing_extensions.Literal["link_session_id"], typing_extensions.Literal["link_token"], typing_extensions.Literal["webhook_code"], typing_extensions.Literal["events"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhook_type"]) -> MetaOapg.properties.webhook_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link_session_id"]) -> MetaOapg.properties.link_session_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link_token"]) -> MetaOapg.properties.link_token: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhook_code"]) -> MetaOapg.properties.webhook_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["events"]) -> MetaOapg.properties.events: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["webhook_type"], typing_extensions.Literal["link_session_id"], typing_extensions.Literal["link_token"], typing_extensions.Literal["webhook_code"], typing_extensions.Literal["events"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        webhook_type: typing.Union[MetaOapg.properties.webhook_type, str, ],
        link_session_id: typing.Union[MetaOapg.properties.link_session_id, str, ],
        link_token: typing.Union[MetaOapg.properties.link_token, str, ],
        webhook_code: typing.Union[MetaOapg.properties.webhook_code, str, ],
        events: typing.Union[MetaOapg.properties.events, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'LinkEventsWebhook':
        return super().__new__(
            cls,
            *_args,
            webhook_type=webhook_type,
            link_session_id=link_session_id,
            link_token=link_token,
            webhook_code=webhook_code,
            events=events,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.link_event import LinkEvent
