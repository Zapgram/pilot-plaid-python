# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class StudentLoan(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Contains details about a student loan account
    """


    class MetaOapg:
        required = {
            "origination_principal_amount",
            "account_number",
            "loan_status",
            "repayment_plan",
            "payment_reference_number",
            "last_payment_date",
            "guarantor",
            "is_overdue",
            "last_statement_issue_date",
            "last_payment_amount",
            "expected_payoff_date",
            "sequence_number",
            "account_id",
            "pslf_status",
            "interest_rate_percentage",
            "disbursement_dates",
            "origination_date",
            "outstanding_interest_amount",
            "servicer_address",
            "ytd_interest_paid",
            "ytd_principal_paid",
            "loan_name",
            "minimum_payment_amount",
            "next_payment_due_date",
        }
        
        class properties:
            
            
            class account_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'account_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class account_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'account_number':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class disbursement_dates(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.DateSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'disbursement_dates':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class expected_payoff_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'expected_payoff_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class guarantor(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'guarantor':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            interest_rate_percentage = schemas.Float64Schema
            
            
            class is_overdue(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_overdue':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class last_payment_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_payment_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class last_payment_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_payment_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class last_statement_issue_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_statement_issue_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class loan_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'loan_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def loan_status() -> typing.Type['StudentLoanStatus']:
                return StudentLoanStatus
            
            
            class minimum_payment_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'minimum_payment_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class next_payment_due_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'next_payment_due_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class origination_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'origination_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class origination_principal_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'origination_principal_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class outstanding_interest_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'outstanding_interest_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class payment_reference_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payment_reference_number':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def pslf_status() -> typing.Type['PSLFStatus']:
                return PSLFStatus
        
            @staticmethod
            def repayment_plan() -> typing.Type['StudentRepaymentPlan']:
                return StudentRepaymentPlan
            
            
            class sequence_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sequence_number':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def servicer_address() -> typing.Type['ServicerAddressData']:
                return ServicerAddressData
            
            
            class ytd_interest_paid(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ytd_interest_paid':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ytd_principal_paid(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ytd_principal_paid':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "account_id": account_id,
                "account_number": account_number,
                "disbursement_dates": disbursement_dates,
                "expected_payoff_date": expected_payoff_date,
                "guarantor": guarantor,
                "interest_rate_percentage": interest_rate_percentage,
                "is_overdue": is_overdue,
                "last_payment_amount": last_payment_amount,
                "last_payment_date": last_payment_date,
                "last_statement_issue_date": last_statement_issue_date,
                "loan_name": loan_name,
                "loan_status": loan_status,
                "minimum_payment_amount": minimum_payment_amount,
                "next_payment_due_date": next_payment_due_date,
                "origination_date": origination_date,
                "origination_principal_amount": origination_principal_amount,
                "outstanding_interest_amount": outstanding_interest_amount,
                "payment_reference_number": payment_reference_number,
                "pslf_status": pslf_status,
                "repayment_plan": repayment_plan,
                "sequence_number": sequence_number,
                "servicer_address": servicer_address,
                "ytd_interest_paid": ytd_interest_paid,
                "ytd_principal_paid": ytd_principal_paid,
            }
        additional_properties = schemas.AnyTypeSchema
    
    origination_principal_amount: MetaOapg.properties.origination_principal_amount
    account_number: MetaOapg.properties.account_number
    loan_status: 'StudentLoanStatus'
    repayment_plan: 'StudentRepaymentPlan'
    payment_reference_number: MetaOapg.properties.payment_reference_number
    last_payment_date: MetaOapg.properties.last_payment_date
    guarantor: MetaOapg.properties.guarantor
    is_overdue: MetaOapg.properties.is_overdue
    last_statement_issue_date: MetaOapg.properties.last_statement_issue_date
    last_payment_amount: MetaOapg.properties.last_payment_amount
    expected_payoff_date: MetaOapg.properties.expected_payoff_date
    sequence_number: MetaOapg.properties.sequence_number
    account_id: MetaOapg.properties.account_id
    pslf_status: 'PSLFStatus'
    interest_rate_percentage: MetaOapg.properties.interest_rate_percentage
    disbursement_dates: MetaOapg.properties.disbursement_dates
    origination_date: MetaOapg.properties.origination_date
    outstanding_interest_amount: MetaOapg.properties.outstanding_interest_amount
    servicer_address: 'ServicerAddressData'
    ytd_interest_paid: MetaOapg.properties.ytd_interest_paid
    ytd_principal_paid: MetaOapg.properties.ytd_principal_paid
    loan_name: MetaOapg.properties.loan_name
    minimum_payment_amount: MetaOapg.properties.minimum_payment_amount
    next_payment_due_date: MetaOapg.properties.next_payment_due_date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origination_principal_amount"]) -> MetaOapg.properties.origination_principal_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_number"]) -> MetaOapg.properties.account_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loan_status"]) -> 'StudentLoanStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repayment_plan"]) -> 'StudentRepaymentPlan': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_reference_number"]) -> MetaOapg.properties.payment_reference_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_payment_date"]) -> MetaOapg.properties.last_payment_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guarantor"]) -> MetaOapg.properties.guarantor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_overdue"]) -> MetaOapg.properties.is_overdue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_statement_issue_date"]) -> MetaOapg.properties.last_statement_issue_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_payment_amount"]) -> MetaOapg.properties.last_payment_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expected_payoff_date"]) -> MetaOapg.properties.expected_payoff_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sequence_number"]) -> MetaOapg.properties.sequence_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pslf_status"]) -> 'PSLFStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interest_rate_percentage"]) -> MetaOapg.properties.interest_rate_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disbursement_dates"]) -> MetaOapg.properties.disbursement_dates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origination_date"]) -> MetaOapg.properties.origination_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outstanding_interest_amount"]) -> MetaOapg.properties.outstanding_interest_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["servicer_address"]) -> 'ServicerAddressData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ytd_interest_paid"]) -> MetaOapg.properties.ytd_interest_paid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ytd_principal_paid"]) -> MetaOapg.properties.ytd_principal_paid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loan_name"]) -> MetaOapg.properties.loan_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimum_payment_amount"]) -> MetaOapg.properties.minimum_payment_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next_payment_due_date"]) -> MetaOapg.properties.next_payment_due_date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["origination_principal_amount"], typing_extensions.Literal["account_number"], typing_extensions.Literal["loan_status"], typing_extensions.Literal["repayment_plan"], typing_extensions.Literal["payment_reference_number"], typing_extensions.Literal["last_payment_date"], typing_extensions.Literal["guarantor"], typing_extensions.Literal["is_overdue"], typing_extensions.Literal["last_statement_issue_date"], typing_extensions.Literal["last_payment_amount"], typing_extensions.Literal["expected_payoff_date"], typing_extensions.Literal["sequence_number"], typing_extensions.Literal["account_id"], typing_extensions.Literal["pslf_status"], typing_extensions.Literal["interest_rate_percentage"], typing_extensions.Literal["disbursement_dates"], typing_extensions.Literal["origination_date"], typing_extensions.Literal["outstanding_interest_amount"], typing_extensions.Literal["servicer_address"], typing_extensions.Literal["ytd_interest_paid"], typing_extensions.Literal["ytd_principal_paid"], typing_extensions.Literal["loan_name"], typing_extensions.Literal["minimum_payment_amount"], typing_extensions.Literal["next_payment_due_date"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origination_principal_amount"]) -> MetaOapg.properties.origination_principal_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_number"]) -> MetaOapg.properties.account_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loan_status"]) -> 'StudentLoanStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repayment_plan"]) -> 'StudentRepaymentPlan': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_reference_number"]) -> MetaOapg.properties.payment_reference_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_payment_date"]) -> MetaOapg.properties.last_payment_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guarantor"]) -> MetaOapg.properties.guarantor: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_overdue"]) -> MetaOapg.properties.is_overdue: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_statement_issue_date"]) -> MetaOapg.properties.last_statement_issue_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_payment_amount"]) -> MetaOapg.properties.last_payment_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expected_payoff_date"]) -> MetaOapg.properties.expected_payoff_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sequence_number"]) -> MetaOapg.properties.sequence_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pslf_status"]) -> 'PSLFStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interest_rate_percentage"]) -> MetaOapg.properties.interest_rate_percentage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disbursement_dates"]) -> MetaOapg.properties.disbursement_dates: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origination_date"]) -> MetaOapg.properties.origination_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outstanding_interest_amount"]) -> MetaOapg.properties.outstanding_interest_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["servicer_address"]) -> 'ServicerAddressData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ytd_interest_paid"]) -> MetaOapg.properties.ytd_interest_paid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ytd_principal_paid"]) -> MetaOapg.properties.ytd_principal_paid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loan_name"]) -> MetaOapg.properties.loan_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimum_payment_amount"]) -> MetaOapg.properties.minimum_payment_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next_payment_due_date"]) -> MetaOapg.properties.next_payment_due_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["origination_principal_amount"], typing_extensions.Literal["account_number"], typing_extensions.Literal["loan_status"], typing_extensions.Literal["repayment_plan"], typing_extensions.Literal["payment_reference_number"], typing_extensions.Literal["last_payment_date"], typing_extensions.Literal["guarantor"], typing_extensions.Literal["is_overdue"], typing_extensions.Literal["last_statement_issue_date"], typing_extensions.Literal["last_payment_amount"], typing_extensions.Literal["expected_payoff_date"], typing_extensions.Literal["sequence_number"], typing_extensions.Literal["account_id"], typing_extensions.Literal["pslf_status"], typing_extensions.Literal["interest_rate_percentage"], typing_extensions.Literal["disbursement_dates"], typing_extensions.Literal["origination_date"], typing_extensions.Literal["outstanding_interest_amount"], typing_extensions.Literal["servicer_address"], typing_extensions.Literal["ytd_interest_paid"], typing_extensions.Literal["ytd_principal_paid"], typing_extensions.Literal["loan_name"], typing_extensions.Literal["minimum_payment_amount"], typing_extensions.Literal["next_payment_due_date"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        origination_principal_amount: typing.Union[MetaOapg.properties.origination_principal_amount, None, decimal.Decimal, int, float, ],
        account_number: typing.Union[MetaOapg.properties.account_number, None, str, ],
        loan_status: 'StudentLoanStatus',
        repayment_plan: 'StudentRepaymentPlan',
        payment_reference_number: typing.Union[MetaOapg.properties.payment_reference_number, None, str, ],
        last_payment_date: typing.Union[MetaOapg.properties.last_payment_date, None, str, date, ],
        guarantor: typing.Union[MetaOapg.properties.guarantor, None, str, ],
        is_overdue: typing.Union[MetaOapg.properties.is_overdue, None, bool, ],
        last_statement_issue_date: typing.Union[MetaOapg.properties.last_statement_issue_date, None, str, date, ],
        last_payment_amount: typing.Union[MetaOapg.properties.last_payment_amount, None, decimal.Decimal, int, float, ],
        expected_payoff_date: typing.Union[MetaOapg.properties.expected_payoff_date, None, str, date, ],
        sequence_number: typing.Union[MetaOapg.properties.sequence_number, None, str, ],
        account_id: typing.Union[MetaOapg.properties.account_id, None, str, ],
        pslf_status: 'PSLFStatus',
        interest_rate_percentage: typing.Union[MetaOapg.properties.interest_rate_percentage, decimal.Decimal, int, float, ],
        disbursement_dates: typing.Union[MetaOapg.properties.disbursement_dates, list, tuple, None, ],
        origination_date: typing.Union[MetaOapg.properties.origination_date, None, str, date, ],
        outstanding_interest_amount: typing.Union[MetaOapg.properties.outstanding_interest_amount, None, decimal.Decimal, int, float, ],
        servicer_address: 'ServicerAddressData',
        ytd_interest_paid: typing.Union[MetaOapg.properties.ytd_interest_paid, None, decimal.Decimal, int, float, ],
        ytd_principal_paid: typing.Union[MetaOapg.properties.ytd_principal_paid, None, decimal.Decimal, int, float, ],
        loan_name: typing.Union[MetaOapg.properties.loan_name, None, str, ],
        minimum_payment_amount: typing.Union[MetaOapg.properties.minimum_payment_amount, None, decimal.Decimal, int, float, ],
        next_payment_due_date: typing.Union[MetaOapg.properties.next_payment_due_date, None, str, date, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'StudentLoan':
        return super().__new__(
            cls,
            *_args,
            origination_principal_amount=origination_principal_amount,
            account_number=account_number,
            loan_status=loan_status,
            repayment_plan=repayment_plan,
            payment_reference_number=payment_reference_number,
            last_payment_date=last_payment_date,
            guarantor=guarantor,
            is_overdue=is_overdue,
            last_statement_issue_date=last_statement_issue_date,
            last_payment_amount=last_payment_amount,
            expected_payoff_date=expected_payoff_date,
            sequence_number=sequence_number,
            account_id=account_id,
            pslf_status=pslf_status,
            interest_rate_percentage=interest_rate_percentage,
            disbursement_dates=disbursement_dates,
            origination_date=origination_date,
            outstanding_interest_amount=outstanding_interest_amount,
            servicer_address=servicer_address,
            ytd_interest_paid=ytd_interest_paid,
            ytd_principal_paid=ytd_principal_paid,
            loan_name=loan_name,
            minimum_payment_amount=minimum_payment_amount,
            next_payment_due_date=next_payment_due_date,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.pslf_status import PSLFStatus
from plaid.model.servicer_address_data import ServicerAddressData
from plaid.model.student_loan_status import StudentLoanStatus
from plaid.model.student_repayment_plan import StudentRepaymentPlan
