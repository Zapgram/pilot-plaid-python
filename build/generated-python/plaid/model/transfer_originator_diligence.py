# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class TransferOriginatorDiligence(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The diligence information for the originator.
    """


    class MetaOapg:
        required = {
            "naics_code",
            "dba",
            "website",
            "address",
            "tax_id",
        }
        
        class properties:
            dba = schemas.StrSchema
            
            
            class tax_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
        
            @staticmethod
            def address() -> typing.Type['TransferOriginatorAddress']:
                return TransferOriginatorAddress
            website = schemas.StrSchema
            
            
            class naics_code(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 6
                    min_length = 6
        
            @staticmethod
            def credit_usage_configuration() -> typing.Type['TransferCreditUsageConfiguration']:
                return TransferCreditUsageConfiguration
        
            @staticmethod
            def debit_usage_configuration() -> typing.Type['TransferDebitUsageConfiguration']:
                return TransferDebitUsageConfiguration
            __annotations__ = {
                "dba": dba,
                "tax_id": tax_id,
                "address": address,
                "website": website,
                "naics_code": naics_code,
                "credit_usage_configuration": credit_usage_configuration,
                "debit_usage_configuration": debit_usage_configuration,
            }
    
    naics_code: MetaOapg.properties.naics_code
    dba: MetaOapg.properties.dba
    website: MetaOapg.properties.website
    address: 'TransferOriginatorAddress'
    tax_id: MetaOapg.properties.tax_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dba"]) -> MetaOapg.properties.dba: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_id"]) -> MetaOapg.properties.tax_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'TransferOriginatorAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["website"]) -> MetaOapg.properties.website: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["naics_code"]) -> MetaOapg.properties.naics_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credit_usage_configuration"]) -> 'TransferCreditUsageConfiguration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["debit_usage_configuration"]) -> 'TransferDebitUsageConfiguration': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dba", "tax_id", "address", "website", "naics_code", "credit_usage_configuration", "debit_usage_configuration", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dba"]) -> MetaOapg.properties.dba: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_id"]) -> MetaOapg.properties.tax_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> 'TransferOriginatorAddress': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["website"]) -> MetaOapg.properties.website: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["naics_code"]) -> MetaOapg.properties.naics_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credit_usage_configuration"]) -> typing.Union['TransferCreditUsageConfiguration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["debit_usage_configuration"]) -> typing.Union['TransferDebitUsageConfiguration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dba", "tax_id", "address", "website", "naics_code", "credit_usage_configuration", "debit_usage_configuration", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        naics_code: typing.Union[MetaOapg.properties.naics_code, str, ],
        dba: typing.Union[MetaOapg.properties.dba, str, ],
        website: typing.Union[MetaOapg.properties.website, str, ],
        address: 'TransferOriginatorAddress',
        tax_id: typing.Union[MetaOapg.properties.tax_id, str, ],
        credit_usage_configuration: typing.Union['TransferCreditUsageConfiguration', schemas.Unset] = schemas.unset,
        debit_usage_configuration: typing.Union['TransferDebitUsageConfiguration', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransferOriginatorDiligence':
        return super().__new__(
            cls,
            *_args,
            naics_code=naics_code,
            dba=dba,
            website=website,
            address=address,
            tax_id=tax_id,
            credit_usage_configuration=credit_usage_configuration,
            debit_usage_configuration=debit_usage_configuration,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.transfer_credit_usage_configuration import TransferCreditUsageConfiguration
from plaid.model.transfer_debit_usage_configuration import TransferDebitUsageConfiguration
from plaid.model.transfer_originator_address import TransferOriginatorAddress
