# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class ConnectedApplication(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Describes the connected application for a particular end user.
    """


    class MetaOapg:
        required = {
            "name",
            "created_at",
            "application_id",
        }
        
        class properties:
            application_id = schemas.StrSchema
            name = schemas.StrSchema
            created_at = schemas.DateSchema
            
            
            class display_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'display_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class logo_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'logo_url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class application_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'application_url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class reason_for_access(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reason_for_access':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def scopes() -> typing.Type['ScopesNullable']:
                return ScopesNullable
            __annotations__ = {
                "application_id": application_id,
                "name": name,
                "created_at": created_at,
                "display_name": display_name,
                "logo_url": logo_url,
                "application_url": application_url,
                "reason_for_access": reason_for_access,
                "scopes": scopes,
            }
    
    name: MetaOapg.properties.name
    created_at: MetaOapg.properties.created_at
    application_id: MetaOapg.properties.application_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["application_id"]) -> MetaOapg.properties.application_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo_url"]) -> MetaOapg.properties.logo_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["application_url"]) -> MetaOapg.properties.application_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason_for_access"]) -> MetaOapg.properties.reason_for_access: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> 'ScopesNullable': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["application_id", "name", "created_at", "display_name", "logo_url", "application_url", "reason_for_access", "scopes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["application_id"]) -> MetaOapg.properties.application_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> typing.Union[MetaOapg.properties.display_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logo_url"]) -> typing.Union[MetaOapg.properties.logo_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["application_url"]) -> typing.Union[MetaOapg.properties.application_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason_for_access"]) -> typing.Union[MetaOapg.properties.reason_for_access, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> typing.Union['ScopesNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["application_id", "name", "created_at", "display_name", "logo_url", "application_url", "reason_for_access", "scopes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, date, ],
        application_id: typing.Union[MetaOapg.properties.application_id, str, ],
        display_name: typing.Union[MetaOapg.properties.display_name, None, str, schemas.Unset] = schemas.unset,
        logo_url: typing.Union[MetaOapg.properties.logo_url, None, str, schemas.Unset] = schemas.unset,
        application_url: typing.Union[MetaOapg.properties.application_url, None, str, schemas.Unset] = schemas.unset,
        reason_for_access: typing.Union[MetaOapg.properties.reason_for_access, None, str, schemas.Unset] = schemas.unset,
        scopes: typing.Union['ScopesNullable', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConnectedApplication':
        return super().__new__(
            cls,
            *_args,
            name=name,
            created_at=created_at,
            application_id=application_id,
            display_name=display_name,
            logo_url=logo_url,
            application_url=application_url,
            reason_for_access=reason_for_access,
            scopes=scopes,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.scopes_nullable import ScopesNullable
