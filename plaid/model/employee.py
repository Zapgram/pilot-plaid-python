# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class Employee(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Data about the employee.
    """


    class MetaOapg:
        required = {
            "address",
            "name",
        }
        
        class properties:
        
            @staticmethod
            def address() -> typing.Type['PaystubAddress']:
                return PaystubAddress
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class marital_status(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'marital_status':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def taxpayer_id() -> typing.Type['TaxpayerID']:
                return TaxpayerID
            __annotations__ = {
                "address": address,
                "name": name,
                "marital_status": marital_status,
                "taxpayer_id": taxpayer_id,
            }
        additional_properties = schemas.AnyTypeSchema
    
    address: 'PaystubAddress'
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'PaystubAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["marital_status"]) -> MetaOapg.properties.marital_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxpayer_id"]) -> 'TaxpayerID': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["address"], typing_extensions.Literal["name"], typing_extensions.Literal["marital_status"], typing_extensions.Literal["taxpayer_id"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> 'PaystubAddress': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["marital_status"]) -> typing.Union[MetaOapg.properties.marital_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxpayer_id"]) -> typing.Union['TaxpayerID', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["address"], typing_extensions.Literal["name"], typing_extensions.Literal["marital_status"], typing_extensions.Literal["taxpayer_id"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        address: 'PaystubAddress',
        name: typing.Union[MetaOapg.properties.name, None, str, ],
        marital_status: typing.Union[MetaOapg.properties.marital_status, None, str, schemas.Unset] = schemas.unset,
        taxpayer_id: typing.Union['TaxpayerID', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'Employee':
        return super().__new__(
            cls,
            *_args,
            address=address,
            name=name,
            marital_status=marital_status,
            taxpayer_id=taxpayer_id,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.paystub_address import PaystubAddress
from plaid.model.taxpayer_id import TaxpayerID
