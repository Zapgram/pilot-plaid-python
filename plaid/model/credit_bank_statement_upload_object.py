# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class CreditBankStatementUploadObject(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An object containing data that has been parsed from a user-uploaded bank statement.
    """


    class MetaOapg:
        required = {
            "bank_accounts",
            "document_id",
            "document_metadata",
            "transactions",
        }
        
        class properties:
            
            
            class transactions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CreditBankStatementUploadTransaction']:
                        return CreditBankStatementUploadTransaction
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CreditBankStatementUploadTransaction'], typing.List['CreditBankStatementUploadTransaction']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transactions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CreditBankStatementUploadTransaction':
                    return super().__getitem__(i)
        
            @staticmethod
            def document_metadata() -> typing.Type['CreditDocumentMetadata']:
                return CreditDocumentMetadata
            
            
            class document_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'document_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class bank_accounts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CreditBankStatementUploadBankAccount']:
                        return CreditBankStatementUploadBankAccount
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CreditBankStatementUploadBankAccount'], typing.List['CreditBankStatementUploadBankAccount']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bank_accounts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CreditBankStatementUploadBankAccount':
                    return super().__getitem__(i)
            __annotations__ = {
                "transactions": transactions,
                "document_metadata": document_metadata,
                "document_id": document_id,
                "bank_accounts": bank_accounts,
            }
        additional_properties = schemas.AnyTypeSchema
    
    bank_accounts: MetaOapg.properties.bank_accounts
    document_id: MetaOapg.properties.document_id
    document_metadata: 'CreditDocumentMetadata'
    transactions: MetaOapg.properties.transactions
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_accounts"]) -> MetaOapg.properties.bank_accounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document_id"]) -> MetaOapg.properties.document_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document_metadata"]) -> 'CreditDocumentMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["bank_accounts"], typing_extensions.Literal["document_id"], typing_extensions.Literal["document_metadata"], typing_extensions.Literal["transactions"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_accounts"]) -> MetaOapg.properties.bank_accounts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document_id"]) -> MetaOapg.properties.document_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document_metadata"]) -> 'CreditDocumentMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["bank_accounts"], typing_extensions.Literal["document_id"], typing_extensions.Literal["document_metadata"], typing_extensions.Literal["transactions"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        bank_accounts: typing.Union[MetaOapg.properties.bank_accounts, list, tuple, ],
        document_id: typing.Union[MetaOapg.properties.document_id, None, str, ],
        document_metadata: 'CreditDocumentMetadata',
        transactions: typing.Union[MetaOapg.properties.transactions, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'CreditBankStatementUploadObject':
        return super().__new__(
            cls,
            *_args,
            bank_accounts=bank_accounts,
            document_id=document_id,
            document_metadata=document_metadata,
            transactions=transactions,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.credit_bank_statement_upload_bank_account import CreditBankStatementUploadBankAccount
from plaid.model.credit_bank_statement_upload_transaction import CreditBankStatementUploadTransaction
from plaid.model.credit_document_metadata import CreditDocumentMetadata
