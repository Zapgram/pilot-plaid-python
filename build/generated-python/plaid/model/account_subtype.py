# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class AccountSubtype(
    schemas.EnumBase,
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    See the [Account type schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full listing of account types and corresponding subtypes.
    """


    class MetaOapg:
        enum_value_to_name = {
            "401a": "DIGIT_FOUR_01A",
            "401k": "DIGIT_FOUR_01K",
            "403B": "DIGIT_FOUR_03B",
            "457b": "DIGIT_FOUR_57B",
            "529": "POSITIVE_529",
            "brokerage": "BROKERAGE",
            "cash isa": "CASH_ISA",
            "crypto exchange": "CRYPTO_EXCHANGE",
            "education savings account": "EDUCATION_SAVINGS_ACCOUNT",
            "ebt": "EBT",
            "fixed annuity": "FIXED_ANNUITY",
            "gic": "GIC",
            "health reimbursement arrangement": "HEALTH_REIMBURSEMENT_ARRANGEMENT",
            "hsa": "HSA",
            "isa": "ISA",
            "ira": "IRA",
            "lif": "LIF",
            "life insurance": "LIFE_INSURANCE",
            "lira": "LIRA",
            "lrif": "LRIF",
            "lrsp": "LRSP",
            "non-custodial wallet": "NONCUSTODIAL_WALLET",
            "non-taxable brokerage account": "NONTAXABLE_BROKERAGE_ACCOUNT",
            "other": "OTHER",
            "other insurance": "OTHER_INSURANCE",
            "other annuity": "OTHER_ANNUITY",
            "prif": "PRIF",
            "rdsp": "RDSP",
            "resp": "RESP",
            "rlif": "RLIF",
            "rrif": "RRIF",
            "pension": "PENSION",
            "profit sharing plan": "PROFIT_SHARING_PLAN",
            "retirement": "RETIREMENT",
            "roth": "ROTH",
            "roth 401k": "ROTH_401K",
            "rrsp": "RRSP",
            "sep ira": "SEP_IRA",
            "simple ira": "SIMPLE_IRA",
            "sipp": "SIPP",
            "stock plan": "STOCK_PLAN",
            "thrift savings plan": "THRIFT_SAVINGS_PLAN",
            "tfsa": "TFSA",
            "trust": "TRUST",
            "ugma": "UGMA",
            "utma": "UTMA",
            "variable annuity": "VARIABLE_ANNUITY",
            "credit card": "CREDIT_CARD",
            "paypal": "PAYPAL",
            "cd": "CD",
            "checking": "CHECKING",
            "savings": "SAVINGS",
            "money market": "MONEY_MARKET",
            "prepaid": "PREPAID",
            "auto": "AUTO",
            "business": "BUSINESS",
            "commercial": "COMMERCIAL",
            "construction": "CONSTRUCTION",
            "consumer": "CONSUMER",
            "home equity": "HOME_EQUITY",
            "loan": "LOAN",
            "mortgage": "MORTGAGE",
            "overdraft": "OVERDRAFT",
            "line of credit": "LINE_OF_CREDIT",
            "student": "STUDENT",
            "cash management": "CASH_MANAGEMENT",
            "keogh": "KEOGH",
            "mutual fund": "MUTUAL_FUND",
            "recurring": "RECURRING",
            "rewards": "REWARDS",
            "safe deposit": "SAFE_DEPOSIT",
            "sarsep": "SARSEP",
            "payroll": "PAYROLL",
            schemas.NoneClass.NONE: "NONE",
        }
    
    @schemas.classproperty
    def DIGIT_FOUR_01A(cls):
        return cls("401a")
    
    @schemas.classproperty
    def DIGIT_FOUR_01K(cls):
        return cls("401k")
    
    @schemas.classproperty
    def DIGIT_FOUR_03B(cls):
        return cls("403B")
    
    @schemas.classproperty
    def DIGIT_FOUR_57B(cls):
        return cls("457b")
    
    @schemas.classproperty
    def POSITIVE_529(cls):
        return cls("529")
    
    @schemas.classproperty
    def BROKERAGE(cls):
        return cls("brokerage")
    
    @schemas.classproperty
    def CASH_ISA(cls):
        return cls("cash isa")
    
    @schemas.classproperty
    def CRYPTO_EXCHANGE(cls):
        return cls("crypto exchange")
    
    @schemas.classproperty
    def EDUCATION_SAVINGS_ACCOUNT(cls):
        return cls("education savings account")
    
    @schemas.classproperty
    def EBT(cls):
        return cls("ebt")
    
    @schemas.classproperty
    def FIXED_ANNUITY(cls):
        return cls("fixed annuity")
    
    @schemas.classproperty
    def GIC(cls):
        return cls("gic")
    
    @schemas.classproperty
    def HEALTH_REIMBURSEMENT_ARRANGEMENT(cls):
        return cls("health reimbursement arrangement")
    
    @schemas.classproperty
    def HSA(cls):
        return cls("hsa")
    
    @schemas.classproperty
    def ISA(cls):
        return cls("isa")
    
    @schemas.classproperty
    def IRA(cls):
        return cls("ira")
    
    @schemas.classproperty
    def LIF(cls):
        return cls("lif")
    
    @schemas.classproperty
    def LIFE_INSURANCE(cls):
        return cls("life insurance")
    
    @schemas.classproperty
    def LIRA(cls):
        return cls("lira")
    
    @schemas.classproperty
    def LRIF(cls):
        return cls("lrif")
    
    @schemas.classproperty
    def LRSP(cls):
        return cls("lrsp")
    
    @schemas.classproperty
    def NONCUSTODIAL_WALLET(cls):
        return cls("non-custodial wallet")
    
    @schemas.classproperty
    def NONTAXABLE_BROKERAGE_ACCOUNT(cls):
        return cls("non-taxable brokerage account")
    
    @schemas.classproperty
    def OTHER(cls):
        return cls("other")
    
    @schemas.classproperty
    def OTHER_INSURANCE(cls):
        return cls("other insurance")
    
    @schemas.classproperty
    def OTHER_ANNUITY(cls):
        return cls("other annuity")
    
    @schemas.classproperty
    def PRIF(cls):
        return cls("prif")
    
    @schemas.classproperty
    def RDSP(cls):
        return cls("rdsp")
    
    @schemas.classproperty
    def RESP(cls):
        return cls("resp")
    
    @schemas.classproperty
    def RLIF(cls):
        return cls("rlif")
    
    @schemas.classproperty
    def RRIF(cls):
        return cls("rrif")
    
    @schemas.classproperty
    def PENSION(cls):
        return cls("pension")
    
    @schemas.classproperty
    def PROFIT_SHARING_PLAN(cls):
        return cls("profit sharing plan")
    
    @schemas.classproperty
    def RETIREMENT(cls):
        return cls("retirement")
    
    @schemas.classproperty
    def ROTH(cls):
        return cls("roth")
    
    @schemas.classproperty
    def ROTH_401K(cls):
        return cls("roth 401k")
    
    @schemas.classproperty
    def RRSP(cls):
        return cls("rrsp")
    
    @schemas.classproperty
    def SEP_IRA(cls):
        return cls("sep ira")
    
    @schemas.classproperty
    def SIMPLE_IRA(cls):
        return cls("simple ira")
    
    @schemas.classproperty
    def SIPP(cls):
        return cls("sipp")
    
    @schemas.classproperty
    def STOCK_PLAN(cls):
        return cls("stock plan")
    
    @schemas.classproperty
    def THRIFT_SAVINGS_PLAN(cls):
        return cls("thrift savings plan")
    
    @schemas.classproperty
    def TFSA(cls):
        return cls("tfsa")
    
    @schemas.classproperty
    def TRUST(cls):
        return cls("trust")
    
    @schemas.classproperty
    def UGMA(cls):
        return cls("ugma")
    
    @schemas.classproperty
    def UTMA(cls):
        return cls("utma")
    
    @schemas.classproperty
    def VARIABLE_ANNUITY(cls):
        return cls("variable annuity")
    
    @schemas.classproperty
    def CREDIT_CARD(cls):
        return cls("credit card")
    
    @schemas.classproperty
    def PAYPAL(cls):
        return cls("paypal")
    
    @schemas.classproperty
    def CD(cls):
        return cls("cd")
    
    @schemas.classproperty
    def CHECKING(cls):
        return cls("checking")
    
    @schemas.classproperty
    def SAVINGS(cls):
        return cls("savings")
    
    @schemas.classproperty
    def MONEY_MARKET(cls):
        return cls("money market")
    
    @schemas.classproperty
    def PREPAID(cls):
        return cls("prepaid")
    
    @schemas.classproperty
    def AUTO(cls):
        return cls("auto")
    
    @schemas.classproperty
    def BUSINESS(cls):
        return cls("business")
    
    @schemas.classproperty
    def COMMERCIAL(cls):
        return cls("commercial")
    
    @schemas.classproperty
    def CONSTRUCTION(cls):
        return cls("construction")
    
    @schemas.classproperty
    def CONSUMER(cls):
        return cls("consumer")
    
    @schemas.classproperty
    def HOME_EQUITY(cls):
        return cls("home equity")
    
    @schemas.classproperty
    def LOAN(cls):
        return cls("loan")
    
    @schemas.classproperty
    def MORTGAGE(cls):
        return cls("mortgage")
    
    @schemas.classproperty
    def OVERDRAFT(cls):
        return cls("overdraft")
    
    @schemas.classproperty
    def LINE_OF_CREDIT(cls):
        return cls("line of credit")
    
    @schemas.classproperty
    def STUDENT(cls):
        return cls("student")
    
    @schemas.classproperty
    def CASH_MANAGEMENT(cls):
        return cls("cash management")
    
    @schemas.classproperty
    def KEOGH(cls):
        return cls("keogh")
    
    @schemas.classproperty
    def MUTUAL_FUND(cls):
        return cls("mutual fund")
    
    @schemas.classproperty
    def RECURRING(cls):
        return cls("recurring")
    
    @schemas.classproperty
    def REWARDS(cls):
        return cls("rewards")
    
    @schemas.classproperty
    def SAFE_DEPOSIT(cls):
        return cls("safe deposit")
    
    @schemas.classproperty
    def SARSEP(cls):
        return cls("sarsep")
    
    @schemas.classproperty
    def PAYROLL(cls):
        return cls("payroll")
    
    @schemas.classproperty
    def NONE(cls):
        return cls(None)


    def __new__(
        cls,
        *_args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AccountSubtype':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
        )
