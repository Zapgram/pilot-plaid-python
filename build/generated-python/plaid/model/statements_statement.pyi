# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class StatementsStatement(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A statement's metadata associated with an account
    """


    class MetaOapg:
        required = {
            "month",
            "year",
            "statement_id",
        }
        
        class properties:
            statement_id = schemas.StrSchema
            month = schemas.IntSchema
            year = schemas.IntSchema
            __annotations__ = {
                "statement_id": statement_id,
                "month": month,
                "year": year,
            }
        additional_properties = schemas.AnyTypeSchema
    
    month: MetaOapg.properties.month
    year: MetaOapg.properties.year
    statement_id: MetaOapg.properties.statement_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["month"]) -> MetaOapg.properties.month: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statement_id"]) -> MetaOapg.properties.statement_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["month"], typing_extensions.Literal["year"], typing_extensions.Literal["statement_id"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["month"]) -> MetaOapg.properties.month: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statement_id"]) -> MetaOapg.properties.statement_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["month"], typing_extensions.Literal["year"], typing_extensions.Literal["statement_id"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        month: typing.Union[MetaOapg.properties.month, decimal.Decimal, int, ],
        year: typing.Union[MetaOapg.properties.year, decimal.Decimal, int, ],
        statement_id: typing.Union[MetaOapg.properties.statement_id, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'StatementsStatement':
        return super().__new__(
            cls,
            *_args,
            month=month,
            year=year,
            statement_id=statement_id,
            _configuration=_configuration,
            **kwargs,
        )
