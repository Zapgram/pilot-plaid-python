# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class Taxform(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Data about an official document used to report the user's income to the IRS.
    """


    class MetaOapg:
        required = {
            "document_type",
        }
        
        class properties:
            document_type = schemas.StrSchema
            doc_id = schemas.StrSchema
        
            @staticmethod
            def w2() -> typing.Type['W2']:
                return W2
            __annotations__ = {
                "document_type": document_type,
                "doc_id": doc_id,
                "w2": w2,
            }
        additional_properties = schemas.AnyTypeSchema
    
    document_type: MetaOapg.properties.document_type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document_type"]) -> MetaOapg.properties.document_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["doc_id"]) -> MetaOapg.properties.doc_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["w2"]) -> 'W2': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["document_type"], typing_extensions.Literal["doc_id"], typing_extensions.Literal["w2"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document_type"]) -> MetaOapg.properties.document_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["doc_id"]) -> typing.Union[MetaOapg.properties.doc_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["w2"]) -> typing.Union['W2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["document_type"], typing_extensions.Literal["doc_id"], typing_extensions.Literal["w2"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        document_type: typing.Union[MetaOapg.properties.document_type, str, ],
        doc_id: typing.Union[MetaOapg.properties.doc_id, str, schemas.Unset] = schemas.unset,
        w2: typing.Union['W2', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'Taxform':
        return super().__new__(
            cls,
            *_args,
            document_type=document_type,
            doc_id=doc_id,
            w2=w2,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.w2 import W2
