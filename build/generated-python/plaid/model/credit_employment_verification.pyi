# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class CreditEmploymentVerification(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The object containing proof of employment data for an individual.
    """


    class MetaOapg:
        required = {
            "end_date",
            "employee_type",
            "account_id",
            "platform_ids",
            "last_paystub_date",
            "employer",
            "title",
            "start_date",
            "status",
        }
        
        class properties:
            
            
            class account_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'account_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def status() -> typing.Type['CreditEmploymentVerificationStatus']:
                return CreditEmploymentVerificationStatus
            
            
            class start_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'start_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class end_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'end_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def employer() -> typing.Type['CreditEmployerVerification']:
                return CreditEmployerVerification
            
            
            class title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'title':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def platform_ids() -> typing.Type['CreditPlatformIds']:
                return CreditPlatformIds
        
            @staticmethod
            def employee_type() -> typing.Type['CreditEmploymentEmployeeType']:
                return CreditEmploymentEmployeeType
            
            
            class last_paystub_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_paystub_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "account_id": account_id,
                "status": status,
                "start_date": start_date,
                "end_date": end_date,
                "employer": employer,
                "title": title,
                "platform_ids": platform_ids,
                "employee_type": employee_type,
                "last_paystub_date": last_paystub_date,
            }
        additional_properties = schemas.AnyTypeSchema
    
    end_date: MetaOapg.properties.end_date
    employee_type: 'CreditEmploymentEmployeeType'
    account_id: MetaOapg.properties.account_id
    platform_ids: 'CreditPlatformIds'
    last_paystub_date: MetaOapg.properties.last_paystub_date
    employer: 'CreditEmployerVerification'
    title: MetaOapg.properties.title
    start_date: MetaOapg.properties.start_date
    status: 'CreditEmploymentVerificationStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_type"]) -> 'CreditEmploymentEmployeeType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform_ids"]) -> 'CreditPlatformIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_paystub_date"]) -> MetaOapg.properties.last_paystub_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employer"]) -> 'CreditEmployerVerification': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'CreditEmploymentVerificationStatus': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["end_date"], typing_extensions.Literal["employee_type"], typing_extensions.Literal["account_id"], typing_extensions.Literal["platform_ids"], typing_extensions.Literal["last_paystub_date"], typing_extensions.Literal["employer"], typing_extensions.Literal["title"], typing_extensions.Literal["start_date"], typing_extensions.Literal["status"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_type"]) -> 'CreditEmploymentEmployeeType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform_ids"]) -> 'CreditPlatformIds': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_paystub_date"]) -> MetaOapg.properties.last_paystub_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employer"]) -> 'CreditEmployerVerification': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'CreditEmploymentVerificationStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["end_date"], typing_extensions.Literal["employee_type"], typing_extensions.Literal["account_id"], typing_extensions.Literal["platform_ids"], typing_extensions.Literal["last_paystub_date"], typing_extensions.Literal["employer"], typing_extensions.Literal["title"], typing_extensions.Literal["start_date"], typing_extensions.Literal["status"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        end_date: typing.Union[MetaOapg.properties.end_date, None, str, date, ],
        employee_type: 'CreditEmploymentEmployeeType',
        account_id: typing.Union[MetaOapg.properties.account_id, None, str, ],
        platform_ids: 'CreditPlatformIds',
        last_paystub_date: typing.Union[MetaOapg.properties.last_paystub_date, None, str, date, ],
        employer: 'CreditEmployerVerification',
        title: typing.Union[MetaOapg.properties.title, None, str, ],
        start_date: typing.Union[MetaOapg.properties.start_date, None, str, date, ],
        status: 'CreditEmploymentVerificationStatus',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'CreditEmploymentVerification':
        return super().__new__(
            cls,
            *_args,
            end_date=end_date,
            employee_type=employee_type,
            account_id=account_id,
            platform_ids=platform_ids,
            last_paystub_date=last_paystub_date,
            employer=employer,
            title=title,
            start_date=start_date,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.credit_employer_verification import CreditEmployerVerification
from plaid.model.credit_employment_employee_type import CreditEmploymentEmployeeType
from plaid.model.credit_employment_verification_status import CreditEmploymentVerificationStatus
from plaid.model.credit_platform_ids import CreditPlatformIds
