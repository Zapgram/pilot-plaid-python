# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class TransferRecurringSchedule(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The schedule that the recurring transfer will be executed on.
    """


    class MetaOapg:
        required = {
            "interval_count",
            "interval_unit",
            "interval_execution_day",
            "start_date",
        }
        
        class properties:
        
            @staticmethod
            def interval_unit() -> typing.Type['TransferScheduleIntervalUnit']:
                return TransferScheduleIntervalUnit
            interval_count = schemas.IntSchema
            interval_execution_day = schemas.IntSchema
            start_date = schemas.DateSchema
            
            
            class end_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'end_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "interval_unit": interval_unit,
                "interval_count": interval_count,
                "interval_execution_day": interval_execution_day,
                "start_date": start_date,
                "end_date": end_date,
            }
    
    interval_count: MetaOapg.properties.interval_count
    interval_unit: 'TransferScheduleIntervalUnit'
    interval_execution_day: MetaOapg.properties.interval_execution_day
    start_date: MetaOapg.properties.start_date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interval_unit"]) -> 'TransferScheduleIntervalUnit': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interval_count"]) -> MetaOapg.properties.interval_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interval_execution_day"]) -> MetaOapg.properties.interval_execution_day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["interval_unit", "interval_count", "interval_execution_day", "start_date", "end_date", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interval_unit"]) -> 'TransferScheduleIntervalUnit': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interval_count"]) -> MetaOapg.properties.interval_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interval_execution_day"]) -> MetaOapg.properties.interval_execution_day: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> typing.Union[MetaOapg.properties.end_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["interval_unit", "interval_count", "interval_execution_day", "start_date", "end_date", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        interval_count: typing.Union[MetaOapg.properties.interval_count, decimal.Decimal, int, ],
        interval_unit: 'TransferScheduleIntervalUnit',
        interval_execution_day: typing.Union[MetaOapg.properties.interval_execution_day, decimal.Decimal, int, ],
        start_date: typing.Union[MetaOapg.properties.start_date, str, date, ],
        end_date: typing.Union[MetaOapg.properties.end_date, None, str, date, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransferRecurringSchedule':
        return super().__new__(
            cls,
            *_args,
            interval_count=interval_count,
            interval_unit=interval_unit,
            interval_execution_day=interval_execution_day,
            start_date=start_date,
            end_date=end_date,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.transfer_schedule_interval_unit import TransferScheduleIntervalUnit
