# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class InvestmentTransaction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A transaction within an investment account.
    """


    class MetaOapg:
        required = {
            "date",
            "unofficial_currency_code",
            "amount",
            "fees",
            "quantity",
            "type",
            "account_id",
            "subtype",
            "investment_transaction_id",
            "price",
            "iso_currency_code",
            "name",
            "security_id",
        }
        
        class properties:
            investment_transaction_id = schemas.StrSchema
            account_id = schemas.StrSchema
            
            
            class security_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'security_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            date = schemas.DateSchema
            name = schemas.StrSchema
            quantity = schemas.Float64Schema
            amount = schemas.Float64Schema
            price = schemas.Float64Schema
            
            
            class fees(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fees':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def type() -> typing.Type['InvestmentTransactionType']:
                return InvestmentTransactionType
        
            @staticmethod
            def subtype() -> typing.Type['InvestmentTransactionSubtype']:
                return InvestmentTransactionSubtype
            
            
            class iso_currency_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'iso_currency_code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class unofficial_currency_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'unofficial_currency_code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cancel_transaction_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cancel_transaction_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "investment_transaction_id": investment_transaction_id,
                "account_id": account_id,
                "security_id": security_id,
                "date": date,
                "name": name,
                "quantity": quantity,
                "amount": amount,
                "price": price,
                "fees": fees,
                "type": type,
                "subtype": subtype,
                "iso_currency_code": iso_currency_code,
                "unofficial_currency_code": unofficial_currency_code,
                "cancel_transaction_id": cancel_transaction_id,
            }
        additional_properties = schemas.AnyTypeSchema
    
    date: MetaOapg.properties.date
    unofficial_currency_code: MetaOapg.properties.unofficial_currency_code
    amount: MetaOapg.properties.amount
    fees: MetaOapg.properties.fees
    quantity: MetaOapg.properties.quantity
    type: 'InvestmentTransactionType'
    account_id: MetaOapg.properties.account_id
    subtype: 'InvestmentTransactionSubtype'
    investment_transaction_id: MetaOapg.properties.investment_transaction_id
    price: MetaOapg.properties.price
    iso_currency_code: MetaOapg.properties.iso_currency_code
    name: MetaOapg.properties.name
    security_id: MetaOapg.properties.security_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unofficial_currency_code"]) -> MetaOapg.properties.unofficial_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fees"]) -> MetaOapg.properties.fees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'InvestmentTransactionType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtype"]) -> 'InvestmentTransactionSubtype': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investment_transaction_id"]) -> MetaOapg.properties.investment_transaction_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["security_id"]) -> MetaOapg.properties.security_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cancel_transaction_id"]) -> MetaOapg.properties.cancel_transaction_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["date"], typing_extensions.Literal["unofficial_currency_code"], typing_extensions.Literal["amount"], typing_extensions.Literal["fees"], typing_extensions.Literal["quantity"], typing_extensions.Literal["type"], typing_extensions.Literal["account_id"], typing_extensions.Literal["subtype"], typing_extensions.Literal["investment_transaction_id"], typing_extensions.Literal["price"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["name"], typing_extensions.Literal["security_id"], typing_extensions.Literal["cancel_transaction_id"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unofficial_currency_code"]) -> MetaOapg.properties.unofficial_currency_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fees"]) -> MetaOapg.properties.fees: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'InvestmentTransactionType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtype"]) -> 'InvestmentTransactionSubtype': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investment_transaction_id"]) -> MetaOapg.properties.investment_transaction_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["security_id"]) -> MetaOapg.properties.security_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cancel_transaction_id"]) -> typing.Union[MetaOapg.properties.cancel_transaction_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date"], typing_extensions.Literal["unofficial_currency_code"], typing_extensions.Literal["amount"], typing_extensions.Literal["fees"], typing_extensions.Literal["quantity"], typing_extensions.Literal["type"], typing_extensions.Literal["account_id"], typing_extensions.Literal["subtype"], typing_extensions.Literal["investment_transaction_id"], typing_extensions.Literal["price"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["name"], typing_extensions.Literal["security_id"], typing_extensions.Literal["cancel_transaction_id"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, str, date, ],
        unofficial_currency_code: typing.Union[MetaOapg.properties.unofficial_currency_code, None, str, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
        fees: typing.Union[MetaOapg.properties.fees, None, decimal.Decimal, int, float, ],
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, float, ],
        type: 'InvestmentTransactionType',
        account_id: typing.Union[MetaOapg.properties.account_id, str, ],
        subtype: 'InvestmentTransactionSubtype',
        investment_transaction_id: typing.Union[MetaOapg.properties.investment_transaction_id, str, ],
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, float, ],
        iso_currency_code: typing.Union[MetaOapg.properties.iso_currency_code, None, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        security_id: typing.Union[MetaOapg.properties.security_id, None, str, ],
        cancel_transaction_id: typing.Union[MetaOapg.properties.cancel_transaction_id, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'InvestmentTransaction':
        return super().__new__(
            cls,
            *_args,
            date=date,
            unofficial_currency_code=unofficial_currency_code,
            amount=amount,
            fees=fees,
            quantity=quantity,
            type=type,
            account_id=account_id,
            subtype=subtype,
            investment_transaction_id=investment_transaction_id,
            price=price,
            iso_currency_code=iso_currency_code,
            name=name,
            security_id=security_id,
            cancel_transaction_id=cancel_transaction_id,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.investment_transaction_subtype import InvestmentTransactionSubtype
from plaid.model.investment_transaction_type import InvestmentTransactionType
