# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class Counterparty(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The counterparty, such as the merchant or financial institution, is extracted by Plaid from the raw description.
    """


    class MetaOapg:
        required = {
            "website",
            "logo_url",
            "name",
            "type",
        }
        
        class properties:
            name = schemas.StrSchema
        
            @staticmethod
            def type() -> typing.Type['CounterpartyType']:
                return CounterpartyType
            
            
            class website(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'website':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class logo_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'logo_url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class entity_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'entity_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class confidence_level(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'confidence_level':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "name": name,
                "type": type,
                "website": website,
                "logo_url": logo_url,
                "entity_id": entity_id,
                "confidence_level": confidence_level,
            }
        additional_properties = schemas.AnyTypeSchema
    
    website: MetaOapg.properties.website
    logo_url: MetaOapg.properties.logo_url
    name: MetaOapg.properties.name
    type: 'CounterpartyType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["website"]) -> MetaOapg.properties.website: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo_url"]) -> MetaOapg.properties.logo_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'CounterpartyType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity_id"]) -> MetaOapg.properties.entity_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confidence_level"]) -> MetaOapg.properties.confidence_level: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["website"], typing_extensions.Literal["logo_url"], typing_extensions.Literal["name"], typing_extensions.Literal["type"], typing_extensions.Literal["entity_id"], typing_extensions.Literal["confidence_level"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["website"]) -> MetaOapg.properties.website: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logo_url"]) -> MetaOapg.properties.logo_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'CounterpartyType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity_id"]) -> typing.Union[MetaOapg.properties.entity_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confidence_level"]) -> typing.Union[MetaOapg.properties.confidence_level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["website"], typing_extensions.Literal["logo_url"], typing_extensions.Literal["name"], typing_extensions.Literal["type"], typing_extensions.Literal["entity_id"], typing_extensions.Literal["confidence_level"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        website: typing.Union[MetaOapg.properties.website, None, str, ],
        logo_url: typing.Union[MetaOapg.properties.logo_url, None, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        type: 'CounterpartyType',
        entity_id: typing.Union[MetaOapg.properties.entity_id, None, str, schemas.Unset] = schemas.unset,
        confidence_level: typing.Union[MetaOapg.properties.confidence_level, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'Counterparty':
        return super().__new__(
            cls,
            *_args,
            website=website,
            logo_url=logo_url,
            name=name,
            type=type,
            entity_id=entity_id,
            confidence_level=confidence_level,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.counterparty_type import CounterpartyType
