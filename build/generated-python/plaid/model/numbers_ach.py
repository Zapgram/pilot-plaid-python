# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class NumbersACH(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Identifying information for transferring money to or from a US account via ACH or wire transfer.
    """


    class MetaOapg:
        required = {
            "wire_routing",
            "routing",
            "account_id",
            "account",
        }
        
        class properties:
            account_id = schemas.StrSchema
            account = schemas.StrSchema
            routing = schemas.StrSchema
            
            
            class wire_routing(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'wire_routing':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class can_transfer_in(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'can_transfer_in':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class can_transfer_out(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'can_transfer_out':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "account_id": account_id,
                "account": account,
                "routing": routing,
                "wire_routing": wire_routing,
                "can_transfer_in": can_transfer_in,
                "can_transfer_out": can_transfer_out,
            }
        additional_properties = schemas.AnyTypeSchema
    
    wire_routing: MetaOapg.properties.wire_routing
    routing: MetaOapg.properties.routing
    account_id: MetaOapg.properties.account_id
    account: MetaOapg.properties.account
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wire_routing"]) -> MetaOapg.properties.wire_routing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routing"]) -> MetaOapg.properties.routing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_transfer_in"]) -> MetaOapg.properties.can_transfer_in: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_transfer_out"]) -> MetaOapg.properties.can_transfer_out: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["wire_routing"], typing_extensions.Literal["routing"], typing_extensions.Literal["account_id"], typing_extensions.Literal["account"], typing_extensions.Literal["can_transfer_in"], typing_extensions.Literal["can_transfer_out"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wire_routing"]) -> MetaOapg.properties.wire_routing: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routing"]) -> MetaOapg.properties.routing: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_transfer_in"]) -> typing.Union[MetaOapg.properties.can_transfer_in, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_transfer_out"]) -> typing.Union[MetaOapg.properties.can_transfer_out, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["wire_routing"], typing_extensions.Literal["routing"], typing_extensions.Literal["account_id"], typing_extensions.Literal["account"], typing_extensions.Literal["can_transfer_in"], typing_extensions.Literal["can_transfer_out"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        wire_routing: typing.Union[MetaOapg.properties.wire_routing, None, str, ],
        routing: typing.Union[MetaOapg.properties.routing, str, ],
        account_id: typing.Union[MetaOapg.properties.account_id, str, ],
        account: typing.Union[MetaOapg.properties.account, str, ],
        can_transfer_in: typing.Union[MetaOapg.properties.can_transfer_in, None, bool, schemas.Unset] = schemas.unset,
        can_transfer_out: typing.Union[MetaOapg.properties.can_transfer_out, None, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'NumbersACH':
        return super().__new__(
            cls,
            *_args,
            wire_routing=wire_routing,
            routing=routing,
            account_id=account_id,
            account=account,
            can_transfer_in=can_transfer_in,
            can_transfer_out=can_transfer_out,
            _configuration=_configuration,
            **kwargs,
        )
