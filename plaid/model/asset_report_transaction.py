# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class AssetReportTransaction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A transaction on the asset report
    """


    class MetaOapg:
        required = {
            "date",
            "transaction_id",
            "unofficial_currency_code",
            "amount",
            "account_id",
            "pending",
            "iso_currency_code",
            "original_description",
        }
        
        class properties:
            account_id = schemas.StrSchema
            amount = schemas.Float64Schema
            
            
            class iso_currency_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'iso_currency_code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class unofficial_currency_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'unofficial_currency_code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class original_description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'original_description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            date = schemas.DateSchema
            pending = schemas.BoolSchema
            transaction_id = schemas.StrSchema
            
            
            class category(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'category':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class category_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'category_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def credit_category() -> typing.Type['CreditCategory']:
                return CreditCategory
            
            
            class check_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'check_number':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class date_transacted(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'date_transacted':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def location() -> typing.Type['Location']:
                return Location
            name = schemas.StrSchema
            
            
            class merchant_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'merchant_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def payment_meta() -> typing.Type['PaymentMeta']:
                return PaymentMeta
            
            
            class pending_transaction_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pending_transaction_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class account_owner(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'account_owner':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def transaction_type() -> typing.Type['AssetReportTransactionType']:
                return AssetReportTransactionType
            income_source_id = schemas.StrSchema
            __annotations__ = {
                "account_id": account_id,
                "amount": amount,
                "iso_currency_code": iso_currency_code,
                "unofficial_currency_code": unofficial_currency_code,
                "original_description": original_description,
                "date": date,
                "pending": pending,
                "transaction_id": transaction_id,
                "category": category,
                "category_id": category_id,
                "credit_category": credit_category,
                "check_number": check_number,
                "date_transacted": date_transacted,
                "location": location,
                "name": name,
                "merchant_name": merchant_name,
                "payment_meta": payment_meta,
                "pending_transaction_id": pending_transaction_id,
                "account_owner": account_owner,
                "transaction_type": transaction_type,
                "income_source_id": income_source_id,
            }
        additional_properties = schemas.AnyTypeSchema
    
    date: MetaOapg.properties.date
    transaction_id: MetaOapg.properties.transaction_id
    unofficial_currency_code: MetaOapg.properties.unofficial_currency_code
    amount: MetaOapg.properties.amount
    account_id: MetaOapg.properties.account_id
    pending: MetaOapg.properties.pending
    iso_currency_code: MetaOapg.properties.iso_currency_code
    original_description: MetaOapg.properties.original_description
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_id"]) -> MetaOapg.properties.transaction_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unofficial_currency_code"]) -> MetaOapg.properties.unofficial_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pending"]) -> MetaOapg.properties.pending: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["original_description"]) -> MetaOapg.properties.original_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.properties.category_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credit_category"]) -> 'CreditCategory': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["check_number"]) -> MetaOapg.properties.check_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_transacted"]) -> MetaOapg.properties.date_transacted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'Location': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant_name"]) -> MetaOapg.properties.merchant_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_meta"]) -> 'PaymentMeta': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pending_transaction_id"]) -> MetaOapg.properties.pending_transaction_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_owner"]) -> MetaOapg.properties.account_owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_type"]) -> 'AssetReportTransactionType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["income_source_id"]) -> MetaOapg.properties.income_source_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["date"], typing_extensions.Literal["transaction_id"], typing_extensions.Literal["unofficial_currency_code"], typing_extensions.Literal["amount"], typing_extensions.Literal["account_id"], typing_extensions.Literal["pending"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["original_description"], typing_extensions.Literal["category"], typing_extensions.Literal["category_id"], typing_extensions.Literal["credit_category"], typing_extensions.Literal["check_number"], typing_extensions.Literal["date_transacted"], typing_extensions.Literal["location"], typing_extensions.Literal["name"], typing_extensions.Literal["merchant_name"], typing_extensions.Literal["payment_meta"], typing_extensions.Literal["pending_transaction_id"], typing_extensions.Literal["account_owner"], typing_extensions.Literal["transaction_type"], typing_extensions.Literal["income_source_id"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_id"]) -> MetaOapg.properties.transaction_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unofficial_currency_code"]) -> MetaOapg.properties.unofficial_currency_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pending"]) -> MetaOapg.properties.pending: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["original_description"]) -> MetaOapg.properties.original_description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_id"]) -> typing.Union[MetaOapg.properties.category_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credit_category"]) -> typing.Union['CreditCategory', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["check_number"]) -> typing.Union[MetaOapg.properties.check_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_transacted"]) -> typing.Union[MetaOapg.properties.date_transacted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union['Location', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant_name"]) -> typing.Union[MetaOapg.properties.merchant_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_meta"]) -> typing.Union['PaymentMeta', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pending_transaction_id"]) -> typing.Union[MetaOapg.properties.pending_transaction_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_owner"]) -> typing.Union[MetaOapg.properties.account_owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_type"]) -> typing.Union['AssetReportTransactionType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["income_source_id"]) -> typing.Union[MetaOapg.properties.income_source_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date"], typing_extensions.Literal["transaction_id"], typing_extensions.Literal["unofficial_currency_code"], typing_extensions.Literal["amount"], typing_extensions.Literal["account_id"], typing_extensions.Literal["pending"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["original_description"], typing_extensions.Literal["category"], typing_extensions.Literal["category_id"], typing_extensions.Literal["credit_category"], typing_extensions.Literal["check_number"], typing_extensions.Literal["date_transacted"], typing_extensions.Literal["location"], typing_extensions.Literal["name"], typing_extensions.Literal["merchant_name"], typing_extensions.Literal["payment_meta"], typing_extensions.Literal["pending_transaction_id"], typing_extensions.Literal["account_owner"], typing_extensions.Literal["transaction_type"], typing_extensions.Literal["income_source_id"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, str, date, ],
        transaction_id: typing.Union[MetaOapg.properties.transaction_id, str, ],
        unofficial_currency_code: typing.Union[MetaOapg.properties.unofficial_currency_code, None, str, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
        account_id: typing.Union[MetaOapg.properties.account_id, str, ],
        pending: typing.Union[MetaOapg.properties.pending, bool, ],
        iso_currency_code: typing.Union[MetaOapg.properties.iso_currency_code, None, str, ],
        original_description: typing.Union[MetaOapg.properties.original_description, None, str, ],
        category: typing.Union[MetaOapg.properties.category, list, tuple, None, schemas.Unset] = schemas.unset,
        category_id: typing.Union[MetaOapg.properties.category_id, None, str, schemas.Unset] = schemas.unset,
        credit_category: typing.Union['CreditCategory', schemas.Unset] = schemas.unset,
        check_number: typing.Union[MetaOapg.properties.check_number, None, str, schemas.Unset] = schemas.unset,
        date_transacted: typing.Union[MetaOapg.properties.date_transacted, None, str, schemas.Unset] = schemas.unset,
        location: typing.Union['Location', schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        merchant_name: typing.Union[MetaOapg.properties.merchant_name, None, str, schemas.Unset] = schemas.unset,
        payment_meta: typing.Union['PaymentMeta', schemas.Unset] = schemas.unset,
        pending_transaction_id: typing.Union[MetaOapg.properties.pending_transaction_id, None, str, schemas.Unset] = schemas.unset,
        account_owner: typing.Union[MetaOapg.properties.account_owner, None, str, schemas.Unset] = schemas.unset,
        transaction_type: typing.Union['AssetReportTransactionType', schemas.Unset] = schemas.unset,
        income_source_id: typing.Union[MetaOapg.properties.income_source_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'AssetReportTransaction':
        return super().__new__(
            cls,
            *_args,
            date=date,
            transaction_id=transaction_id,
            unofficial_currency_code=unofficial_currency_code,
            amount=amount,
            account_id=account_id,
            pending=pending,
            iso_currency_code=iso_currency_code,
            original_description=original_description,
            category=category,
            category_id=category_id,
            credit_category=credit_category,
            check_number=check_number,
            date_transacted=date_transacted,
            location=location,
            name=name,
            merchant_name=merchant_name,
            payment_meta=payment_meta,
            pending_transaction_id=pending_transaction_id,
            account_owner=account_owner,
            transaction_type=transaction_type,
            income_source_id=income_source_id,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.asset_report_transaction_type import AssetReportTransactionType
from plaid.model.credit_category import CreditCategory
from plaid.model.location import Location
from plaid.model.payment_meta import PaymentMeta
