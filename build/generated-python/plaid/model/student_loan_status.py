# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class StudentLoanStatus(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An object representing the status of the student loan
    """


    class MetaOapg:
        required = {
            "end_date",
            "type",
        }
        
        class properties:
            
            
            class end_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'end_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class type(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "cancelled": "CANCELLED",
                        "charged off": "CHARGED_OFF",
                        "claim": "CLAIM",
                        "consolidated": "CONSOLIDATED",
                        "deferment": "DEFERMENT",
                        "delinquent": "DELINQUENT",
                        "discharged": "DISCHARGED",
                        "extension": "EXTENSION",
                        "forbearance": "FORBEARANCE",
                        "in grace": "IN_GRACE",
                        "in military": "IN_MILITARY",
                        "in school": "IN_SCHOOL",
                        "not fully disbursed": "NOT_FULLY_DISBURSED",
                        "other": "OTHER",
                        "paid in full": "PAID_IN_FULL",
                        "refunded": "REFUNDED",
                        "repayment": "REPAYMENT",
                        "transferred": "TRANSFERRED",
                    }
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("cancelled")
                
                @schemas.classproperty
                def CHARGED_OFF(cls):
                    return cls("charged off")
                
                @schemas.classproperty
                def CLAIM(cls):
                    return cls("claim")
                
                @schemas.classproperty
                def CONSOLIDATED(cls):
                    return cls("consolidated")
                
                @schemas.classproperty
                def DEFERMENT(cls):
                    return cls("deferment")
                
                @schemas.classproperty
                def DELINQUENT(cls):
                    return cls("delinquent")
                
                @schemas.classproperty
                def DISCHARGED(cls):
                    return cls("discharged")
                
                @schemas.classproperty
                def EXTENSION(cls):
                    return cls("extension")
                
                @schemas.classproperty
                def FORBEARANCE(cls):
                    return cls("forbearance")
                
                @schemas.classproperty
                def IN_GRACE(cls):
                    return cls("in grace")
                
                @schemas.classproperty
                def IN_MILITARY(cls):
                    return cls("in military")
                
                @schemas.classproperty
                def IN_SCHOOL(cls):
                    return cls("in school")
                
                @schemas.classproperty
                def NOT_FULLY_DISBURSED(cls):
                    return cls("not fully disbursed")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("other")
                
                @schemas.classproperty
                def PAID_IN_FULL(cls):
                    return cls("paid in full")
                
                @schemas.classproperty
                def REFUNDED(cls):
                    return cls("refunded")
                
                @schemas.classproperty
                def REPAYMENT(cls):
                    return cls("repayment")
                
                @schemas.classproperty
                def TRANSFERRED(cls):
                    return cls("transferred")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'type':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "end_date": end_date,
                "type": type,
            }
        additional_properties = schemas.AnyTypeSchema
    
    end_date: MetaOapg.properties.end_date
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["end_date"], typing_extensions.Literal["type"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["end_date"], typing_extensions.Literal["type"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        end_date: typing.Union[MetaOapg.properties.end_date, None, str, date, ],
        type: typing.Union[MetaOapg.properties.type, None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'StudentLoanStatus':
        return super().__new__(
            cls,
            *_args,
            end_date=end_date,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )
