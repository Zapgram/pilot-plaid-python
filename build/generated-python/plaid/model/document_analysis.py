# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class DocumentAnalysis(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    High level descriptions of how the associated document was processed. If a document fails verification, the details in the `analysis` object should help clarify why the document was rejected.
    """


    class MetaOapg:
        required = {
            "extracted_data",
            "authenticity",
            "image_quality",
        }
        
        class properties:
        
            @staticmethod
            def authenticity() -> typing.Type['DocumentAuthenticityMatchCode']:
                return DocumentAuthenticityMatchCode
        
            @staticmethod
            def image_quality() -> typing.Type['ImageQuality']:
                return ImageQuality
        
            @staticmethod
            def extracted_data() -> typing.Type['PhysicalDocumentExtractedDataAnalysis']:
                return PhysicalDocumentExtractedDataAnalysis
            __annotations__ = {
                "authenticity": authenticity,
                "image_quality": image_quality,
                "extracted_data": extracted_data,
            }
        additional_properties = schemas.AnyTypeSchema
    
    extracted_data: 'PhysicalDocumentExtractedDataAnalysis'
    authenticity: 'DocumentAuthenticityMatchCode'
    image_quality: 'ImageQuality'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extracted_data"]) -> 'PhysicalDocumentExtractedDataAnalysis': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authenticity"]) -> 'DocumentAuthenticityMatchCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_quality"]) -> 'ImageQuality': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["extracted_data"], typing_extensions.Literal["authenticity"], typing_extensions.Literal["image_quality"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extracted_data"]) -> 'PhysicalDocumentExtractedDataAnalysis': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authenticity"]) -> 'DocumentAuthenticityMatchCode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_quality"]) -> 'ImageQuality': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["extracted_data"], typing_extensions.Literal["authenticity"], typing_extensions.Literal["image_quality"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        extracted_data: 'PhysicalDocumentExtractedDataAnalysis',
        authenticity: 'DocumentAuthenticityMatchCode',
        image_quality: 'ImageQuality',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'DocumentAnalysis':
        return super().__new__(
            cls,
            *_args,
            extracted_data=extracted_data,
            authenticity=authenticity,
            image_quality=image_quality,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.document_authenticity_match_code import DocumentAuthenticityMatchCode
from plaid.model.image_quality import ImageQuality
from plaid.model.physical_document_extracted_data_analysis import PhysicalDocumentExtractedDataAnalysis
