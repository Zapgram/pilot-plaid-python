# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class InvestmentsTransactionsOverride(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Specify the list of investments transactions on the account.
    """


    class MetaOapg:
        required = {
            "date",
            "quantity",
            "price",
            "name",
            "currency",
            "type",
        }
        
        class properties:
            date = schemas.DateSchema
            name = schemas.StrSchema
            quantity = schemas.Float64Schema
            price = schemas.Float64Schema
            type = schemas.StrSchema
            currency = schemas.StrSchema
            fees = schemas.Float64Schema
        
            @staticmethod
            def security() -> typing.Type['SecurityOverride']:
                return SecurityOverride
            __annotations__ = {
                "date": date,
                "name": name,
                "quantity": quantity,
                "price": price,
                "type": type,
                "currency": currency,
                "fees": fees,
                "security": security,
            }
    
    date: MetaOapg.properties.date
    quantity: MetaOapg.properties.quantity
    price: MetaOapg.properties.price
    name: MetaOapg.properties.name
    currency: MetaOapg.properties.currency
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fees"]) -> MetaOapg.properties.fees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["security"]) -> 'SecurityOverride': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["date", "name", "quantity", "price", "type", "currency", "fees", "security", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fees"]) -> typing.Union[MetaOapg.properties.fees, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["security"]) -> typing.Union['SecurityOverride', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date", "name", "quantity", "price", "type", "currency", "fees", "security", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, str, date, ],
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, float, ],
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, float, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        fees: typing.Union[MetaOapg.properties.fees, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        security: typing.Union['SecurityOverride', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InvestmentsTransactionsOverride':
        return super().__new__(
            cls,
            *_args,
            date=date,
            quantity=quantity,
            price=price,
            name=name,
            currency=currency,
            type=type,
            fees=fees,
            security=security,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.security_override import SecurityOverride
