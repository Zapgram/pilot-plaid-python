# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class Application(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Metadata about the application
    """


    class MetaOapg:
        required = {
            "city",
            "logo_url",
            "join_date",
            "display_name",
            "application_id",
            "application_url",
            "use_case",
            "country_code",
            "company_legal_name",
            "reason_for_access",
            "name",
            "postal_code",
            "region",
        }
        
        class properties:
            application_id = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class display_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'display_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            join_date = schemas.DateSchema
            
            
            class logo_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'logo_url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class application_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'application_url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class reason_for_access(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reason_for_access':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class use_case(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'use_case':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class company_legal_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'company_legal_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class city(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'city':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class region(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'region':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class postal_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'postal_code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class country_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'country_code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "application_id": application_id,
                "name": name,
                "display_name": display_name,
                "join_date": join_date,
                "logo_url": logo_url,
                "application_url": application_url,
                "reason_for_access": reason_for_access,
                "use_case": use_case,
                "company_legal_name": company_legal_name,
                "city": city,
                "region": region,
                "postal_code": postal_code,
                "country_code": country_code,
            }
    
    city: MetaOapg.properties.city
    logo_url: MetaOapg.properties.logo_url
    join_date: MetaOapg.properties.join_date
    display_name: MetaOapg.properties.display_name
    application_id: MetaOapg.properties.application_id
    application_url: MetaOapg.properties.application_url
    use_case: MetaOapg.properties.use_case
    country_code: MetaOapg.properties.country_code
    company_legal_name: MetaOapg.properties.company_legal_name
    reason_for_access: MetaOapg.properties.reason_for_access
    name: MetaOapg.properties.name
    postal_code: MetaOapg.properties.postal_code
    region: MetaOapg.properties.region
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["application_id"]) -> MetaOapg.properties.application_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["join_date"]) -> MetaOapg.properties.join_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo_url"]) -> MetaOapg.properties.logo_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["application_url"]) -> MetaOapg.properties.application_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason_for_access"]) -> MetaOapg.properties.reason_for_access: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_case"]) -> MetaOapg.properties.use_case: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_legal_name"]) -> MetaOapg.properties.company_legal_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postal_code"]) -> MetaOapg.properties.postal_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> MetaOapg.properties.country_code: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["application_id", "name", "display_name", "join_date", "logo_url", "application_url", "reason_for_access", "use_case", "company_legal_name", "city", "region", "postal_code", "country_code", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["application_id"]) -> MetaOapg.properties.application_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["join_date"]) -> MetaOapg.properties.join_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logo_url"]) -> MetaOapg.properties.logo_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["application_url"]) -> MetaOapg.properties.application_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason_for_access"]) -> MetaOapg.properties.reason_for_access: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_case"]) -> MetaOapg.properties.use_case: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_legal_name"]) -> MetaOapg.properties.company_legal_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postal_code"]) -> MetaOapg.properties.postal_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> MetaOapg.properties.country_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["application_id", "name", "display_name", "join_date", "logo_url", "application_url", "reason_for_access", "use_case", "company_legal_name", "city", "region", "postal_code", "country_code", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        city: typing.Union[MetaOapg.properties.city, None, str, ],
        logo_url: typing.Union[MetaOapg.properties.logo_url, None, str, ],
        join_date: typing.Union[MetaOapg.properties.join_date, str, date, ],
        display_name: typing.Union[MetaOapg.properties.display_name, None, str, ],
        application_id: typing.Union[MetaOapg.properties.application_id, str, ],
        application_url: typing.Union[MetaOapg.properties.application_url, None, str, ],
        use_case: typing.Union[MetaOapg.properties.use_case, None, str, ],
        country_code: typing.Union[MetaOapg.properties.country_code, None, str, ],
        company_legal_name: typing.Union[MetaOapg.properties.company_legal_name, None, str, ],
        reason_for_access: typing.Union[MetaOapg.properties.reason_for_access, None, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        postal_code: typing.Union[MetaOapg.properties.postal_code, None, str, ],
        region: typing.Union[MetaOapg.properties.region, None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Application':
        return super().__new__(
            cls,
            *_args,
            city=city,
            logo_url=logo_url,
            join_date=join_date,
            display_name=display_name,
            application_id=application_id,
            application_url=application_url,
            use_case=use_case,
            country_code=country_code,
            company_legal_name=company_legal_name,
            reason_for_access=reason_for_access,
            name=name,
            postal_code=postal_code,
            region=region,
            _configuration=_configuration,
            **kwargs,
        )
