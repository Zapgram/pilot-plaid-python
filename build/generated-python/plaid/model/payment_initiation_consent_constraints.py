# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class PaymentInitiationConsentConstraints(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Limitations that will be applied to payments initiated using the payment consent.
    """


    class MetaOapg:
        required = {
            "periodic_amounts",
            "max_payment_amount",
        }
        
        class properties:
        
            @staticmethod
            def max_payment_amount() -> typing.Type['PaymentConsentMaxPaymentAmount']:
                return PaymentConsentMaxPaymentAmount
            
            
            class periodic_amounts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['PaymentConsentPeriodicAmount']:
                        return PaymentConsentPeriodicAmount
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PaymentConsentPeriodicAmount'], typing.List['PaymentConsentPeriodicAmount']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'periodic_amounts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PaymentConsentPeriodicAmount':
                    return super().__getitem__(i)
        
            @staticmethod
            def valid_date_time() -> typing.Type['PaymentConsentValidDateTime']:
                return PaymentConsentValidDateTime
            __annotations__ = {
                "max_payment_amount": max_payment_amount,
                "periodic_amounts": periodic_amounts,
                "valid_date_time": valid_date_time,
            }
    
    periodic_amounts: MetaOapg.properties.periodic_amounts
    max_payment_amount: 'PaymentConsentMaxPaymentAmount'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_payment_amount"]) -> 'PaymentConsentMaxPaymentAmount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodic_amounts"]) -> MetaOapg.properties.periodic_amounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valid_date_time"]) -> 'PaymentConsentValidDateTime': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["max_payment_amount", "periodic_amounts", "valid_date_time", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_payment_amount"]) -> 'PaymentConsentMaxPaymentAmount': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodic_amounts"]) -> MetaOapg.properties.periodic_amounts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valid_date_time"]) -> typing.Union['PaymentConsentValidDateTime', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["max_payment_amount", "periodic_amounts", "valid_date_time", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        periodic_amounts: typing.Union[MetaOapg.properties.periodic_amounts, list, tuple, ],
        max_payment_amount: 'PaymentConsentMaxPaymentAmount',
        valid_date_time: typing.Union['PaymentConsentValidDateTime', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentInitiationConsentConstraints':
        return super().__new__(
            cls,
            *_args,
            periodic_amounts=periodic_amounts,
            max_payment_amount=max_payment_amount,
            valid_date_time=valid_date_time,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.payment_consent_max_payment_amount import PaymentConsentMaxPaymentAmount
from plaid.model.payment_consent_periodic_amount import PaymentConsentPeriodicAmount
from plaid.model.payment_consent_valid_date_time import PaymentConsentValidDateTime
