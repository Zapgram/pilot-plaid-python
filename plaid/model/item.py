# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class Item(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Metadata about the Item.
    """


    class MetaOapg:
        required = {
            "update_type",
            "webhook",
            "item_id",
            "billed_products",
            "consent_expiration_time",
            "error",
            "available_products",
        }
        
        class properties:
            item_id = schemas.StrSchema
            
            
            class webhook(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'webhook':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def error() -> typing.Type['PlaidError']:
                return PlaidError
            
            
            class available_products(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Products']:
                        return Products
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Products'], typing.List['Products']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'available_products':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Products':
                    return super().__getitem__(i)
            
            
            class billed_products(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Products']:
                        return Products
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Products'], typing.List['Products']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'billed_products':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Products':
                    return super().__getitem__(i)
            
            
            class consent_expiration_time(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'consent_expiration_time':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class update_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "background": "BACKGROUND",
                        "user_present_required": "USER_PRESENT_REQUIRED",
                    }
                
                @schemas.classproperty
                def BACKGROUND(cls):
                    return cls("background")
                
                @schemas.classproperty
                def USER_PRESENT_REQUIRED(cls):
                    return cls("user_present_required")
            
            
            class institution_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'institution_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class products(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Products']:
                        return Products
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Products'], typing.List['Products']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'products':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Products':
                    return super().__getitem__(i)
            
            
            class consented_products(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Products']:
                        return Products
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Products'], typing.List['Products']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'consented_products':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Products':
                    return super().__getitem__(i)
            __annotations__ = {
                "item_id": item_id,
                "webhook": webhook,
                "error": error,
                "available_products": available_products,
                "billed_products": billed_products,
                "consent_expiration_time": consent_expiration_time,
                "update_type": update_type,
                "institution_id": institution_id,
                "products": products,
                "consented_products": consented_products,
            }
        additional_properties = schemas.AnyTypeSchema
    
    update_type: MetaOapg.properties.update_type
    webhook: MetaOapg.properties.webhook
    item_id: MetaOapg.properties.item_id
    billed_products: MetaOapg.properties.billed_products
    consent_expiration_time: MetaOapg.properties.consent_expiration_time
    error: 'PlaidError'
    available_products: MetaOapg.properties.available_products
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_type"]) -> MetaOapg.properties.update_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhook"]) -> MetaOapg.properties.webhook: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billed_products"]) -> MetaOapg.properties.billed_products: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consent_expiration_time"]) -> MetaOapg.properties.consent_expiration_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> 'PlaidError': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["available_products"]) -> MetaOapg.properties.available_products: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_id"]) -> MetaOapg.properties.institution_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["products"]) -> MetaOapg.properties.products: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consented_products"]) -> MetaOapg.properties.consented_products: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["update_type"], typing_extensions.Literal["webhook"], typing_extensions.Literal["item_id"], typing_extensions.Literal["billed_products"], typing_extensions.Literal["consent_expiration_time"], typing_extensions.Literal["error"], typing_extensions.Literal["available_products"], typing_extensions.Literal["institution_id"], typing_extensions.Literal["products"], typing_extensions.Literal["consented_products"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_type"]) -> MetaOapg.properties.update_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhook"]) -> MetaOapg.properties.webhook: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billed_products"]) -> MetaOapg.properties.billed_products: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consent_expiration_time"]) -> MetaOapg.properties.consent_expiration_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> 'PlaidError': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["available_products"]) -> MetaOapg.properties.available_products: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_id"]) -> typing.Union[MetaOapg.properties.institution_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["products"]) -> typing.Union[MetaOapg.properties.products, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consented_products"]) -> typing.Union[MetaOapg.properties.consented_products, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["update_type"], typing_extensions.Literal["webhook"], typing_extensions.Literal["item_id"], typing_extensions.Literal["billed_products"], typing_extensions.Literal["consent_expiration_time"], typing_extensions.Literal["error"], typing_extensions.Literal["available_products"], typing_extensions.Literal["institution_id"], typing_extensions.Literal["products"], typing_extensions.Literal["consented_products"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        update_type: typing.Union[MetaOapg.properties.update_type, str, ],
        webhook: typing.Union[MetaOapg.properties.webhook, None, str, ],
        item_id: typing.Union[MetaOapg.properties.item_id, str, ],
        billed_products: typing.Union[MetaOapg.properties.billed_products, list, tuple, ],
        consent_expiration_time: typing.Union[MetaOapg.properties.consent_expiration_time, None, str, datetime, ],
        error: 'PlaidError',
        available_products: typing.Union[MetaOapg.properties.available_products, list, tuple, ],
        institution_id: typing.Union[MetaOapg.properties.institution_id, None, str, schemas.Unset] = schemas.unset,
        products: typing.Union[MetaOapg.properties.products, list, tuple, schemas.Unset] = schemas.unset,
        consented_products: typing.Union[MetaOapg.properties.consented_products, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'Item':
        return super().__new__(
            cls,
            *_args,
            update_type=update_type,
            webhook=webhook,
            item_id=item_id,
            billed_products=billed_products,
            consent_expiration_time=consent_expiration_time,
            error=error,
            available_products=available_products,
            institution_id=institution_id,
            products=products,
            consented_products=consented_products,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.plaid_error import PlaidError
from plaid.model.products import Products
