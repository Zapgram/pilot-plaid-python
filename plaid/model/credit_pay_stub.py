# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class CreditPayStub(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An object representing an end user's pay stub.
    """


    class MetaOapg:
        required = {
            "net_pay",
            "earnings",
            "pay_period_details",
            "employer",
            "deductions",
            "document_id",
            "document_metadata",
            "employee",
        }
        
        class properties:
        
            @staticmethod
            def deductions() -> typing.Type['CreditPayStubDeductions']:
                return CreditPayStubDeductions
            
            
            class document_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'document_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def document_metadata() -> typing.Type['CreditDocumentMetadata']:
                return CreditDocumentMetadata
        
            @staticmethod
            def earnings() -> typing.Type['CreditPayStubEarnings']:
                return CreditPayStubEarnings
        
            @staticmethod
            def employee() -> typing.Type['CreditPayStubEmployee']:
                return CreditPayStubEmployee
        
            @staticmethod
            def employer() -> typing.Type['CreditPayStubEmployer']:
                return CreditPayStubEmployer
        
            @staticmethod
            def net_pay() -> typing.Type['CreditPayStubNetPay']:
                return CreditPayStubNetPay
        
            @staticmethod
            def pay_period_details() -> typing.Type['PayStubPayPeriodDetails']:
                return PayStubPayPeriodDetails
            __annotations__ = {
                "deductions": deductions,
                "document_id": document_id,
                "document_metadata": document_metadata,
                "earnings": earnings,
                "employee": employee,
                "employer": employer,
                "net_pay": net_pay,
                "pay_period_details": pay_period_details,
            }
        additional_properties = schemas.AnyTypeSchema
    
    net_pay: 'CreditPayStubNetPay'
    earnings: 'CreditPayStubEarnings'
    pay_period_details: 'PayStubPayPeriodDetails'
    employer: 'CreditPayStubEmployer'
    deductions: 'CreditPayStubDeductions'
    document_id: MetaOapg.properties.document_id
    document_metadata: 'CreditDocumentMetadata'
    employee: 'CreditPayStubEmployee'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["net_pay"]) -> 'CreditPayStubNetPay': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["earnings"]) -> 'CreditPayStubEarnings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_period_details"]) -> 'PayStubPayPeriodDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employer"]) -> 'CreditPayStubEmployer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductions"]) -> 'CreditPayStubDeductions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document_id"]) -> MetaOapg.properties.document_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document_metadata"]) -> 'CreditDocumentMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee"]) -> 'CreditPayStubEmployee': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["net_pay"], typing_extensions.Literal["earnings"], typing_extensions.Literal["pay_period_details"], typing_extensions.Literal["employer"], typing_extensions.Literal["deductions"], typing_extensions.Literal["document_id"], typing_extensions.Literal["document_metadata"], typing_extensions.Literal["employee"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["net_pay"]) -> 'CreditPayStubNetPay': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["earnings"]) -> 'CreditPayStubEarnings': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_period_details"]) -> 'PayStubPayPeriodDetails': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employer"]) -> 'CreditPayStubEmployer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductions"]) -> 'CreditPayStubDeductions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document_id"]) -> MetaOapg.properties.document_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document_metadata"]) -> 'CreditDocumentMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee"]) -> 'CreditPayStubEmployee': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["net_pay"], typing_extensions.Literal["earnings"], typing_extensions.Literal["pay_period_details"], typing_extensions.Literal["employer"], typing_extensions.Literal["deductions"], typing_extensions.Literal["document_id"], typing_extensions.Literal["document_metadata"], typing_extensions.Literal["employee"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        net_pay: 'CreditPayStubNetPay',
        earnings: 'CreditPayStubEarnings',
        pay_period_details: 'PayStubPayPeriodDetails',
        employer: 'CreditPayStubEmployer',
        deductions: 'CreditPayStubDeductions',
        document_id: typing.Union[MetaOapg.properties.document_id, None, str, ],
        document_metadata: 'CreditDocumentMetadata',
        employee: 'CreditPayStubEmployee',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'CreditPayStub':
        return super().__new__(
            cls,
            *_args,
            net_pay=net_pay,
            earnings=earnings,
            pay_period_details=pay_period_details,
            employer=employer,
            deductions=deductions,
            document_id=document_id,
            document_metadata=document_metadata,
            employee=employee,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.credit_document_metadata import CreditDocumentMetadata
from plaid.model.credit_pay_stub_deductions import CreditPayStubDeductions
from plaid.model.credit_pay_stub_earnings import CreditPayStubEarnings
from plaid.model.credit_pay_stub_employee import CreditPayStubEmployee
from plaid.model.credit_pay_stub_employer import CreditPayStubEmployer
from plaid.model.credit_pay_stub_net_pay import CreditPayStubNetPay
from plaid.model.pay_stub_pay_period_details import PayStubPayPeriodDetails
