# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class WalletTransactionStatusUpdateWebhook(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Fired when the status of a wallet transaction has changed.
    """


    class MetaOapg:
        required = {
            "old_status",
            "transaction_id",
            "environment",
            "webhook_type",
            "new_status",
            "webhook_code",
            "timestamp",
        }
        
        class properties:
            webhook_type = schemas.StrSchema
            webhook_code = schemas.StrSchema
            transaction_id = schemas.StrSchema
        
            @staticmethod
            def new_status() -> typing.Type['WalletTransactionStatus']:
                return WalletTransactionStatus
        
            @staticmethod
            def old_status() -> typing.Type['WalletTransactionStatus']:
                return WalletTransactionStatus
            timestamp = schemas.DateTimeSchema
        
            @staticmethod
            def environment() -> typing.Type['WebhookEnvironmentValues']:
                return WebhookEnvironmentValues
            
            
            class payment_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payment_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            wallet_id = schemas.StrSchema
            __annotations__ = {
                "webhook_type": webhook_type,
                "webhook_code": webhook_code,
                "transaction_id": transaction_id,
                "new_status": new_status,
                "old_status": old_status,
                "timestamp": timestamp,
                "environment": environment,
                "payment_id": payment_id,
                "wallet_id": wallet_id,
            }
        additional_properties = schemas.AnyTypeSchema
    
    old_status: 'WalletTransactionStatus'
    transaction_id: MetaOapg.properties.transaction_id
    environment: 'WebhookEnvironmentValues'
    webhook_type: MetaOapg.properties.webhook_type
    new_status: 'WalletTransactionStatus'
    webhook_code: MetaOapg.properties.webhook_code
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["old_status"]) -> 'WalletTransactionStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_id"]) -> MetaOapg.properties.transaction_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment"]) -> 'WebhookEnvironmentValues': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhook_type"]) -> MetaOapg.properties.webhook_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["new_status"]) -> 'WalletTransactionStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhook_code"]) -> MetaOapg.properties.webhook_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_id"]) -> MetaOapg.properties.payment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wallet_id"]) -> MetaOapg.properties.wallet_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["old_status"], typing_extensions.Literal["transaction_id"], typing_extensions.Literal["environment"], typing_extensions.Literal["webhook_type"], typing_extensions.Literal["new_status"], typing_extensions.Literal["webhook_code"], typing_extensions.Literal["timestamp"], typing_extensions.Literal["payment_id"], typing_extensions.Literal["wallet_id"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["old_status"]) -> 'WalletTransactionStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_id"]) -> MetaOapg.properties.transaction_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment"]) -> 'WebhookEnvironmentValues': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhook_type"]) -> MetaOapg.properties.webhook_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["new_status"]) -> 'WalletTransactionStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhook_code"]) -> MetaOapg.properties.webhook_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_id"]) -> typing.Union[MetaOapg.properties.payment_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wallet_id"]) -> typing.Union[MetaOapg.properties.wallet_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["old_status"], typing_extensions.Literal["transaction_id"], typing_extensions.Literal["environment"], typing_extensions.Literal["webhook_type"], typing_extensions.Literal["new_status"], typing_extensions.Literal["webhook_code"], typing_extensions.Literal["timestamp"], typing_extensions.Literal["payment_id"], typing_extensions.Literal["wallet_id"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        old_status: 'WalletTransactionStatus',
        transaction_id: typing.Union[MetaOapg.properties.transaction_id, str, ],
        environment: 'WebhookEnvironmentValues',
        webhook_type: typing.Union[MetaOapg.properties.webhook_type, str, ],
        new_status: 'WalletTransactionStatus',
        webhook_code: typing.Union[MetaOapg.properties.webhook_code, str, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, datetime, ],
        payment_id: typing.Union[MetaOapg.properties.payment_id, None, str, schemas.Unset] = schemas.unset,
        wallet_id: typing.Union[MetaOapg.properties.wallet_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'WalletTransactionStatusUpdateWebhook':
        return super().__new__(
            cls,
            *_args,
            old_status=old_status,
            transaction_id=transaction_id,
            environment=environment,
            webhook_type=webhook_type,
            new_status=new_status,
            webhook_code=webhook_code,
            timestamp=timestamp,
            payment_id=payment_id,
            wallet_id=wallet_id,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.wallet_transaction_status import WalletTransactionStatus
from plaid.model.webhook_environment_values import WebhookEnvironmentValues
