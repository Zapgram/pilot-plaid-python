# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class SignalDecisionOutcome(
    schemas.EnumBase,
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The payment decision from the risk assessment.

`APPROVE`: approve the transaction without requiring further actions from your customers. For example, use this field if you are placing a standard hold for all the approved transactions before making funds available to your customers. You should also use this field if you decide to accelerate the fund availability for your customers.

`REVIEW`: the transaction requires manual review

`REJECT`: reject the transaction

`TAKE_OTHER_RISK_MEASURES`: for example, placing a longer hold on funds than those approved transactions or introducing customer frictions such as step-up verification/authentication

`NOT_EVALUATED`: if only logging the Signal results without using them

Possible values:  `APPROVE`, `REVIEW`, `REJECT`, `TAKE_OTHER_RISK_MEASURES`, `NOT_EVALUATED`

    """


    class MetaOapg:
        enum_value_to_name = {
            "APPROVE": "APPROVE",
            "REVIEW": "REVIEW",
            "REJECT": "REJECT",
            "TAKE_OTHER_RISK_MEASURES": "TAKE_OTHER_RISK_MEASURES",
            "NOT_EVALUATED": "NOT_EVALUATED",
        }
    
    @schemas.classproperty
    def APPROVE(cls):
        return cls("APPROVE")
    
    @schemas.classproperty
    def REVIEW(cls):
        return cls("REVIEW")
    
    @schemas.classproperty
    def REJECT(cls):
        return cls("REJECT")
    
    @schemas.classproperty
    def TAKE_OTHER_RISK_MEASURES(cls):
        return cls("TAKE_OTHER_RISK_MEASURES")
    
    @schemas.classproperty
    def NOT_EVALUATED(cls):
        return cls("NOT_EVALUATED")


    def __new__(
        cls,
        *_args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SignalDecisionOutcome':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
        )
