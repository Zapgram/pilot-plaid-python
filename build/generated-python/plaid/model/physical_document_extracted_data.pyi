# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class PhysicalDocumentExtractedData(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Data extracted from a user-submitted document.
    """


    class MetaOapg:
        required = {
            "id_number",
            "address",
            "issuing_region",
            "issuing_country",
            "date_of_birth",
            "category",
            "expiration_date",
        }
        
        class properties:
        
            @staticmethod
            def id_number() -> typing.Type['PhysicalDocumentIDNumber']:
                return PhysicalDocumentIDNumber
        
            @staticmethod
            def category() -> typing.Type['PhysicalDocumentCategory']:
                return PhysicalDocumentCategory
        
            @staticmethod
            def expiration_date() -> typing.Type['ISO8601DateNullable']:
                return ISO8601DateNullable
        
            @staticmethod
            def issuing_country() -> typing.Type['GenericCountryCode']:
                return GenericCountryCode
        
            @staticmethod
            def issuing_region() -> typing.Type['Region']:
                return Region
        
            @staticmethod
            def date_of_birth() -> typing.Type['IdentityVerificationDocumentISO8601DateOfBirth']:
                return IdentityVerificationDocumentISO8601DateOfBirth
        
            @staticmethod
            def address() -> typing.Type['IdentityVerificationDocumentAddressResponse']:
                return IdentityVerificationDocumentAddressResponse
            __annotations__ = {
                "id_number": id_number,
                "category": category,
                "expiration_date": expiration_date,
                "issuing_country": issuing_country,
                "issuing_region": issuing_region,
                "date_of_birth": date_of_birth,
                "address": address,
            }
        additional_properties = schemas.AnyTypeSchema

    
    id_number: 'PhysicalDocumentIDNumber'
    address: 'IdentityVerificationDocumentAddressResponse'
    issuing_region: 'Region'
    issuing_country: 'GenericCountryCode'
    date_of_birth: 'IdentityVerificationDocumentISO8601DateOfBirth'
    category: 'PhysicalDocumentCategory'
    expiration_date: 'ISO8601DateNullable'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id_number"]) -> 'PhysicalDocumentIDNumber': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'IdentityVerificationDocumentAddressResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issuing_region"]) -> 'Region': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issuing_country"]) -> 'GenericCountryCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_of_birth"]) -> 'IdentityVerificationDocumentISO8601DateOfBirth': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> 'PhysicalDocumentCategory': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiration_date"]) -> 'ISO8601DateNullable': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id_number"], typing_extensions.Literal["address"], typing_extensions.Literal["issuing_region"], typing_extensions.Literal["issuing_country"], typing_extensions.Literal["date_of_birth"], typing_extensions.Literal["category"], typing_extensions.Literal["expiration_date"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id_number"]) -> 'PhysicalDocumentIDNumber': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> 'IdentityVerificationDocumentAddressResponse': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issuing_region"]) -> 'Region': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issuing_country"]) -> 'GenericCountryCode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_of_birth"]) -> 'IdentityVerificationDocumentISO8601DateOfBirth': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> 'PhysicalDocumentCategory': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiration_date"]) -> 'ISO8601DateNullable': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id_number"], typing_extensions.Literal["address"], typing_extensions.Literal["issuing_region"], typing_extensions.Literal["issuing_country"], typing_extensions.Literal["date_of_birth"], typing_extensions.Literal["category"], typing_extensions.Literal["expiration_date"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'PhysicalDocumentExtractedData':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.generic_country_code import GenericCountryCode
from plaid.model.identity_verification_document_address_response import IdentityVerificationDocumentAddressResponse
from plaid.model.identity_verification_document_iso8601_date_of_birth import IdentityVerificationDocumentISO8601DateOfBirth
from plaid.model.iso8601_date_nullable import ISO8601DateNullable
from plaid.model.physical_document_category import PhysicalDocumentCategory
from plaid.model.physical_document_id_number import PhysicalDocumentIDNumber
from plaid.model.region import Region
