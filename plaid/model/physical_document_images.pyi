# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class PhysicalDocumentImages(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    URLs for downloading original and cropped images for this document submission. The URLs are designed to only allow downloading, not hot linking, so the URL will only serve the document image for 60 seconds before expiring. The expiration time is 60 seconds after the `GET` request for the associated Identity Verification attempt. A new expiring URL is generated with each request, so you can always rerequest the Identity Verification attempt if one of your URLs expires.
    """


    class MetaOapg:
        required = {
            "face",
            "original_front",
            "original_back",
            "cropped_back",
            "cropped_front",
        }
        
        class properties:
        
            @staticmethod
            def original_front() -> typing.Type['DocumentImageFront']:
                return DocumentImageFront
        
            @staticmethod
            def original_back() -> typing.Type['DocumentImageBack']:
                return DocumentImageBack
        
            @staticmethod
            def cropped_front() -> typing.Type['DocumentImageCroppedFront']:
                return DocumentImageCroppedFront
        
            @staticmethod
            def cropped_back() -> typing.Type['DocumentImageCroppedBack']:
                return DocumentImageCroppedBack
        
            @staticmethod
            def face() -> typing.Type['DocumentImageFace']:
                return DocumentImageFace
            __annotations__ = {
                "original_front": original_front,
                "original_back": original_back,
                "cropped_front": cropped_front,
                "cropped_back": cropped_back,
                "face": face,
            }
        additional_properties = schemas.AnyTypeSchema
    
    face: 'DocumentImageFace'
    original_front: 'DocumentImageFront'
    original_back: 'DocumentImageBack'
    cropped_back: 'DocumentImageCroppedBack'
    cropped_front: 'DocumentImageCroppedFront'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["face"]) -> 'DocumentImageFace': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["original_front"]) -> 'DocumentImageFront': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["original_back"]) -> 'DocumentImageBack': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cropped_back"]) -> 'DocumentImageCroppedBack': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cropped_front"]) -> 'DocumentImageCroppedFront': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["face"], typing_extensions.Literal["original_front"], typing_extensions.Literal["original_back"], typing_extensions.Literal["cropped_back"], typing_extensions.Literal["cropped_front"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["face"]) -> 'DocumentImageFace': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["original_front"]) -> 'DocumentImageFront': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["original_back"]) -> 'DocumentImageBack': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cropped_back"]) -> 'DocumentImageCroppedBack': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cropped_front"]) -> 'DocumentImageCroppedFront': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["face"], typing_extensions.Literal["original_front"], typing_extensions.Literal["original_back"], typing_extensions.Literal["cropped_back"], typing_extensions.Literal["cropped_front"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        face: 'DocumentImageFace',
        original_front: 'DocumentImageFront',
        original_back: 'DocumentImageBack',
        cropped_back: 'DocumentImageCroppedBack',
        cropped_front: 'DocumentImageCroppedFront',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'PhysicalDocumentImages':
        return super().__new__(
            cls,
            *_args,
            face=face,
            original_front=original_front,
            original_back=original_back,
            cropped_back=cropped_back,
            cropped_front=cropped_front,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.document_image_back import DocumentImageBack
from plaid.model.document_image_cropped_back import DocumentImageCroppedBack
from plaid.model.document_image_cropped_front import DocumentImageCroppedFront
from plaid.model.document_image_face import DocumentImageFace
from plaid.model.document_image_front import DocumentImageFront
