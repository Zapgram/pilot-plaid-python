# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class TransferIntentGet(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Represents a transfer intent within Transfer UI.
    """


    class MetaOapg:
        required = {
            "amount",
            "created",
            "guarantee_decision",
            "authorization_decision",
            "description",
            "authorization_decision_rationale",
            "failure_reason",
            "transfer_id",
            "funding_account_id",
            "mode",
            "guarantee_decision_rationale",
            "iso_currency_code",
            "origination_account_id",
            "id",
            "user",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            created = schemas.DateTimeSchema
        
            @staticmethod
            def status() -> typing.Type['TransferIntentStatus']:
                return TransferIntentStatus
            
            
            class transfer_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transfer_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def failure_reason() -> typing.Type['TransferIntentGetFailureReason']:
                return TransferIntentGetFailureReason
        
            @staticmethod
            def authorization_decision() -> typing.Type['TransferIntentAuthorizationDecision']:
                return TransferIntentAuthorizationDecision
        
            @staticmethod
            def authorization_decision_rationale() -> typing.Type['TransferAuthorizationDecisionRationale']:
                return TransferAuthorizationDecisionRationale
            origination_account_id = schemas.StrSchema
            funding_account_id = schemas.StrSchema
            amount = schemas.StrSchema
        
            @staticmethod
            def mode() -> typing.Type['TransferIntentCreateMode']:
                return TransferIntentCreateMode
        
            @staticmethod
            def user() -> typing.Type['TransferUserInResponse']:
                return TransferUserInResponse
            description = schemas.StrSchema
            iso_currency_code = schemas.StrSchema
        
            @staticmethod
            def guarantee_decision() -> typing.Type['TransferAuthorizationGuaranteeDecision']:
                return TransferAuthorizationGuaranteeDecision
        
            @staticmethod
            def guarantee_decision_rationale() -> typing.Type['TransferAuthorizationGuaranteeDecisionRationale']:
                return TransferAuthorizationGuaranteeDecisionRationale
            
            
            class account_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'account_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def network() -> typing.Type['TransferIntentCreateNetwork']:
                return TransferIntentCreateNetwork
        
            @staticmethod
            def ach_class() -> typing.Type['ACHClass']:
                return ACHClass
        
            @staticmethod
            def metadata() -> typing.Type['TransferMetadata']:
                return TransferMetadata
            
            
            class require_guarantee(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'require_guarantee':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "created": created,
                "status": status,
                "transfer_id": transfer_id,
                "failure_reason": failure_reason,
                "authorization_decision": authorization_decision,
                "authorization_decision_rationale": authorization_decision_rationale,
                "origination_account_id": origination_account_id,
                "funding_account_id": funding_account_id,
                "amount": amount,
                "mode": mode,
                "user": user,
                "description": description,
                "iso_currency_code": iso_currency_code,
                "guarantee_decision": guarantee_decision,
                "guarantee_decision_rationale": guarantee_decision_rationale,
                "account_id": account_id,
                "network": network,
                "ach_class": ach_class,
                "metadata": metadata,
                "require_guarantee": require_guarantee,
            }
        additional_properties = schemas.AnyTypeSchema
    
    amount: MetaOapg.properties.amount
    created: MetaOapg.properties.created
    guarantee_decision: 'TransferAuthorizationGuaranteeDecision'
    authorization_decision: 'TransferIntentAuthorizationDecision'
    description: MetaOapg.properties.description
    authorization_decision_rationale: 'TransferAuthorizationDecisionRationale'
    failure_reason: 'TransferIntentGetFailureReason'
    transfer_id: MetaOapg.properties.transfer_id
    funding_account_id: MetaOapg.properties.funding_account_id
    mode: 'TransferIntentCreateMode'
    guarantee_decision_rationale: 'TransferAuthorizationGuaranteeDecisionRationale'
    iso_currency_code: MetaOapg.properties.iso_currency_code
    origination_account_id: MetaOapg.properties.origination_account_id
    id: MetaOapg.properties.id
    user: 'TransferUserInResponse'
    status: 'TransferIntentStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guarantee_decision"]) -> 'TransferAuthorizationGuaranteeDecision': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorization_decision"]) -> 'TransferIntentAuthorizationDecision': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorization_decision_rationale"]) -> 'TransferAuthorizationDecisionRationale': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failure_reason"]) -> 'TransferIntentGetFailureReason': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transfer_id"]) -> MetaOapg.properties.transfer_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["funding_account_id"]) -> MetaOapg.properties.funding_account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mode"]) -> 'TransferIntentCreateMode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guarantee_decision_rationale"]) -> 'TransferAuthorizationGuaranteeDecisionRationale': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origination_account_id"]) -> MetaOapg.properties.origination_account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'TransferUserInResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'TransferIntentStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network"]) -> 'TransferIntentCreateNetwork': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ach_class"]) -> 'ACHClass': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'TransferMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["require_guarantee"]) -> MetaOapg.properties.require_guarantee: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount"], typing_extensions.Literal["created"], typing_extensions.Literal["guarantee_decision"], typing_extensions.Literal["authorization_decision"], typing_extensions.Literal["description"], typing_extensions.Literal["authorization_decision_rationale"], typing_extensions.Literal["failure_reason"], typing_extensions.Literal["transfer_id"], typing_extensions.Literal["funding_account_id"], typing_extensions.Literal["mode"], typing_extensions.Literal["guarantee_decision_rationale"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["origination_account_id"], typing_extensions.Literal["id"], typing_extensions.Literal["user"], typing_extensions.Literal["status"], typing_extensions.Literal["account_id"], typing_extensions.Literal["network"], typing_extensions.Literal["ach_class"], typing_extensions.Literal["metadata"], typing_extensions.Literal["require_guarantee"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guarantee_decision"]) -> 'TransferAuthorizationGuaranteeDecision': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorization_decision"]) -> 'TransferIntentAuthorizationDecision': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorization_decision_rationale"]) -> 'TransferAuthorizationDecisionRationale': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failure_reason"]) -> 'TransferIntentGetFailureReason': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transfer_id"]) -> MetaOapg.properties.transfer_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["funding_account_id"]) -> MetaOapg.properties.funding_account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mode"]) -> 'TransferIntentCreateMode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guarantee_decision_rationale"]) -> 'TransferAuthorizationGuaranteeDecisionRationale': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origination_account_id"]) -> MetaOapg.properties.origination_account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'TransferUserInResponse': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'TransferIntentStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> typing.Union[MetaOapg.properties.account_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network"]) -> typing.Union['TransferIntentCreateNetwork', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ach_class"]) -> typing.Union['ACHClass', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union['TransferMetadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["require_guarantee"]) -> typing.Union[MetaOapg.properties.require_guarantee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount"], typing_extensions.Literal["created"], typing_extensions.Literal["guarantee_decision"], typing_extensions.Literal["authorization_decision"], typing_extensions.Literal["description"], typing_extensions.Literal["authorization_decision_rationale"], typing_extensions.Literal["failure_reason"], typing_extensions.Literal["transfer_id"], typing_extensions.Literal["funding_account_id"], typing_extensions.Literal["mode"], typing_extensions.Literal["guarantee_decision_rationale"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["origination_account_id"], typing_extensions.Literal["id"], typing_extensions.Literal["user"], typing_extensions.Literal["status"], typing_extensions.Literal["account_id"], typing_extensions.Literal["network"], typing_extensions.Literal["ach_class"], typing_extensions.Literal["metadata"], typing_extensions.Literal["require_guarantee"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, str, ],
        created: typing.Union[MetaOapg.properties.created, str, datetime, ],
        guarantee_decision: 'TransferAuthorizationGuaranteeDecision',
        authorization_decision: 'TransferIntentAuthorizationDecision',
        description: typing.Union[MetaOapg.properties.description, str, ],
        authorization_decision_rationale: 'TransferAuthorizationDecisionRationale',
        failure_reason: 'TransferIntentGetFailureReason',
        transfer_id: typing.Union[MetaOapg.properties.transfer_id, None, str, ],
        funding_account_id: typing.Union[MetaOapg.properties.funding_account_id, str, ],
        mode: 'TransferIntentCreateMode',
        guarantee_decision_rationale: 'TransferAuthorizationGuaranteeDecisionRationale',
        iso_currency_code: typing.Union[MetaOapg.properties.iso_currency_code, str, ],
        origination_account_id: typing.Union[MetaOapg.properties.origination_account_id, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        user: 'TransferUserInResponse',
        status: 'TransferIntentStatus',
        account_id: typing.Union[MetaOapg.properties.account_id, None, str, schemas.Unset] = schemas.unset,
        network: typing.Union['TransferIntentCreateNetwork', schemas.Unset] = schemas.unset,
        ach_class: typing.Union['ACHClass', schemas.Unset] = schemas.unset,
        metadata: typing.Union['TransferMetadata', schemas.Unset] = schemas.unset,
        require_guarantee: typing.Union[MetaOapg.properties.require_guarantee, None, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'TransferIntentGet':
        return super().__new__(
            cls,
            *_args,
            amount=amount,
            created=created,
            guarantee_decision=guarantee_decision,
            authorization_decision=authorization_decision,
            description=description,
            authorization_decision_rationale=authorization_decision_rationale,
            failure_reason=failure_reason,
            transfer_id=transfer_id,
            funding_account_id=funding_account_id,
            mode=mode,
            guarantee_decision_rationale=guarantee_decision_rationale,
            iso_currency_code=iso_currency_code,
            origination_account_id=origination_account_id,
            id=id,
            user=user,
            status=status,
            account_id=account_id,
            network=network,
            ach_class=ach_class,
            metadata=metadata,
            require_guarantee=require_guarantee,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.ach_class import ACHClass
from plaid.model.transfer_authorization_decision_rationale import TransferAuthorizationDecisionRationale
from plaid.model.transfer_authorization_guarantee_decision import TransferAuthorizationGuaranteeDecision
from plaid.model.transfer_authorization_guarantee_decision_rationale import TransferAuthorizationGuaranteeDecisionRationale
from plaid.model.transfer_intent_authorization_decision import TransferIntentAuthorizationDecision
from plaid.model.transfer_intent_create_mode import TransferIntentCreateMode
from plaid.model.transfer_intent_create_network import TransferIntentCreateNetwork
from plaid.model.transfer_intent_get_failure_reason import TransferIntentGetFailureReason
from plaid.model.transfer_intent_status import TransferIntentStatus
from plaid.model.transfer_metadata import TransferMetadata
from plaid.model.transfer_user_in_response import TransferUserInResponse
