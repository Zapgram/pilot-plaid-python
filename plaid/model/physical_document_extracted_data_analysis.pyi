# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class PhysicalDocumentExtractedDataAnalysis(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Analysis of the data extracted from the submitted document.
    """


    class MetaOapg:
        required = {
            "issuing_country",
            "date_of_birth",
            "name",
            "expiration_date",
        }
        
        class properties:
        
            @staticmethod
            def name() -> typing.Type['DocumentNameMatchCode']:
                return DocumentNameMatchCode
        
            @staticmethod
            def date_of_birth() -> typing.Type['DocumentDateOfBirthMatchCode']:
                return DocumentDateOfBirthMatchCode
        
            @staticmethod
            def expiration_date() -> typing.Type['ExpirationDate']:
                return ExpirationDate
        
            @staticmethod
            def issuing_country() -> typing.Type['IssuingCountry']:
                return IssuingCountry
            __annotations__ = {
                "name": name,
                "date_of_birth": date_of_birth,
                "expiration_date": expiration_date,
                "issuing_country": issuing_country,
            }
        additional_properties = schemas.AnyTypeSchema

    
    issuing_country: 'IssuingCountry'
    date_of_birth: 'DocumentDateOfBirthMatchCode'
    name: 'DocumentNameMatchCode'
    expiration_date: 'ExpirationDate'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issuing_country"]) -> 'IssuingCountry': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_of_birth"]) -> 'DocumentDateOfBirthMatchCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> 'DocumentNameMatchCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiration_date"]) -> 'ExpirationDate': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["issuing_country"], typing_extensions.Literal["date_of_birth"], typing_extensions.Literal["name"], typing_extensions.Literal["expiration_date"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issuing_country"]) -> 'IssuingCountry': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_of_birth"]) -> 'DocumentDateOfBirthMatchCode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> 'DocumentNameMatchCode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiration_date"]) -> 'ExpirationDate': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["issuing_country"], typing_extensions.Literal["date_of_birth"], typing_extensions.Literal["name"], typing_extensions.Literal["expiration_date"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'PhysicalDocumentExtractedDataAnalysis':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.document_date_of_birth_match_code import DocumentDateOfBirthMatchCode
from plaid.model.document_name_match_code import DocumentNameMatchCode
from plaid.model.expiration_date import ExpirationDate
from plaid.model.issuing_country import IssuingCountry
