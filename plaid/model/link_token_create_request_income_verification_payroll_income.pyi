# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class LinkTokenCreateRequestIncomeVerificationPayrollIncome(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Specifies options for initializing Link for use with Payroll Income.
    """


    class MetaOapg:
        
        class properties:
            
            
            class flow_types(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IncomeVerificationPayrollFlowType']:
                        return IncomeVerificationPayrollFlowType
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'flow_types':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            is_update_mode = schemas.BoolSchema
            
            
            class item_id_to_update(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'item_id_to_update':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "flow_types": flow_types,
                "is_update_mode": is_update_mode,
                "item_id_to_update": item_id_to_update,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flow_types"]) -> MetaOapg.properties.flow_types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_update_mode"]) -> MetaOapg.properties.is_update_mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_id_to_update"]) -> MetaOapg.properties.item_id_to_update: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["flow_types", "is_update_mode", "item_id_to_update", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flow_types"]) -> typing.Union[MetaOapg.properties.flow_types, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_update_mode"]) -> typing.Union[MetaOapg.properties.is_update_mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_id_to_update"]) -> typing.Union[MetaOapg.properties.item_id_to_update, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["flow_types", "is_update_mode", "item_id_to_update", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        flow_types: typing.Union[MetaOapg.properties.flow_types, list, tuple, None, schemas.Unset] = schemas.unset,
        is_update_mode: typing.Union[MetaOapg.properties.is_update_mode, bool, schemas.Unset] = schemas.unset,
        item_id_to_update: typing.Union[MetaOapg.properties.item_id_to_update, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LinkTokenCreateRequestIncomeVerificationPayrollIncome':
        return super().__new__(
            cls,
            *_args,
            flow_types=flow_types,
            is_update_mode=is_update_mode,
            item_id_to_update=item_id_to_update,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.income_verification_payroll_flow_type import IncomeVerificationPayrollFlowType
