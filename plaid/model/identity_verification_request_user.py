# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class IdentityVerificationRequestUser(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    User information collected outside of Link, most likely via your own onboarding process.

Each of the following identity fields are optional:

`email_address`

`phone_number`

`date_of_birth`

`name`

`address`

`id_number`

Specifically, these fields are optional in that they can either be fully provided (satisfying every required field in their subschema) or omitted from the request entirely by not providing the key or value.
Providing these fields via the API will result in Link skipping the data collection process for the associated user. All verification steps enabled in the associated Identity Verification Template will still be run. Verification steps will either be run immediately, or once the user completes the `accept_tos` step, depending on the value provided to the `gave_consent` field.
    """


    class MetaOapg:
        
        class properties:
            email_address = schemas.StrSchema
        
            @staticmethod
            def phone_number() -> typing.Type['IdentityVerificationUserPhoneNumber']:
                return IdentityVerificationUserPhoneNumber
            date_of_birth = schemas.DateSchema
        
            @staticmethod
            def name() -> typing.Type['IdentityVerificationRequestUserName']:
                return IdentityVerificationRequestUserName
        
            @staticmethod
            def address() -> typing.Type['UserAddress']:
                return UserAddress
        
            @staticmethod
            def id_number() -> typing.Type['UserIDNumber']:
                return UserIDNumber
            __annotations__ = {
                "email_address": email_address,
                "phone_number": phone_number,
                "date_of_birth": date_of_birth,
                "name": name,
                "address": address,
                "id_number": id_number,
            }
        additional_properties = schemas.AnyTypeSchema

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email_address"]) -> MetaOapg.properties.email_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone_number"]) -> 'IdentityVerificationUserPhoneNumber': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_of_birth"]) -> MetaOapg.properties.date_of_birth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> 'IdentityVerificationRequestUserName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'UserAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id_number"]) -> 'UserIDNumber': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["email_address"], typing_extensions.Literal["phone_number"], typing_extensions.Literal["date_of_birth"], typing_extensions.Literal["name"], typing_extensions.Literal["address"], typing_extensions.Literal["id_number"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email_address"]) -> typing.Union[MetaOapg.properties.email_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone_number"]) -> typing.Union['IdentityVerificationUserPhoneNumber', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_of_birth"]) -> typing.Union[MetaOapg.properties.date_of_birth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union['IdentityVerificationRequestUserName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union['UserAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id_number"]) -> typing.Union['UserIDNumber', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email_address"], typing_extensions.Literal["phone_number"], typing_extensions.Literal["date_of_birth"], typing_extensions.Literal["name"], typing_extensions.Literal["address"], typing_extensions.Literal["id_number"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        email_address: typing.Union[MetaOapg.properties.email_address, str, schemas.Unset] = schemas.unset,
        phone_number: typing.Union['IdentityVerificationUserPhoneNumber', schemas.Unset] = schemas.unset,
        date_of_birth: typing.Union[MetaOapg.properties.date_of_birth, str, date, schemas.Unset] = schemas.unset,
        name: typing.Union['IdentityVerificationRequestUserName', schemas.Unset] = schemas.unset,
        address: typing.Union['UserAddress', schemas.Unset] = schemas.unset,
        id_number: typing.Union['UserIDNumber', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'IdentityVerificationRequestUser':
        return super().__new__(
            cls,
            *_args,
            email_address=email_address,
            phone_number=phone_number,
            date_of_birth=date_of_birth,
            name=name,
            address=address,
            id_number=id_number,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.identity_verification_request_user_name import IdentityVerificationRequestUserName
from plaid.model.identity_verification_user_phone_number import IdentityVerificationUserPhoneNumber
from plaid.model.user_address import UserAddress
from plaid.model.user_id_number import UserIDNumber
