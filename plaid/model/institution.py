# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class Institution(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Details relating to a specific financial institution
    """


    class MetaOapg:
        required = {
            "routing_numbers",
            "name",
            "country_codes",
            "oauth",
            "institution_id",
            "products",
        }
        
        class properties:
            institution_id = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class products(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Products']:
                        return Products
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Products'], typing.List['Products']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'products':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Products':
                    return super().__getitem__(i)
            
            
            class country_codes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CountryCode']:
                        return CountryCode
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CountryCode'], typing.List['CountryCode']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'country_codes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CountryCode':
                    return super().__getitem__(i)
            
            
            class routing_numbers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'routing_numbers':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            oauth = schemas.BoolSchema
            
            
            class url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class primary_color(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'primary_color':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class logo(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'logo':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class dtc_numbers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dtc_numbers':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def status() -> typing.Type['InstitutionStatus']:
                return InstitutionStatus
        
            @staticmethod
            def payment_initiation_metadata() -> typing.Type['PaymentInitiationMetadata']:
                return PaymentInitiationMetadata
        
            @staticmethod
            def auth_metadata() -> typing.Type['AuthMetadata']:
                return AuthMetadata
            __annotations__ = {
                "institution_id": institution_id,
                "name": name,
                "products": products,
                "country_codes": country_codes,
                "routing_numbers": routing_numbers,
                "oauth": oauth,
                "url": url,
                "primary_color": primary_color,
                "logo": logo,
                "dtc_numbers": dtc_numbers,
                "status": status,
                "payment_initiation_metadata": payment_initiation_metadata,
                "auth_metadata": auth_metadata,
            }
        additional_properties = schemas.AnyTypeSchema
    
    routing_numbers: MetaOapg.properties.routing_numbers
    name: MetaOapg.properties.name
    country_codes: MetaOapg.properties.country_codes
    oauth: MetaOapg.properties.oauth
    institution_id: MetaOapg.properties.institution_id
    products: MetaOapg.properties.products
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routing_numbers"]) -> MetaOapg.properties.routing_numbers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_codes"]) -> MetaOapg.properties.country_codes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oauth"]) -> MetaOapg.properties.oauth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_id"]) -> MetaOapg.properties.institution_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["products"]) -> MetaOapg.properties.products: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_color"]) -> MetaOapg.properties.primary_color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo"]) -> MetaOapg.properties.logo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dtc_numbers"]) -> MetaOapg.properties.dtc_numbers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'InstitutionStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_initiation_metadata"]) -> 'PaymentInitiationMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auth_metadata"]) -> 'AuthMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["routing_numbers"], typing_extensions.Literal["name"], typing_extensions.Literal["country_codes"], typing_extensions.Literal["oauth"], typing_extensions.Literal["institution_id"], typing_extensions.Literal["products"], typing_extensions.Literal["url"], typing_extensions.Literal["primary_color"], typing_extensions.Literal["logo"], typing_extensions.Literal["dtc_numbers"], typing_extensions.Literal["status"], typing_extensions.Literal["payment_initiation_metadata"], typing_extensions.Literal["auth_metadata"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routing_numbers"]) -> MetaOapg.properties.routing_numbers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_codes"]) -> MetaOapg.properties.country_codes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oauth"]) -> MetaOapg.properties.oauth: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_id"]) -> MetaOapg.properties.institution_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["products"]) -> MetaOapg.properties.products: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_color"]) -> typing.Union[MetaOapg.properties.primary_color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logo"]) -> typing.Union[MetaOapg.properties.logo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dtc_numbers"]) -> typing.Union[MetaOapg.properties.dtc_numbers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['InstitutionStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_initiation_metadata"]) -> typing.Union['PaymentInitiationMetadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auth_metadata"]) -> typing.Union['AuthMetadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["routing_numbers"], typing_extensions.Literal["name"], typing_extensions.Literal["country_codes"], typing_extensions.Literal["oauth"], typing_extensions.Literal["institution_id"], typing_extensions.Literal["products"], typing_extensions.Literal["url"], typing_extensions.Literal["primary_color"], typing_extensions.Literal["logo"], typing_extensions.Literal["dtc_numbers"], typing_extensions.Literal["status"], typing_extensions.Literal["payment_initiation_metadata"], typing_extensions.Literal["auth_metadata"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        routing_numbers: typing.Union[MetaOapg.properties.routing_numbers, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        country_codes: typing.Union[MetaOapg.properties.country_codes, list, tuple, ],
        oauth: typing.Union[MetaOapg.properties.oauth, bool, ],
        institution_id: typing.Union[MetaOapg.properties.institution_id, str, ],
        products: typing.Union[MetaOapg.properties.products, list, tuple, ],
        url: typing.Union[MetaOapg.properties.url, None, str, schemas.Unset] = schemas.unset,
        primary_color: typing.Union[MetaOapg.properties.primary_color, None, str, schemas.Unset] = schemas.unset,
        logo: typing.Union[MetaOapg.properties.logo, None, str, schemas.Unset] = schemas.unset,
        dtc_numbers: typing.Union[MetaOapg.properties.dtc_numbers, list, tuple, schemas.Unset] = schemas.unset,
        status: typing.Union['InstitutionStatus', schemas.Unset] = schemas.unset,
        payment_initiation_metadata: typing.Union['PaymentInitiationMetadata', schemas.Unset] = schemas.unset,
        auth_metadata: typing.Union['AuthMetadata', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'Institution':
        return super().__new__(
            cls,
            *_args,
            routing_numbers=routing_numbers,
            name=name,
            country_codes=country_codes,
            oauth=oauth,
            institution_id=institution_id,
            products=products,
            url=url,
            primary_color=primary_color,
            logo=logo,
            dtc_numbers=dtc_numbers,
            status=status,
            payment_initiation_metadata=payment_initiation_metadata,
            auth_metadata=auth_metadata,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.auth_metadata import AuthMetadata
from plaid.model.country_code import CountryCode
from plaid.model.institution_status import InstitutionStatus
from plaid.model.payment_initiation_metadata import PaymentInitiationMetadata
from plaid.model.products import Products
