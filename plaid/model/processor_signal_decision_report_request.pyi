# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class ProcessorSignalDecisionReportRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ProcessorSignalDecisionReportRequest defines the request schema for `/processor/signal/decision/report`
    """


    class MetaOapg:
        required = {
            "initiated",
            "processor_token",
            "client_transaction_id",
        }
        
        class properties:
            processor_token = schemas.StrSchema
            
            
            class client_transaction_id(
                schemas.StrSchema
            ):
                pass
            initiated = schemas.BoolSchema
            client_id = schemas.StrSchema
            secret = schemas.StrSchema
            
            
            class days_funds_on_hold(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'days_funds_on_hold':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def decision_outcome() -> typing.Type['SignalDecisionOutcome']:
                return SignalDecisionOutcome
        
            @staticmethod
            def payment_method() -> typing.Type['SignalPaymentMethod']:
                return SignalPaymentMethod
            
            
            class amount_instantly_available(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'amount_instantly_available':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "processor_token": processor_token,
                "client_transaction_id": client_transaction_id,
                "initiated": initiated,
                "client_id": client_id,
                "secret": secret,
                "days_funds_on_hold": days_funds_on_hold,
                "decision_outcome": decision_outcome,
                "payment_method": payment_method,
                "amount_instantly_available": amount_instantly_available,
            }
    
    initiated: MetaOapg.properties.initiated
    processor_token: MetaOapg.properties.processor_token
    client_transaction_id: MetaOapg.properties.client_transaction_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processor_token"]) -> MetaOapg.properties.processor_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_transaction_id"]) -> MetaOapg.properties.client_transaction_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initiated"]) -> MetaOapg.properties.initiated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_id"]) -> MetaOapg.properties.client_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_funds_on_hold"]) -> MetaOapg.properties.days_funds_on_hold: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["decision_outcome"]) -> 'SignalDecisionOutcome': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_method"]) -> 'SignalPaymentMethod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount_instantly_available"]) -> MetaOapg.properties.amount_instantly_available: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["processor_token", "client_transaction_id", "initiated", "client_id", "secret", "days_funds_on_hold", "decision_outcome", "payment_method", "amount_instantly_available", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processor_token"]) -> MetaOapg.properties.processor_token: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_transaction_id"]) -> MetaOapg.properties.client_transaction_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initiated"]) -> MetaOapg.properties.initiated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_id"]) -> typing.Union[MetaOapg.properties.client_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_funds_on_hold"]) -> typing.Union[MetaOapg.properties.days_funds_on_hold, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["decision_outcome"]) -> typing.Union['SignalDecisionOutcome', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_method"]) -> typing.Union['SignalPaymentMethod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount_instantly_available"]) -> typing.Union[MetaOapg.properties.amount_instantly_available, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["processor_token", "client_transaction_id", "initiated", "client_id", "secret", "days_funds_on_hold", "decision_outcome", "payment_method", "amount_instantly_available", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        initiated: typing.Union[MetaOapg.properties.initiated, bool, ],
        processor_token: typing.Union[MetaOapg.properties.processor_token, str, ],
        client_transaction_id: typing.Union[MetaOapg.properties.client_transaction_id, str, ],
        client_id: typing.Union[MetaOapg.properties.client_id, str, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        days_funds_on_hold: typing.Union[MetaOapg.properties.days_funds_on_hold, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        decision_outcome: typing.Union['SignalDecisionOutcome', schemas.Unset] = schemas.unset,
        payment_method: typing.Union['SignalPaymentMethod', schemas.Unset] = schemas.unset,
        amount_instantly_available: typing.Union[MetaOapg.properties.amount_instantly_available, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProcessorSignalDecisionReportRequest':
        return super().__new__(
            cls,
            *_args,
            initiated=initiated,
            processor_token=processor_token,
            client_transaction_id=client_transaction_id,
            client_id=client_id,
            secret=secret,
            days_funds_on_hold=days_funds_on_hold,
            decision_outcome=decision_outcome,
            payment_method=payment_method,
            amount_instantly_available=amount_instantly_available,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.signal_decision_outcome import SignalDecisionOutcome
from plaid.model.signal_payment_method import SignalPaymentMethod
