# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class ProductStatusBreakdown(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A detailed breakdown of the institution's performance for a request type. The values for `success`, `error_plaid`, and `error_institution` sum to 1. The time range used for calculating the breakdown may range from the most recent few minutes to the past six hours. In general, smaller institutions will show status that was calculated over a longer period of time. For Investment updates, which are refreshed less frequently, the period assessed may be 24 hours or more. For more details, see [Institution status details](https://plaid.com/docs/account/activity/#institution-status-details).
    """


    class MetaOapg:
        required = {
            "error_plaid",
            "success",
            "error_institution",
        }
        
        class properties:
            success = schemas.Float64Schema
            error_plaid = schemas.Float64Schema
            error_institution = schemas.Float64Schema
            
            
            class refresh_interval(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NORMAL(cls):
                    return cls("NORMAL")
                
                @schemas.classproperty
                def DELAYED(cls):
                    return cls("DELAYED")
                
                @schemas.classproperty
                def STOPPED(cls):
                    return cls("STOPPED")
            __annotations__ = {
                "success": success,
                "error_plaid": error_plaid,
                "error_institution": error_institution,
                "refresh_interval": refresh_interval,
            }
        additional_properties = schemas.AnyTypeSchema
    
    error_plaid: MetaOapg.properties.error_plaid
    success: MetaOapg.properties.success
    error_institution: MetaOapg.properties.error_institution
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_plaid"]) -> MetaOapg.properties.error_plaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["success"]) -> MetaOapg.properties.success: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_institution"]) -> MetaOapg.properties.error_institution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refresh_interval"]) -> MetaOapg.properties.refresh_interval: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["error_plaid"], typing_extensions.Literal["success"], typing_extensions.Literal["error_institution"], typing_extensions.Literal["refresh_interval"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_plaid"]) -> MetaOapg.properties.error_plaid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["success"]) -> MetaOapg.properties.success: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_institution"]) -> MetaOapg.properties.error_institution: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refresh_interval"]) -> typing.Union[MetaOapg.properties.refresh_interval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["error_plaid"], typing_extensions.Literal["success"], typing_extensions.Literal["error_institution"], typing_extensions.Literal["refresh_interval"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        error_plaid: typing.Union[MetaOapg.properties.error_plaid, decimal.Decimal, int, float, ],
        success: typing.Union[MetaOapg.properties.success, decimal.Decimal, int, float, ],
        error_institution: typing.Union[MetaOapg.properties.error_institution, decimal.Decimal, int, float, ],
        refresh_interval: typing.Union[MetaOapg.properties.refresh_interval, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'ProductStatusBreakdown':
        return super().__new__(
            cls,
            *_args,
            error_plaid=error_plaid,
            success=success,
            error_institution=error_institution,
            refresh_interval=refresh_interval,
            _configuration=_configuration,
            **kwargs,
        )
