# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class SecurityOverride(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Specify the security associated with the holding or investment transaction. When inputting custom security data to the Sandbox, Plaid will perform post-data-retrieval normalization and enrichment. These processes may cause the data returned by the Sandbox to be slightly different from the data you input. An ISO-4217 currency code and a security identifier (`ticker_symbol`, `cusip`, `isin`, or `sedol`) are required.
    """


    class MetaOapg:
        
        class properties:
            isin = schemas.StrSchema
            cusip = schemas.StrSchema
            sedol = schemas.StrSchema
            name = schemas.StrSchema
            ticker_symbol = schemas.StrSchema
            currency = schemas.StrSchema
            __annotations__ = {
                "isin": isin,
                "cusip": cusip,
                "sedol": sedol,
                "name": name,
                "ticker_symbol": ticker_symbol,
                "currency": currency,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isin"]) -> MetaOapg.properties.isin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cusip"]) -> MetaOapg.properties.cusip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sedol"]) -> MetaOapg.properties.sedol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ticker_symbol"]) -> MetaOapg.properties.ticker_symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["isin", "cusip", "sedol", "name", "ticker_symbol", "currency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isin"]) -> typing.Union[MetaOapg.properties.isin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cusip"]) -> typing.Union[MetaOapg.properties.cusip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sedol"]) -> typing.Union[MetaOapg.properties.sedol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ticker_symbol"]) -> typing.Union[MetaOapg.properties.ticker_symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["isin", "cusip", "sedol", "name", "ticker_symbol", "currency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        isin: typing.Union[MetaOapg.properties.isin, str, schemas.Unset] = schemas.unset,
        cusip: typing.Union[MetaOapg.properties.cusip, str, schemas.Unset] = schemas.unset,
        sedol: typing.Union[MetaOapg.properties.sedol, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        ticker_symbol: typing.Union[MetaOapg.properties.ticker_symbol, str, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SecurityOverride':
        return super().__new__(
            cls,
            *_args,
            isin=isin,
            cusip=cusip,
            sedol=sedol,
            name=name,
            ticker_symbol=ticker_symbol,
            currency=currency,
            _configuration=_configuration,
            **kwargs,
        )
