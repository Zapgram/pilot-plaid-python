# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class LinkTokenCreateRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    LinkTokenCreateRequest defines the request schema for `/link/token/create`
    """


    class MetaOapg:
        required = {
            "country_codes",
            "language",
            "client_name",
            "user",
        }
        
        class properties:
            client_name = schemas.StrSchema
            language = schemas.StrSchema
            
            
            class country_codes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['CountryCode']:
                        return CountryCode
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CountryCode'], typing.List['CountryCode']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'country_codes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CountryCode':
                    return super().__getitem__(i)
        
            @staticmethod
            def user() -> typing.Type['LinkTokenCreateRequestUser']:
                return LinkTokenCreateRequestUser
            client_id = schemas.StrSchema
            secret = schemas.StrSchema
            
            
            class products(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Products']:
                        return Products
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Products'], typing.List['Products']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'products':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Products':
                    return super().__getitem__(i)
            
            
            class additional_consented_products(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Products']:
                        return Products
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Products'], typing.List['Products']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'additional_consented_products':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Products':
                    return super().__getitem__(i)
            
            
            class required_if_supported_products(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Products']:
                        return Products
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Products'], typing.List['Products']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'required_if_supported_products':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Products':
                    return super().__getitem__(i)
            webhook = schemas.StrSchema
            access_token = schemas.StrSchema
            link_customization_name = schemas.StrSchema
            redirect_uri = schemas.StrSchema
            android_package_name = schemas.StrSchema
        
            @staticmethod
            def institution_data() -> typing.Type['LinkTokenCreateInstitutionData']:
                return LinkTokenCreateInstitutionData
        
            @staticmethod
            def account_filters() -> typing.Type['LinkTokenAccountFilters']:
                return LinkTokenAccountFilters
        
            @staticmethod
            def eu_config() -> typing.Type['LinkTokenEUConfig']:
                return LinkTokenEUConfig
            institution_id = schemas.StrSchema
        
            @staticmethod
            def payment_initiation() -> typing.Type['LinkTokenCreateRequestPaymentInitiation']:
                return LinkTokenCreateRequestPaymentInitiation
        
            @staticmethod
            def deposit_switch() -> typing.Type['LinkTokenCreateRequestDepositSwitch']:
                return LinkTokenCreateRequestDepositSwitch
        
            @staticmethod
            def employment() -> typing.Type['LinkTokenCreateRequestEmployment']:
                return LinkTokenCreateRequestEmployment
        
            @staticmethod
            def income_verification() -> typing.Type['LinkTokenCreateRequestIncomeVerification']:
                return LinkTokenCreateRequestIncomeVerification
        
            @staticmethod
            def auth() -> typing.Type['LinkTokenCreateRequestAuth']:
                return LinkTokenCreateRequestAuth
        
            @staticmethod
            def transfer() -> typing.Type['LinkTokenCreateRequestTransfer']:
                return LinkTokenCreateRequestTransfer
        
            @staticmethod
            def update() -> typing.Type['LinkTokenCreateRequestUpdate']:
                return LinkTokenCreateRequestUpdate
        
            @staticmethod
            def identity_verification() -> typing.Type['LinkTokenCreateRequestIdentityVerification']:
                return LinkTokenCreateRequestIdentityVerification
            user_token = schemas.StrSchema
        
            @staticmethod
            def investments() -> typing.Type['LinkTokenInvestments']:
                return LinkTokenInvestments
        
            @staticmethod
            def investments_auth() -> typing.Type['LinkTokenInvestmentsAuth']:
                return LinkTokenInvestmentsAuth
            __annotations__ = {
                "client_name": client_name,
                "language": language,
                "country_codes": country_codes,
                "user": user,
                "client_id": client_id,
                "secret": secret,
                "products": products,
                "additional_consented_products": additional_consented_products,
                "required_if_supported_products": required_if_supported_products,
                "webhook": webhook,
                "access_token": access_token,
                "link_customization_name": link_customization_name,
                "redirect_uri": redirect_uri,
                "android_package_name": android_package_name,
                "institution_data": institution_data,
                "account_filters": account_filters,
                "eu_config": eu_config,
                "institution_id": institution_id,
                "payment_initiation": payment_initiation,
                "deposit_switch": deposit_switch,
                "employment": employment,
                "income_verification": income_verification,
                "auth": auth,
                "transfer": transfer,
                "update": update,
                "identity_verification": identity_verification,
                "user_token": user_token,
                "investments": investments,
                "investments_auth": investments_auth,
            }
    
    country_codes: MetaOapg.properties.country_codes
    language: MetaOapg.properties.language
    client_name: MetaOapg.properties.client_name
    user: 'LinkTokenCreateRequestUser'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_name"]) -> MetaOapg.properties.client_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_codes"]) -> MetaOapg.properties.country_codes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'LinkTokenCreateRequestUser': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_id"]) -> MetaOapg.properties.client_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["products"]) -> MetaOapg.properties.products: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additional_consented_products"]) -> MetaOapg.properties.additional_consented_products: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required_if_supported_products"]) -> MetaOapg.properties.required_if_supported_products: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhook"]) -> MetaOapg.properties.webhook: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link_customization_name"]) -> MetaOapg.properties.link_customization_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["redirect_uri"]) -> MetaOapg.properties.redirect_uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["android_package_name"]) -> MetaOapg.properties.android_package_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_data"]) -> 'LinkTokenCreateInstitutionData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_filters"]) -> 'LinkTokenAccountFilters': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eu_config"]) -> 'LinkTokenEUConfig': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_id"]) -> MetaOapg.properties.institution_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_initiation"]) -> 'LinkTokenCreateRequestPaymentInitiation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deposit_switch"]) -> 'LinkTokenCreateRequestDepositSwitch': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employment"]) -> 'LinkTokenCreateRequestEmployment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["income_verification"]) -> 'LinkTokenCreateRequestIncomeVerification': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auth"]) -> 'LinkTokenCreateRequestAuth': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transfer"]) -> 'LinkTokenCreateRequestTransfer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update"]) -> 'LinkTokenCreateRequestUpdate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identity_verification"]) -> 'LinkTokenCreateRequestIdentityVerification': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_token"]) -> MetaOapg.properties.user_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investments"]) -> 'LinkTokenInvestments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investments_auth"]) -> 'LinkTokenInvestmentsAuth': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["client_name", "language", "country_codes", "user", "client_id", "secret", "products", "additional_consented_products", "required_if_supported_products", "webhook", "access_token", "link_customization_name", "redirect_uri", "android_package_name", "institution_data", "account_filters", "eu_config", "institution_id", "payment_initiation", "deposit_switch", "employment", "income_verification", "auth", "transfer", "update", "identity_verification", "user_token", "investments", "investments_auth", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_name"]) -> MetaOapg.properties.client_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_codes"]) -> MetaOapg.properties.country_codes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'LinkTokenCreateRequestUser': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_id"]) -> typing.Union[MetaOapg.properties.client_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["products"]) -> typing.Union[MetaOapg.properties.products, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additional_consented_products"]) -> typing.Union[MetaOapg.properties.additional_consented_products, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required_if_supported_products"]) -> typing.Union[MetaOapg.properties.required_if_supported_products, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhook"]) -> typing.Union[MetaOapg.properties.webhook, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_token"]) -> typing.Union[MetaOapg.properties.access_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link_customization_name"]) -> typing.Union[MetaOapg.properties.link_customization_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["redirect_uri"]) -> typing.Union[MetaOapg.properties.redirect_uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["android_package_name"]) -> typing.Union[MetaOapg.properties.android_package_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_data"]) -> typing.Union['LinkTokenCreateInstitutionData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_filters"]) -> typing.Union['LinkTokenAccountFilters', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eu_config"]) -> typing.Union['LinkTokenEUConfig', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_id"]) -> typing.Union[MetaOapg.properties.institution_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_initiation"]) -> typing.Union['LinkTokenCreateRequestPaymentInitiation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deposit_switch"]) -> typing.Union['LinkTokenCreateRequestDepositSwitch', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employment"]) -> typing.Union['LinkTokenCreateRequestEmployment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["income_verification"]) -> typing.Union['LinkTokenCreateRequestIncomeVerification', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auth"]) -> typing.Union['LinkTokenCreateRequestAuth', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transfer"]) -> typing.Union['LinkTokenCreateRequestTransfer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update"]) -> typing.Union['LinkTokenCreateRequestUpdate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identity_verification"]) -> typing.Union['LinkTokenCreateRequestIdentityVerification', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_token"]) -> typing.Union[MetaOapg.properties.user_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investments"]) -> typing.Union['LinkTokenInvestments', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investments_auth"]) -> typing.Union['LinkTokenInvestmentsAuth', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["client_name", "language", "country_codes", "user", "client_id", "secret", "products", "additional_consented_products", "required_if_supported_products", "webhook", "access_token", "link_customization_name", "redirect_uri", "android_package_name", "institution_data", "account_filters", "eu_config", "institution_id", "payment_initiation", "deposit_switch", "employment", "income_verification", "auth", "transfer", "update", "identity_verification", "user_token", "investments", "investments_auth", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        country_codes: typing.Union[MetaOapg.properties.country_codes, list, tuple, ],
        language: typing.Union[MetaOapg.properties.language, str, ],
        client_name: typing.Union[MetaOapg.properties.client_name, str, ],
        user: 'LinkTokenCreateRequestUser',
        client_id: typing.Union[MetaOapg.properties.client_id, str, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        products: typing.Union[MetaOapg.properties.products, list, tuple, schemas.Unset] = schemas.unset,
        additional_consented_products: typing.Union[MetaOapg.properties.additional_consented_products, list, tuple, schemas.Unset] = schemas.unset,
        required_if_supported_products: typing.Union[MetaOapg.properties.required_if_supported_products, list, tuple, schemas.Unset] = schemas.unset,
        webhook: typing.Union[MetaOapg.properties.webhook, str, schemas.Unset] = schemas.unset,
        access_token: typing.Union[MetaOapg.properties.access_token, str, schemas.Unset] = schemas.unset,
        link_customization_name: typing.Union[MetaOapg.properties.link_customization_name, str, schemas.Unset] = schemas.unset,
        redirect_uri: typing.Union[MetaOapg.properties.redirect_uri, str, schemas.Unset] = schemas.unset,
        android_package_name: typing.Union[MetaOapg.properties.android_package_name, str, schemas.Unset] = schemas.unset,
        institution_data: typing.Union['LinkTokenCreateInstitutionData', schemas.Unset] = schemas.unset,
        account_filters: typing.Union['LinkTokenAccountFilters', schemas.Unset] = schemas.unset,
        eu_config: typing.Union['LinkTokenEUConfig', schemas.Unset] = schemas.unset,
        institution_id: typing.Union[MetaOapg.properties.institution_id, str, schemas.Unset] = schemas.unset,
        payment_initiation: typing.Union['LinkTokenCreateRequestPaymentInitiation', schemas.Unset] = schemas.unset,
        deposit_switch: typing.Union['LinkTokenCreateRequestDepositSwitch', schemas.Unset] = schemas.unset,
        employment: typing.Union['LinkTokenCreateRequestEmployment', schemas.Unset] = schemas.unset,
        income_verification: typing.Union['LinkTokenCreateRequestIncomeVerification', schemas.Unset] = schemas.unset,
        auth: typing.Union['LinkTokenCreateRequestAuth', schemas.Unset] = schemas.unset,
        transfer: typing.Union['LinkTokenCreateRequestTransfer', schemas.Unset] = schemas.unset,
        update: typing.Union['LinkTokenCreateRequestUpdate', schemas.Unset] = schemas.unset,
        identity_verification: typing.Union['LinkTokenCreateRequestIdentityVerification', schemas.Unset] = schemas.unset,
        user_token: typing.Union[MetaOapg.properties.user_token, str, schemas.Unset] = schemas.unset,
        investments: typing.Union['LinkTokenInvestments', schemas.Unset] = schemas.unset,
        investments_auth: typing.Union['LinkTokenInvestmentsAuth', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LinkTokenCreateRequest':
        return super().__new__(
            cls,
            *_args,
            country_codes=country_codes,
            language=language,
            client_name=client_name,
            user=user,
            client_id=client_id,
            secret=secret,
            products=products,
            additional_consented_products=additional_consented_products,
            required_if_supported_products=required_if_supported_products,
            webhook=webhook,
            access_token=access_token,
            link_customization_name=link_customization_name,
            redirect_uri=redirect_uri,
            android_package_name=android_package_name,
            institution_data=institution_data,
            account_filters=account_filters,
            eu_config=eu_config,
            institution_id=institution_id,
            payment_initiation=payment_initiation,
            deposit_switch=deposit_switch,
            employment=employment,
            income_verification=income_verification,
            auth=auth,
            transfer=transfer,
            update=update,
            identity_verification=identity_verification,
            user_token=user_token,
            investments=investments,
            investments_auth=investments_auth,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.country_code import CountryCode
from plaid.model.link_token_account_filters import LinkTokenAccountFilters
from plaid.model.link_token_create_institution_data import LinkTokenCreateInstitutionData
from plaid.model.link_token_create_request_auth import LinkTokenCreateRequestAuth
from plaid.model.link_token_create_request_deposit_switch import LinkTokenCreateRequestDepositSwitch
from plaid.model.link_token_create_request_employment import LinkTokenCreateRequestEmployment
from plaid.model.link_token_create_request_identity_verification import LinkTokenCreateRequestIdentityVerification
from plaid.model.link_token_create_request_income_verification import LinkTokenCreateRequestIncomeVerification
from plaid.model.link_token_create_request_payment_initiation import LinkTokenCreateRequestPaymentInitiation
from plaid.model.link_token_create_request_transfer import LinkTokenCreateRequestTransfer
from plaid.model.link_token_create_request_update import LinkTokenCreateRequestUpdate
from plaid.model.link_token_create_request_user import LinkTokenCreateRequestUser
from plaid.model.link_token_eu_config import LinkTokenEUConfig
from plaid.model.link_token_investments import LinkTokenInvestments
from plaid.model.link_token_investments_auth import LinkTokenInvestmentsAuth
from plaid.model.products import Products
