# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class LastDataAccessTimes(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Describes the last time each datatype was accessed by an application.
    """


    class MetaOapg:
        required = {
            "account_routing_number",
            "payroll_info",
            "transaction_risk_info",
            "account_balance_info",
            "credit_and_loans",
            "contact_details",
            "investments",
            "transactions",
            "application_id",
        }
        
        class properties:
            application_id = schemas.StrSchema
            
            
            class account_balance_info(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'account_balance_info':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class account_routing_number(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'account_routing_number':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class contact_details(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contact_details':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class transactions(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transactions':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class credit_and_loans(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'credit_and_loans':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class investments(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'investments':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class payroll_info(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payroll_info':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class transaction_risk_info(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transaction_risk_info':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "application_id": application_id,
                "account_balance_info": account_balance_info,
                "account_routing_number": account_routing_number,
                "contact_details": contact_details,
                "transactions": transactions,
                "credit_and_loans": credit_and_loans,
                "investments": investments,
                "payroll_info": payroll_info,
                "transaction_risk_info": transaction_risk_info,
            }
        additional_properties = schemas.AnyTypeSchema
    
    account_routing_number: MetaOapg.properties.account_routing_number
    payroll_info: MetaOapg.properties.payroll_info
    transaction_risk_info: MetaOapg.properties.transaction_risk_info
    account_balance_info: MetaOapg.properties.account_balance_info
    credit_and_loans: MetaOapg.properties.credit_and_loans
    contact_details: MetaOapg.properties.contact_details
    investments: MetaOapg.properties.investments
    transactions: MetaOapg.properties.transactions
    application_id: MetaOapg.properties.application_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_routing_number"]) -> MetaOapg.properties.account_routing_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payroll_info"]) -> MetaOapg.properties.payroll_info: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_risk_info"]) -> MetaOapg.properties.transaction_risk_info: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_balance_info"]) -> MetaOapg.properties.account_balance_info: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credit_and_loans"]) -> MetaOapg.properties.credit_and_loans: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contact_details"]) -> MetaOapg.properties.contact_details: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investments"]) -> MetaOapg.properties.investments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["application_id"]) -> MetaOapg.properties.application_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account_routing_number"], typing_extensions.Literal["payroll_info"], typing_extensions.Literal["transaction_risk_info"], typing_extensions.Literal["account_balance_info"], typing_extensions.Literal["credit_and_loans"], typing_extensions.Literal["contact_details"], typing_extensions.Literal["investments"], typing_extensions.Literal["transactions"], typing_extensions.Literal["application_id"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_routing_number"]) -> MetaOapg.properties.account_routing_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payroll_info"]) -> MetaOapg.properties.payroll_info: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_risk_info"]) -> MetaOapg.properties.transaction_risk_info: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_balance_info"]) -> MetaOapg.properties.account_balance_info: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credit_and_loans"]) -> MetaOapg.properties.credit_and_loans: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contact_details"]) -> MetaOapg.properties.contact_details: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investments"]) -> MetaOapg.properties.investments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["application_id"]) -> MetaOapg.properties.application_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account_routing_number"], typing_extensions.Literal["payroll_info"], typing_extensions.Literal["transaction_risk_info"], typing_extensions.Literal["account_balance_info"], typing_extensions.Literal["credit_and_loans"], typing_extensions.Literal["contact_details"], typing_extensions.Literal["investments"], typing_extensions.Literal["transactions"], typing_extensions.Literal["application_id"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        account_routing_number: typing.Union[MetaOapg.properties.account_routing_number, None, str, datetime, ],
        payroll_info: typing.Union[MetaOapg.properties.payroll_info, None, str, datetime, ],
        transaction_risk_info: typing.Union[MetaOapg.properties.transaction_risk_info, None, str, datetime, ],
        account_balance_info: typing.Union[MetaOapg.properties.account_balance_info, None, str, datetime, ],
        credit_and_loans: typing.Union[MetaOapg.properties.credit_and_loans, None, str, datetime, ],
        contact_details: typing.Union[MetaOapg.properties.contact_details, None, str, datetime, ],
        investments: typing.Union[MetaOapg.properties.investments, None, str, datetime, ],
        transactions: typing.Union[MetaOapg.properties.transactions, None, str, datetime, ],
        application_id: typing.Union[MetaOapg.properties.application_id, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'LastDataAccessTimes':
        return super().__new__(
            cls,
            *_args,
            account_routing_number=account_routing_number,
            payroll_info=payroll_info,
            transaction_risk_info=transaction_risk_info,
            account_balance_info=account_balance_info,
            credit_and_loans=credit_and_loans,
            contact_details=contact_details,
            investments=investments,
            transactions=transactions,
            application_id=application_id,
            _configuration=_configuration,
            **kwargs,
        )
