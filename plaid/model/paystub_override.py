# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class PaystubOverride(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An object representing data from a paystub.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def employer() -> typing.Type['PaystubOverrideEmployer']:
                return PaystubOverrideEmployer
        
            @staticmethod
            def employee() -> typing.Type['PaystubOverrideEmployee']:
                return PaystubOverrideEmployee
            
            
            class income_breakdown(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IncomeBreakdown']:
                        return IncomeBreakdown
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['IncomeBreakdown'], typing.List['IncomeBreakdown']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'income_breakdown':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IncomeBreakdown':
                    return super().__getitem__(i)
        
            @staticmethod
            def pay_period_details() -> typing.Type['PayPeriodDetails']:
                return PayPeriodDetails
            __annotations__ = {
                "employer": employer,
                "employee": employee,
                "income_breakdown": income_breakdown,
                "pay_period_details": pay_period_details,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employer"]) -> 'PaystubOverrideEmployer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee"]) -> 'PaystubOverrideEmployee': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["income_breakdown"]) -> MetaOapg.properties.income_breakdown: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_period_details"]) -> 'PayPeriodDetails': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employer", "employee", "income_breakdown", "pay_period_details", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employer"]) -> typing.Union['PaystubOverrideEmployer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee"]) -> typing.Union['PaystubOverrideEmployee', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["income_breakdown"]) -> typing.Union[MetaOapg.properties.income_breakdown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_period_details"]) -> typing.Union['PayPeriodDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employer", "employee", "income_breakdown", "pay_period_details", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        employer: typing.Union['PaystubOverrideEmployer', schemas.Unset] = schemas.unset,
        employee: typing.Union['PaystubOverrideEmployee', schemas.Unset] = schemas.unset,
        income_breakdown: typing.Union[MetaOapg.properties.income_breakdown, list, tuple, schemas.Unset] = schemas.unset,
        pay_period_details: typing.Union['PayPeriodDetails', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaystubOverride':
        return super().__new__(
            cls,
            *_args,
            employer=employer,
            employee=employee,
            income_breakdown=income_breakdown,
            pay_period_details=pay_period_details,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.income_breakdown import IncomeBreakdown
from plaid.model.pay_period_details import PayPeriodDetails
from plaid.model.paystub_override_employee import PaystubOverrideEmployee
from plaid.model.paystub_override_employer import PaystubOverrideEmployer
