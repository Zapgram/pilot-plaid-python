# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class Credit1099(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An object representing an end user's 1099 tax form
    """


    class MetaOapg:
        required = {
            "document_id",
        }
        
        class properties:
            
            
            class document_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'document_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def document_metadata() -> typing.Type['CreditDocumentMetadata']:
                return CreditDocumentMetadata
        
            @staticmethod
            def form_1099_type() -> typing.Type['Form1099Type']:
                return Form1099Type
        
            @staticmethod
            def recipient() -> typing.Type['Credit1099Recipient']:
                return Credit1099Recipient
        
            @staticmethod
            def payer() -> typing.Type['Credit1099Payer']:
                return Credit1099Payer
        
            @staticmethod
            def filer() -> typing.Type['Credit1099Filer']:
                return Credit1099Filer
            
            
            class tax_year(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tax_year':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class rents(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rents':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class royalties(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'royalties':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class other_income(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'other_income':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class federal_income_tax_withheld(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'federal_income_tax_withheld':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class fishing_boat_proceeds(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fishing_boat_proceeds':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class medical_and_healthcare_payments(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'medical_and_healthcare_payments':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class nonemployee_compensation(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nonemployee_compensation':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class substitute_payments_in_lieu_of_dividends_or_interest(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'substitute_payments_in_lieu_of_dividends_or_interest':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class crop_insurance_proceeds(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'crop_insurance_proceeds':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class excess_golden_parachute_payments(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'excess_golden_parachute_payments':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class gross_proceeds_paid_to_an_attorney(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gross_proceeds_paid_to_an_attorney':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class section_409a_deferrals(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'section_409a_deferrals':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class section_409a_income(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'section_409a_income':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class state_tax_withheld(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state_tax_withheld':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class state_tax_withheld_lower(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state_tax_withheld_lower':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class payer_state_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payer_state_number':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class payer_state_number_lower(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payer_state_number_lower':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class state_income(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state_income':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class state_income_lower(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state_income_lower':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class transactions_reported(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transactions_reported':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class pse_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pse_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class pse_telephone_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pse_telephone_number':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class gross_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gross_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class card_not_present_transaction(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'card_not_present_transaction':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class merchant_category_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'merchant_category_code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class number_of_payment_transactions(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'number_of_payment_transactions':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class january_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'january_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class february_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'february_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class march_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'march_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class april_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'april_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class may_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'may_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class june_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'june_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class july_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'july_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class august_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'august_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class september_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'september_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class october_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'october_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class november_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'november_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class december_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'december_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class primary_state(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'primary_state':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class secondary_state(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'secondary_state':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class primary_state_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'primary_state_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class secondary_state_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'secondary_state_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class primary_state_income_tax(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'primary_state_income_tax':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class secondary_state_income_tax(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'secondary_state_income_tax':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "document_id": document_id,
                "document_metadata": document_metadata,
                "form_1099_type": form_1099_type,
                "recipient": recipient,
                "payer": payer,
                "filer": filer,
                "tax_year": tax_year,
                "rents": rents,
                "royalties": royalties,
                "other_income": other_income,
                "federal_income_tax_withheld": federal_income_tax_withheld,
                "fishing_boat_proceeds": fishing_boat_proceeds,
                "medical_and_healthcare_payments": medical_and_healthcare_payments,
                "nonemployee_compensation": nonemployee_compensation,
                "substitute_payments_in_lieu_of_dividends_or_interest": substitute_payments_in_lieu_of_dividends_or_interest,
                "payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer": payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer,
                "crop_insurance_proceeds": crop_insurance_proceeds,
                "excess_golden_parachute_payments": excess_golden_parachute_payments,
                "gross_proceeds_paid_to_an_attorney": gross_proceeds_paid_to_an_attorney,
                "section_409a_deferrals": section_409a_deferrals,
                "section_409a_income": section_409a_income,
                "state_tax_withheld": state_tax_withheld,
                "state_tax_withheld_lower": state_tax_withheld_lower,
                "payer_state_number": payer_state_number,
                "payer_state_number_lower": payer_state_number_lower,
                "state_income": state_income,
                "state_income_lower": state_income_lower,
                "transactions_reported": transactions_reported,
                "pse_name": pse_name,
                "pse_telephone_number": pse_telephone_number,
                "gross_amount": gross_amount,
                "card_not_present_transaction": card_not_present_transaction,
                "merchant_category_code": merchant_category_code,
                "number_of_payment_transactions": number_of_payment_transactions,
                "january_amount": january_amount,
                "february_amount": february_amount,
                "march_amount": march_amount,
                "april_amount": april_amount,
                "may_amount": may_amount,
                "june_amount": june_amount,
                "july_amount": july_amount,
                "august_amount": august_amount,
                "september_amount": september_amount,
                "october_amount": october_amount,
                "november_amount": november_amount,
                "december_amount": december_amount,
                "primary_state": primary_state,
                "secondary_state": secondary_state,
                "primary_state_id": primary_state_id,
                "secondary_state_id": secondary_state_id,
                "primary_state_income_tax": primary_state_income_tax,
                "secondary_state_income_tax": secondary_state_income_tax,
            }
        additional_properties = schemas.AnyTypeSchema
    
    document_id: MetaOapg.properties.document_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document_id"]) -> MetaOapg.properties.document_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document_metadata"]) -> 'CreditDocumentMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["form_1099_type"]) -> 'Form1099Type': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipient"]) -> 'Credit1099Recipient': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payer"]) -> 'Credit1099Payer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filer"]) -> 'Credit1099Filer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_year"]) -> MetaOapg.properties.tax_year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rents"]) -> MetaOapg.properties.rents: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["royalties"]) -> MetaOapg.properties.royalties: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other_income"]) -> MetaOapg.properties.other_income: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["federal_income_tax_withheld"]) -> MetaOapg.properties.federal_income_tax_withheld: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fishing_boat_proceeds"]) -> MetaOapg.properties.fishing_boat_proceeds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["medical_and_healthcare_payments"]) -> MetaOapg.properties.medical_and_healthcare_payments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nonemployee_compensation"]) -> MetaOapg.properties.nonemployee_compensation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["substitute_payments_in_lieu_of_dividends_or_interest"]) -> MetaOapg.properties.substitute_payments_in_lieu_of_dividends_or_interest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer"]) -> MetaOapg.properties.payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crop_insurance_proceeds"]) -> MetaOapg.properties.crop_insurance_proceeds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excess_golden_parachute_payments"]) -> MetaOapg.properties.excess_golden_parachute_payments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gross_proceeds_paid_to_an_attorney"]) -> MetaOapg.properties.gross_proceeds_paid_to_an_attorney: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["section_409a_deferrals"]) -> MetaOapg.properties.section_409a_deferrals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["section_409a_income"]) -> MetaOapg.properties.section_409a_income: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_tax_withheld"]) -> MetaOapg.properties.state_tax_withheld: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_tax_withheld_lower"]) -> MetaOapg.properties.state_tax_withheld_lower: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payer_state_number"]) -> MetaOapg.properties.payer_state_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payer_state_number_lower"]) -> MetaOapg.properties.payer_state_number_lower: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_income"]) -> MetaOapg.properties.state_income: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_income_lower"]) -> MetaOapg.properties.state_income_lower: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactions_reported"]) -> MetaOapg.properties.transactions_reported: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pse_name"]) -> MetaOapg.properties.pse_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pse_telephone_number"]) -> MetaOapg.properties.pse_telephone_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gross_amount"]) -> MetaOapg.properties.gross_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["card_not_present_transaction"]) -> MetaOapg.properties.card_not_present_transaction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant_category_code"]) -> MetaOapg.properties.merchant_category_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number_of_payment_transactions"]) -> MetaOapg.properties.number_of_payment_transactions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["january_amount"]) -> MetaOapg.properties.january_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["february_amount"]) -> MetaOapg.properties.february_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["march_amount"]) -> MetaOapg.properties.march_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["april_amount"]) -> MetaOapg.properties.april_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["may_amount"]) -> MetaOapg.properties.may_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["june_amount"]) -> MetaOapg.properties.june_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["july_amount"]) -> MetaOapg.properties.july_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["august_amount"]) -> MetaOapg.properties.august_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["september_amount"]) -> MetaOapg.properties.september_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["october_amount"]) -> MetaOapg.properties.october_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["november_amount"]) -> MetaOapg.properties.november_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["december_amount"]) -> MetaOapg.properties.december_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_state"]) -> MetaOapg.properties.primary_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondary_state"]) -> MetaOapg.properties.secondary_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_state_id"]) -> MetaOapg.properties.primary_state_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondary_state_id"]) -> MetaOapg.properties.secondary_state_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_state_income_tax"]) -> MetaOapg.properties.primary_state_income_tax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondary_state_income_tax"]) -> MetaOapg.properties.secondary_state_income_tax: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["document_id"], typing_extensions.Literal["document_metadata"], typing_extensions.Literal["form_1099_type"], typing_extensions.Literal["recipient"], typing_extensions.Literal["payer"], typing_extensions.Literal["filer"], typing_extensions.Literal["tax_year"], typing_extensions.Literal["rents"], typing_extensions.Literal["royalties"], typing_extensions.Literal["other_income"], typing_extensions.Literal["federal_income_tax_withheld"], typing_extensions.Literal["fishing_boat_proceeds"], typing_extensions.Literal["medical_and_healthcare_payments"], typing_extensions.Literal["nonemployee_compensation"], typing_extensions.Literal["substitute_payments_in_lieu_of_dividends_or_interest"], typing_extensions.Literal["payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer"], typing_extensions.Literal["crop_insurance_proceeds"], typing_extensions.Literal["excess_golden_parachute_payments"], typing_extensions.Literal["gross_proceeds_paid_to_an_attorney"], typing_extensions.Literal["section_409a_deferrals"], typing_extensions.Literal["section_409a_income"], typing_extensions.Literal["state_tax_withheld"], typing_extensions.Literal["state_tax_withheld_lower"], typing_extensions.Literal["payer_state_number"], typing_extensions.Literal["payer_state_number_lower"], typing_extensions.Literal["state_income"], typing_extensions.Literal["state_income_lower"], typing_extensions.Literal["transactions_reported"], typing_extensions.Literal["pse_name"], typing_extensions.Literal["pse_telephone_number"], typing_extensions.Literal["gross_amount"], typing_extensions.Literal["card_not_present_transaction"], typing_extensions.Literal["merchant_category_code"], typing_extensions.Literal["number_of_payment_transactions"], typing_extensions.Literal["january_amount"], typing_extensions.Literal["february_amount"], typing_extensions.Literal["march_amount"], typing_extensions.Literal["april_amount"], typing_extensions.Literal["may_amount"], typing_extensions.Literal["june_amount"], typing_extensions.Literal["july_amount"], typing_extensions.Literal["august_amount"], typing_extensions.Literal["september_amount"], typing_extensions.Literal["october_amount"], typing_extensions.Literal["november_amount"], typing_extensions.Literal["december_amount"], typing_extensions.Literal["primary_state"], typing_extensions.Literal["secondary_state"], typing_extensions.Literal["primary_state_id"], typing_extensions.Literal["secondary_state_id"], typing_extensions.Literal["primary_state_income_tax"], typing_extensions.Literal["secondary_state_income_tax"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document_id"]) -> MetaOapg.properties.document_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document_metadata"]) -> typing.Union['CreditDocumentMetadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["form_1099_type"]) -> typing.Union['Form1099Type', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipient"]) -> typing.Union['Credit1099Recipient', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payer"]) -> typing.Union['Credit1099Payer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filer"]) -> typing.Union['Credit1099Filer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_year"]) -> typing.Union[MetaOapg.properties.tax_year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rents"]) -> typing.Union[MetaOapg.properties.rents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["royalties"]) -> typing.Union[MetaOapg.properties.royalties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other_income"]) -> typing.Union[MetaOapg.properties.other_income, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["federal_income_tax_withheld"]) -> typing.Union[MetaOapg.properties.federal_income_tax_withheld, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fishing_boat_proceeds"]) -> typing.Union[MetaOapg.properties.fishing_boat_proceeds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["medical_and_healthcare_payments"]) -> typing.Union[MetaOapg.properties.medical_and_healthcare_payments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nonemployee_compensation"]) -> typing.Union[MetaOapg.properties.nonemployee_compensation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["substitute_payments_in_lieu_of_dividends_or_interest"]) -> typing.Union[MetaOapg.properties.substitute_payments_in_lieu_of_dividends_or_interest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer"]) -> typing.Union[MetaOapg.properties.payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crop_insurance_proceeds"]) -> typing.Union[MetaOapg.properties.crop_insurance_proceeds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excess_golden_parachute_payments"]) -> typing.Union[MetaOapg.properties.excess_golden_parachute_payments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gross_proceeds_paid_to_an_attorney"]) -> typing.Union[MetaOapg.properties.gross_proceeds_paid_to_an_attorney, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["section_409a_deferrals"]) -> typing.Union[MetaOapg.properties.section_409a_deferrals, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["section_409a_income"]) -> typing.Union[MetaOapg.properties.section_409a_income, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_tax_withheld"]) -> typing.Union[MetaOapg.properties.state_tax_withheld, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_tax_withheld_lower"]) -> typing.Union[MetaOapg.properties.state_tax_withheld_lower, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payer_state_number"]) -> typing.Union[MetaOapg.properties.payer_state_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payer_state_number_lower"]) -> typing.Union[MetaOapg.properties.payer_state_number_lower, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_income"]) -> typing.Union[MetaOapg.properties.state_income, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_income_lower"]) -> typing.Union[MetaOapg.properties.state_income_lower, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactions_reported"]) -> typing.Union[MetaOapg.properties.transactions_reported, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pse_name"]) -> typing.Union[MetaOapg.properties.pse_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pse_telephone_number"]) -> typing.Union[MetaOapg.properties.pse_telephone_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gross_amount"]) -> typing.Union[MetaOapg.properties.gross_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["card_not_present_transaction"]) -> typing.Union[MetaOapg.properties.card_not_present_transaction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant_category_code"]) -> typing.Union[MetaOapg.properties.merchant_category_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number_of_payment_transactions"]) -> typing.Union[MetaOapg.properties.number_of_payment_transactions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["january_amount"]) -> typing.Union[MetaOapg.properties.january_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["february_amount"]) -> typing.Union[MetaOapg.properties.february_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["march_amount"]) -> typing.Union[MetaOapg.properties.march_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["april_amount"]) -> typing.Union[MetaOapg.properties.april_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["may_amount"]) -> typing.Union[MetaOapg.properties.may_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["june_amount"]) -> typing.Union[MetaOapg.properties.june_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["july_amount"]) -> typing.Union[MetaOapg.properties.july_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["august_amount"]) -> typing.Union[MetaOapg.properties.august_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["september_amount"]) -> typing.Union[MetaOapg.properties.september_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["october_amount"]) -> typing.Union[MetaOapg.properties.october_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["november_amount"]) -> typing.Union[MetaOapg.properties.november_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["december_amount"]) -> typing.Union[MetaOapg.properties.december_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_state"]) -> typing.Union[MetaOapg.properties.primary_state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondary_state"]) -> typing.Union[MetaOapg.properties.secondary_state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_state_id"]) -> typing.Union[MetaOapg.properties.primary_state_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondary_state_id"]) -> typing.Union[MetaOapg.properties.secondary_state_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_state_income_tax"]) -> typing.Union[MetaOapg.properties.primary_state_income_tax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondary_state_income_tax"]) -> typing.Union[MetaOapg.properties.secondary_state_income_tax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["document_id"], typing_extensions.Literal["document_metadata"], typing_extensions.Literal["form_1099_type"], typing_extensions.Literal["recipient"], typing_extensions.Literal["payer"], typing_extensions.Literal["filer"], typing_extensions.Literal["tax_year"], typing_extensions.Literal["rents"], typing_extensions.Literal["royalties"], typing_extensions.Literal["other_income"], typing_extensions.Literal["federal_income_tax_withheld"], typing_extensions.Literal["fishing_boat_proceeds"], typing_extensions.Literal["medical_and_healthcare_payments"], typing_extensions.Literal["nonemployee_compensation"], typing_extensions.Literal["substitute_payments_in_lieu_of_dividends_or_interest"], typing_extensions.Literal["payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer"], typing_extensions.Literal["crop_insurance_proceeds"], typing_extensions.Literal["excess_golden_parachute_payments"], typing_extensions.Literal["gross_proceeds_paid_to_an_attorney"], typing_extensions.Literal["section_409a_deferrals"], typing_extensions.Literal["section_409a_income"], typing_extensions.Literal["state_tax_withheld"], typing_extensions.Literal["state_tax_withheld_lower"], typing_extensions.Literal["payer_state_number"], typing_extensions.Literal["payer_state_number_lower"], typing_extensions.Literal["state_income"], typing_extensions.Literal["state_income_lower"], typing_extensions.Literal["transactions_reported"], typing_extensions.Literal["pse_name"], typing_extensions.Literal["pse_telephone_number"], typing_extensions.Literal["gross_amount"], typing_extensions.Literal["card_not_present_transaction"], typing_extensions.Literal["merchant_category_code"], typing_extensions.Literal["number_of_payment_transactions"], typing_extensions.Literal["january_amount"], typing_extensions.Literal["february_amount"], typing_extensions.Literal["march_amount"], typing_extensions.Literal["april_amount"], typing_extensions.Literal["may_amount"], typing_extensions.Literal["june_amount"], typing_extensions.Literal["july_amount"], typing_extensions.Literal["august_amount"], typing_extensions.Literal["september_amount"], typing_extensions.Literal["october_amount"], typing_extensions.Literal["november_amount"], typing_extensions.Literal["december_amount"], typing_extensions.Literal["primary_state"], typing_extensions.Literal["secondary_state"], typing_extensions.Literal["primary_state_id"], typing_extensions.Literal["secondary_state_id"], typing_extensions.Literal["primary_state_income_tax"], typing_extensions.Literal["secondary_state_income_tax"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        document_id: typing.Union[MetaOapg.properties.document_id, None, str, ],
        document_metadata: typing.Union['CreditDocumentMetadata', schemas.Unset] = schemas.unset,
        form_1099_type: typing.Union['Form1099Type', schemas.Unset] = schemas.unset,
        recipient: typing.Union['Credit1099Recipient', schemas.Unset] = schemas.unset,
        payer: typing.Union['Credit1099Payer', schemas.Unset] = schemas.unset,
        filer: typing.Union['Credit1099Filer', schemas.Unset] = schemas.unset,
        tax_year: typing.Union[MetaOapg.properties.tax_year, None, str, schemas.Unset] = schemas.unset,
        rents: typing.Union[MetaOapg.properties.rents, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        royalties: typing.Union[MetaOapg.properties.royalties, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        other_income: typing.Union[MetaOapg.properties.other_income, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        federal_income_tax_withheld: typing.Union[MetaOapg.properties.federal_income_tax_withheld, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fishing_boat_proceeds: typing.Union[MetaOapg.properties.fishing_boat_proceeds, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        medical_and_healthcare_payments: typing.Union[MetaOapg.properties.medical_and_healthcare_payments, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        nonemployee_compensation: typing.Union[MetaOapg.properties.nonemployee_compensation, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        substitute_payments_in_lieu_of_dividends_or_interest: typing.Union[MetaOapg.properties.substitute_payments_in_lieu_of_dividends_or_interest, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer: typing.Union[MetaOapg.properties.payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer, None, str, schemas.Unset] = schemas.unset,
        crop_insurance_proceeds: typing.Union[MetaOapg.properties.crop_insurance_proceeds, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        excess_golden_parachute_payments: typing.Union[MetaOapg.properties.excess_golden_parachute_payments, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        gross_proceeds_paid_to_an_attorney: typing.Union[MetaOapg.properties.gross_proceeds_paid_to_an_attorney, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        section_409a_deferrals: typing.Union[MetaOapg.properties.section_409a_deferrals, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        section_409a_income: typing.Union[MetaOapg.properties.section_409a_income, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        state_tax_withheld: typing.Union[MetaOapg.properties.state_tax_withheld, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        state_tax_withheld_lower: typing.Union[MetaOapg.properties.state_tax_withheld_lower, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        payer_state_number: typing.Union[MetaOapg.properties.payer_state_number, None, str, schemas.Unset] = schemas.unset,
        payer_state_number_lower: typing.Union[MetaOapg.properties.payer_state_number_lower, None, str, schemas.Unset] = schemas.unset,
        state_income: typing.Union[MetaOapg.properties.state_income, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        state_income_lower: typing.Union[MetaOapg.properties.state_income_lower, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        transactions_reported: typing.Union[MetaOapg.properties.transactions_reported, None, str, schemas.Unset] = schemas.unset,
        pse_name: typing.Union[MetaOapg.properties.pse_name, None, str, schemas.Unset] = schemas.unset,
        pse_telephone_number: typing.Union[MetaOapg.properties.pse_telephone_number, None, str, schemas.Unset] = schemas.unset,
        gross_amount: typing.Union[MetaOapg.properties.gross_amount, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        card_not_present_transaction: typing.Union[MetaOapg.properties.card_not_present_transaction, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        merchant_category_code: typing.Union[MetaOapg.properties.merchant_category_code, None, str, schemas.Unset] = schemas.unset,
        number_of_payment_transactions: typing.Union[MetaOapg.properties.number_of_payment_transactions, None, str, schemas.Unset] = schemas.unset,
        january_amount: typing.Union[MetaOapg.properties.january_amount, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        february_amount: typing.Union[MetaOapg.properties.february_amount, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        march_amount: typing.Union[MetaOapg.properties.march_amount, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        april_amount: typing.Union[MetaOapg.properties.april_amount, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        may_amount: typing.Union[MetaOapg.properties.may_amount, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        june_amount: typing.Union[MetaOapg.properties.june_amount, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        july_amount: typing.Union[MetaOapg.properties.july_amount, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        august_amount: typing.Union[MetaOapg.properties.august_amount, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        september_amount: typing.Union[MetaOapg.properties.september_amount, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        october_amount: typing.Union[MetaOapg.properties.october_amount, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        november_amount: typing.Union[MetaOapg.properties.november_amount, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        december_amount: typing.Union[MetaOapg.properties.december_amount, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        primary_state: typing.Union[MetaOapg.properties.primary_state, None, str, schemas.Unset] = schemas.unset,
        secondary_state: typing.Union[MetaOapg.properties.secondary_state, None, str, schemas.Unset] = schemas.unset,
        primary_state_id: typing.Union[MetaOapg.properties.primary_state_id, None, str, schemas.Unset] = schemas.unset,
        secondary_state_id: typing.Union[MetaOapg.properties.secondary_state_id, None, str, schemas.Unset] = schemas.unset,
        primary_state_income_tax: typing.Union[MetaOapg.properties.primary_state_income_tax, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        secondary_state_income_tax: typing.Union[MetaOapg.properties.secondary_state_income_tax, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'Credit1099':
        return super().__new__(
            cls,
            *_args,
            document_id=document_id,
            document_metadata=document_metadata,
            form_1099_type=form_1099_type,
            recipient=recipient,
            payer=payer,
            filer=filer,
            tax_year=tax_year,
            rents=rents,
            royalties=royalties,
            other_income=other_income,
            federal_income_tax_withheld=federal_income_tax_withheld,
            fishing_boat_proceeds=fishing_boat_proceeds,
            medical_and_healthcare_payments=medical_and_healthcare_payments,
            nonemployee_compensation=nonemployee_compensation,
            substitute_payments_in_lieu_of_dividends_or_interest=substitute_payments_in_lieu_of_dividends_or_interest,
            payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer=payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer,
            crop_insurance_proceeds=crop_insurance_proceeds,
            excess_golden_parachute_payments=excess_golden_parachute_payments,
            gross_proceeds_paid_to_an_attorney=gross_proceeds_paid_to_an_attorney,
            section_409a_deferrals=section_409a_deferrals,
            section_409a_income=section_409a_income,
            state_tax_withheld=state_tax_withheld,
            state_tax_withheld_lower=state_tax_withheld_lower,
            payer_state_number=payer_state_number,
            payer_state_number_lower=payer_state_number_lower,
            state_income=state_income,
            state_income_lower=state_income_lower,
            transactions_reported=transactions_reported,
            pse_name=pse_name,
            pse_telephone_number=pse_telephone_number,
            gross_amount=gross_amount,
            card_not_present_transaction=card_not_present_transaction,
            merchant_category_code=merchant_category_code,
            number_of_payment_transactions=number_of_payment_transactions,
            january_amount=january_amount,
            february_amount=february_amount,
            march_amount=march_amount,
            april_amount=april_amount,
            may_amount=may_amount,
            june_amount=june_amount,
            july_amount=july_amount,
            august_amount=august_amount,
            september_amount=september_amount,
            october_amount=october_amount,
            november_amount=november_amount,
            december_amount=december_amount,
            primary_state=primary_state,
            secondary_state=secondary_state,
            primary_state_id=primary_state_id,
            secondary_state_id=secondary_state_id,
            primary_state_income_tax=primary_state_income_tax,
            secondary_state_income_tax=secondary_state_income_tax,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.credit1099_filer import Credit1099Filer
from plaid.model.credit1099_payer import Credit1099Payer
from plaid.model.credit1099_recipient import Credit1099Recipient
from plaid.model.credit_document_metadata import CreditDocumentMetadata
from plaid.model.form1099_type import Form1099Type
