# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class WatchlistScreeningIndividualReviewCreateResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A review submitted by a team member for an individual watchlist screening. A review can be either a comment on the current screening state, actions taken
against hits attached to the watchlist screening, or both.
    """


    class MetaOapg:
        required = {
            "dismissed_hits",
            "audit_trail",
            "confirmed_hits",
            "comment",
            "id",
            "request_id",
        }
        
        class properties:
            id = schemas.StrSchema
            
            
            class confirmed_hits(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'confirmed_hits':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class dismissed_hits(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dismissed_hits':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def comment() -> typing.Type['ReviewComment']:
                return ReviewComment
        
            @staticmethod
            def audit_trail() -> typing.Type['WatchlistScreeningAuditTrail']:
                return WatchlistScreeningAuditTrail
            request_id = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "confirmed_hits": confirmed_hits,
                "dismissed_hits": dismissed_hits,
                "comment": comment,
                "audit_trail": audit_trail,
                "request_id": request_id,
            }
        additional_properties = schemas.AnyTypeSchema
    
    dismissed_hits: MetaOapg.properties.dismissed_hits
    audit_trail: 'WatchlistScreeningAuditTrail'
    confirmed_hits: MetaOapg.properties.confirmed_hits
    comment: 'ReviewComment'
    id: MetaOapg.properties.id
    request_id: MetaOapg.properties.request_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dismissed_hits"]) -> MetaOapg.properties.dismissed_hits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audit_trail"]) -> 'WatchlistScreeningAuditTrail': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confirmed_hits"]) -> MetaOapg.properties.confirmed_hits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> 'ReviewComment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dismissed_hits"], typing_extensions.Literal["audit_trail"], typing_extensions.Literal["confirmed_hits"], typing_extensions.Literal["comment"], typing_extensions.Literal["id"], typing_extensions.Literal["request_id"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dismissed_hits"]) -> MetaOapg.properties.dismissed_hits: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audit_trail"]) -> 'WatchlistScreeningAuditTrail': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confirmed_hits"]) -> MetaOapg.properties.confirmed_hits: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> 'ReviewComment': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dismissed_hits"], typing_extensions.Literal["audit_trail"], typing_extensions.Literal["confirmed_hits"], typing_extensions.Literal["comment"], typing_extensions.Literal["id"], typing_extensions.Literal["request_id"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        dismissed_hits: typing.Union[MetaOapg.properties.dismissed_hits, list, tuple, ],
        audit_trail: 'WatchlistScreeningAuditTrail',
        confirmed_hits: typing.Union[MetaOapg.properties.confirmed_hits, list, tuple, ],
        comment: 'ReviewComment',
        id: typing.Union[MetaOapg.properties.id, str, ],
        request_id: typing.Union[MetaOapg.properties.request_id, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'WatchlistScreeningIndividualReviewCreateResponse':
        return super().__new__(
            cls,
            *_args,
            dismissed_hits=dismissed_hits,
            audit_trail=audit_trail,
            confirmed_hits=confirmed_hits,
            comment=comment,
            id=id,
            request_id=request_id,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.review_comment import ReviewComment
from plaid.model.watchlist_screening_audit_trail import WatchlistScreeningAuditTrail
