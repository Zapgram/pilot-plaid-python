# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class InstitutionStatus(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The status of an institution is determined by the health of its Item logins, Transactions updates, Investments updates, Liabilities updates, Auth requests, Balance requests, Identity requests, Investments requests, and Liabilities requests. A login attempt is conducted during the initial Item add in Link. If there is not enough traffic to accurately calculate an institution's status, Plaid will return null rather than potentially inaccurate data.

Institution status is accessible in the Dashboard and via the API using the `/institutions/get_by_id` endpoint with the `include_status` option set to true. Note that institution status is not available in the Sandbox environment.

    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def item_logins() -> typing.Type['ProductStatus']:
                return ProductStatus
        
            @staticmethod
            def transactions_updates() -> typing.Type['ProductStatus']:
                return ProductStatus
        
            @staticmethod
            def auth() -> typing.Type['ProductStatus']:
                return ProductStatus
        
            @staticmethod
            def identity() -> typing.Type['ProductStatus']:
                return ProductStatus
        
            @staticmethod
            def investments_updates() -> typing.Type['ProductStatus']:
                return ProductStatus
        
            @staticmethod
            def liabilities_updates() -> typing.Type['ProductStatus']:
                return ProductStatus
        
            @staticmethod
            def liabilities() -> typing.Type['ProductStatus']:
                return ProductStatus
        
            @staticmethod
            def investments() -> typing.Type['ProductStatus']:
                return ProductStatus
            
            
            class health_incidents(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['HealthIncident']:
                        return HealthIncident
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'health_incidents':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "item_logins": item_logins,
                "transactions_updates": transactions_updates,
                "auth": auth,
                "identity": identity,
                "investments_updates": investments_updates,
                "liabilities_updates": liabilities_updates,
                "liabilities": liabilities,
                "investments": investments,
                "health_incidents": health_incidents,
            }
        additional_properties = schemas.AnyTypeSchema

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_logins"]) -> 'ProductStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactions_updates"]) -> 'ProductStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auth"]) -> 'ProductStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identity"]) -> 'ProductStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investments_updates"]) -> 'ProductStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liabilities_updates"]) -> 'ProductStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liabilities"]) -> 'ProductStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investments"]) -> 'ProductStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["health_incidents"]) -> MetaOapg.properties.health_incidents: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["item_logins"], typing_extensions.Literal["transactions_updates"], typing_extensions.Literal["auth"], typing_extensions.Literal["identity"], typing_extensions.Literal["investments_updates"], typing_extensions.Literal["liabilities_updates"], typing_extensions.Literal["liabilities"], typing_extensions.Literal["investments"], typing_extensions.Literal["health_incidents"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_logins"]) -> typing.Union['ProductStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactions_updates"]) -> typing.Union['ProductStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auth"]) -> typing.Union['ProductStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identity"]) -> typing.Union['ProductStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investments_updates"]) -> typing.Union['ProductStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liabilities_updates"]) -> typing.Union['ProductStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liabilities"]) -> typing.Union['ProductStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investments"]) -> typing.Union['ProductStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["health_incidents"]) -> typing.Union[MetaOapg.properties.health_incidents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["item_logins"], typing_extensions.Literal["transactions_updates"], typing_extensions.Literal["auth"], typing_extensions.Literal["identity"], typing_extensions.Literal["investments_updates"], typing_extensions.Literal["liabilities_updates"], typing_extensions.Literal["liabilities"], typing_extensions.Literal["investments"], typing_extensions.Literal["health_incidents"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        item_logins: typing.Union['ProductStatus', schemas.Unset] = schemas.unset,
        transactions_updates: typing.Union['ProductStatus', schemas.Unset] = schemas.unset,
        auth: typing.Union['ProductStatus', schemas.Unset] = schemas.unset,
        identity: typing.Union['ProductStatus', schemas.Unset] = schemas.unset,
        investments_updates: typing.Union['ProductStatus', schemas.Unset] = schemas.unset,
        liabilities_updates: typing.Union['ProductStatus', schemas.Unset] = schemas.unset,
        liabilities: typing.Union['ProductStatus', schemas.Unset] = schemas.unset,
        investments: typing.Union['ProductStatus', schemas.Unset] = schemas.unset,
        health_incidents: typing.Union[MetaOapg.properties.health_incidents, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'InstitutionStatus':
        return super().__new__(
            cls,
            *_args,
            item_logins=item_logins,
            transactions_updates=transactions_updates,
            auth=auth,
            identity=identity,
            investments_updates=investments_updates,
            liabilities_updates=liabilities_updates,
            liabilities=liabilities,
            investments=investments,
            health_incidents=health_incidents,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.health_incident import HealthIncident
from plaid.model.product_status import ProductStatus
