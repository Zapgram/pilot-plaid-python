# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class FDXParty(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    FDX Participant - an entity or person that is a part of a FDX API transaction
    """


    class MetaOapg:
        required = {
            "name",
            "type",
        }
        
        class properties:
            name = schemas.StrSchema
        
            @staticmethod
            def type() -> typing.Type['FDXPartyType']:
                return FDXPartyType
            homeUri = schemas.StrSchema
            logoUri = schemas.StrSchema
        
            @staticmethod
            def registry() -> typing.Type['FDXPartyRegistry']:
                return FDXPartyRegistry
            registeredEntityName = schemas.StrSchema
            registeredEntityId = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "type": type,
                "homeUri": homeUri,
                "logoUri": logoUri,
                "registry": registry,
                "registeredEntityName": registeredEntityName,
                "registeredEntityId": registeredEntityId,
            }
    
    name: MetaOapg.properties.name
    type: 'FDXPartyType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'FDXPartyType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homeUri"]) -> MetaOapg.properties.homeUri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logoUri"]) -> MetaOapg.properties.logoUri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registry"]) -> 'FDXPartyRegistry': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registeredEntityName"]) -> MetaOapg.properties.registeredEntityName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registeredEntityId"]) -> MetaOapg.properties.registeredEntityId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "type", "homeUri", "logoUri", "registry", "registeredEntityName", "registeredEntityId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'FDXPartyType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homeUri"]) -> typing.Union[MetaOapg.properties.homeUri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logoUri"]) -> typing.Union[MetaOapg.properties.logoUri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registry"]) -> typing.Union['FDXPartyRegistry', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registeredEntityName"]) -> typing.Union[MetaOapg.properties.registeredEntityName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registeredEntityId"]) -> typing.Union[MetaOapg.properties.registeredEntityId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "type", "homeUri", "logoUri", "registry", "registeredEntityName", "registeredEntityId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        type: 'FDXPartyType',
        homeUri: typing.Union[MetaOapg.properties.homeUri, str, schemas.Unset] = schemas.unset,
        logoUri: typing.Union[MetaOapg.properties.logoUri, str, schemas.Unset] = schemas.unset,
        registry: typing.Union['FDXPartyRegistry', schemas.Unset] = schemas.unset,
        registeredEntityName: typing.Union[MetaOapg.properties.registeredEntityName, str, schemas.Unset] = schemas.unset,
        registeredEntityId: typing.Union[MetaOapg.properties.registeredEntityId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FDXParty':
        return super().__new__(
            cls,
            *_args,
            name=name,
            type=type,
            homeUri=homeUri,
            logoUri=logoUri,
            registry=registry,
            registeredEntityName=registeredEntityName,
            registeredEntityId=registeredEntityId,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.fdx_party_registry import FDXPartyRegistry
from plaid.model.fdx_party_type import FDXPartyType
