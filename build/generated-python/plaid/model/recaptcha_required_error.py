# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class RecaptchaRequiredError(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The request was flagged by Plaid's fraud system, and requires additional verification to ensure they are not a bot.
    """


    class MetaOapg:
        required = {
            "http_code",
            "error_type",
            "display_message",
            "error_code",
            "link_user_experience",
            "common_causes",
            "troubleshooting_steps",
        }
        
        class properties:
            error_type = schemas.StrSchema
            error_code = schemas.StrSchema
            display_message = schemas.StrSchema
            http_code = schemas.StrSchema
            link_user_experience = schemas.StrSchema
            common_causes = schemas.StrSchema
            troubleshooting_steps = schemas.StrSchema
            __annotations__ = {
                "error_type": error_type,
                "error_code": error_code,
                "display_message": display_message,
                "http_code": http_code,
                "link_user_experience": link_user_experience,
                "common_causes": common_causes,
                "troubleshooting_steps": troubleshooting_steps,
            }
        additional_properties = schemas.AnyTypeSchema
    
    http_code: MetaOapg.properties.http_code
    error_type: MetaOapg.properties.error_type
    display_message: MetaOapg.properties.display_message
    error_code: MetaOapg.properties.error_code
    link_user_experience: MetaOapg.properties.link_user_experience
    common_causes: MetaOapg.properties.common_causes
    troubleshooting_steps: MetaOapg.properties.troubleshooting_steps
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["http_code"]) -> MetaOapg.properties.http_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_type"]) -> MetaOapg.properties.error_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_message"]) -> MetaOapg.properties.display_message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_code"]) -> MetaOapg.properties.error_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link_user_experience"]) -> MetaOapg.properties.link_user_experience: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["common_causes"]) -> MetaOapg.properties.common_causes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["troubleshooting_steps"]) -> MetaOapg.properties.troubleshooting_steps: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["http_code"], typing_extensions.Literal["error_type"], typing_extensions.Literal["display_message"], typing_extensions.Literal["error_code"], typing_extensions.Literal["link_user_experience"], typing_extensions.Literal["common_causes"], typing_extensions.Literal["troubleshooting_steps"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["http_code"]) -> MetaOapg.properties.http_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_type"]) -> MetaOapg.properties.error_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_message"]) -> MetaOapg.properties.display_message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_code"]) -> MetaOapg.properties.error_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link_user_experience"]) -> MetaOapg.properties.link_user_experience: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["common_causes"]) -> MetaOapg.properties.common_causes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["troubleshooting_steps"]) -> MetaOapg.properties.troubleshooting_steps: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["http_code"], typing_extensions.Literal["error_type"], typing_extensions.Literal["display_message"], typing_extensions.Literal["error_code"], typing_extensions.Literal["link_user_experience"], typing_extensions.Literal["common_causes"], typing_extensions.Literal["troubleshooting_steps"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        http_code: typing.Union[MetaOapg.properties.http_code, str, ],
        error_type: typing.Union[MetaOapg.properties.error_type, str, ],
        display_message: typing.Union[MetaOapg.properties.display_message, str, ],
        error_code: typing.Union[MetaOapg.properties.error_code, str, ],
        link_user_experience: typing.Union[MetaOapg.properties.link_user_experience, str, ],
        common_causes: typing.Union[MetaOapg.properties.common_causes, str, ],
        troubleshooting_steps: typing.Union[MetaOapg.properties.troubleshooting_steps, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'RecaptchaRequiredError':
        return super().__new__(
            cls,
            *_args,
            http_code=http_code,
            error_type=error_type,
            display_message=display_message,
            error_code=error_code,
            link_user_experience=link_user_experience,
            common_causes=common_causes,
            troubleshooting_steps=troubleshooting_steps,
            _configuration=_configuration,
            **kwargs,
        )
