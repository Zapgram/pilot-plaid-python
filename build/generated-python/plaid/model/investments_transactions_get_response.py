# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class InvestmentsTransactionsGetResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    InvestmentsTransactionsGetResponse defines the response schema for `/investments/transactions/get`
    """


    class MetaOapg:
        required = {
            "item",
            "accounts",
            "investment_transactions",
            "request_id",
            "total_investment_transactions",
            "securities",
        }
        
        class properties:
        
            @staticmethod
            def item() -> typing.Type['Item']:
                return Item
            
            
            class accounts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AccountBase']:
                        return AccountBase
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AccountBase'], typing.List['AccountBase']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accounts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AccountBase':
                    return super().__getitem__(i)
            
            
            class securities(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Security']:
                        return Security
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Security'], typing.List['Security']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'securities':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Security':
                    return super().__getitem__(i)
            
            
            class investment_transactions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['InvestmentTransaction']:
                        return InvestmentTransaction
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['InvestmentTransaction'], typing.List['InvestmentTransaction']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'investment_transactions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'InvestmentTransaction':
                    return super().__getitem__(i)
            total_investment_transactions = schemas.IntSchema
            request_id = schemas.StrSchema
            __annotations__ = {
                "item": item,
                "accounts": accounts,
                "securities": securities,
                "investment_transactions": investment_transactions,
                "total_investment_transactions": total_investment_transactions,
                "request_id": request_id,
            }
        additional_properties = schemas.AnyTypeSchema
    
    item: 'Item'
    accounts: MetaOapg.properties.accounts
    investment_transactions: MetaOapg.properties.investment_transactions
    request_id: MetaOapg.properties.request_id
    total_investment_transactions: MetaOapg.properties.total_investment_transactions
    securities: MetaOapg.properties.securities
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item"]) -> 'Item': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accounts"]) -> MetaOapg.properties.accounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investment_transactions"]) -> MetaOapg.properties.investment_transactions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_investment_transactions"]) -> MetaOapg.properties.total_investment_transactions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securities"]) -> MetaOapg.properties.securities: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["item"], typing_extensions.Literal["accounts"], typing_extensions.Literal["investment_transactions"], typing_extensions.Literal["request_id"], typing_extensions.Literal["total_investment_transactions"], typing_extensions.Literal["securities"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item"]) -> 'Item': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accounts"]) -> MetaOapg.properties.accounts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investment_transactions"]) -> MetaOapg.properties.investment_transactions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_investment_transactions"]) -> MetaOapg.properties.total_investment_transactions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securities"]) -> MetaOapg.properties.securities: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["item"], typing_extensions.Literal["accounts"], typing_extensions.Literal["investment_transactions"], typing_extensions.Literal["request_id"], typing_extensions.Literal["total_investment_transactions"], typing_extensions.Literal["securities"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        item: 'Item',
        accounts: typing.Union[MetaOapg.properties.accounts, list, tuple, ],
        investment_transactions: typing.Union[MetaOapg.properties.investment_transactions, list, tuple, ],
        request_id: typing.Union[MetaOapg.properties.request_id, str, ],
        total_investment_transactions: typing.Union[MetaOapg.properties.total_investment_transactions, decimal.Decimal, int, ],
        securities: typing.Union[MetaOapg.properties.securities, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'InvestmentsTransactionsGetResponse':
        return super().__new__(
            cls,
            *_args,
            item=item,
            accounts=accounts,
            investment_transactions=investment_transactions,
            request_id=request_id,
            total_investment_transactions=total_investment_transactions,
            securities=securities,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.account_base import AccountBase
from plaid.model.investment_transaction import InvestmentTransaction
from plaid.model.item import Item
from plaid.model.security import Security
