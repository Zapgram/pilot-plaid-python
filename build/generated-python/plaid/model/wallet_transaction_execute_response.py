# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class WalletTransactionExecuteResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    WalletTransactionExecuteResponse defines the response schema for `/wallet/transaction/execute`
    """


    class MetaOapg:
        required = {
            "transaction_id",
            "request_id",
            "status",
        }
        
        class properties:
            transaction_id = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['WalletTransactionStatus']:
                return WalletTransactionStatus
            request_id = schemas.StrSchema
            __annotations__ = {
                "transaction_id": transaction_id,
                "status": status,
                "request_id": request_id,
            }
        additional_properties = schemas.AnyTypeSchema
    
    transaction_id: MetaOapg.properties.transaction_id
    request_id: MetaOapg.properties.request_id
    status: 'WalletTransactionStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_id"]) -> MetaOapg.properties.transaction_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'WalletTransactionStatus': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transaction_id"], typing_extensions.Literal["request_id"], typing_extensions.Literal["status"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_id"]) -> MetaOapg.properties.transaction_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'WalletTransactionStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transaction_id"], typing_extensions.Literal["request_id"], typing_extensions.Literal["status"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        transaction_id: typing.Union[MetaOapg.properties.transaction_id, str, ],
        request_id: typing.Union[MetaOapg.properties.request_id, str, ],
        status: 'WalletTransactionStatus',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'WalletTransactionExecuteResponse':
        return super().__new__(
            cls,
            *_args,
            transaction_id=transaction_id,
            request_id=request_id,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.wallet_transaction_status import WalletTransactionStatus
