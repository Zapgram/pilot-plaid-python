# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class PaymentInitiationMetadata(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Metadata that captures what specific payment configurations an institution supports when making Payment Initiation requests.
    """


    class MetaOapg:
        required = {
            "supports_refund_details",
            "maximum_payment_amount",
            "standing_order_metadata",
            "supports_sepa_instant",
            "supports_international_payments",
        }
        
        class properties:
            supports_international_payments = schemas.BoolSchema
            supports_sepa_instant = schemas.BoolSchema
        
            @staticmethod
            def maximum_payment_amount() -> typing.Type['PaymentInitiationMaximumPaymentAmount']:
                return PaymentInitiationMaximumPaymentAmount
            supports_refund_details = schemas.BoolSchema
        
            @staticmethod
            def standing_order_metadata() -> typing.Type['PaymentInitiationStandingOrderMetadata']:
                return PaymentInitiationStandingOrderMetadata
            __annotations__ = {
                "supports_international_payments": supports_international_payments,
                "supports_sepa_instant": supports_sepa_instant,
                "maximum_payment_amount": maximum_payment_amount,
                "supports_refund_details": supports_refund_details,
                "standing_order_metadata": standing_order_metadata,
            }
        additional_properties = schemas.AnyTypeSchema

    
    supports_refund_details: MetaOapg.properties.supports_refund_details
    maximum_payment_amount: 'PaymentInitiationMaximumPaymentAmount'
    standing_order_metadata: 'PaymentInitiationStandingOrderMetadata'
    supports_sepa_instant: MetaOapg.properties.supports_sepa_instant
    supports_international_payments: MetaOapg.properties.supports_international_payments
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supports_refund_details"]) -> MetaOapg.properties.supports_refund_details: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximum_payment_amount"]) -> 'PaymentInitiationMaximumPaymentAmount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standing_order_metadata"]) -> 'PaymentInitiationStandingOrderMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supports_sepa_instant"]) -> MetaOapg.properties.supports_sepa_instant: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supports_international_payments"]) -> MetaOapg.properties.supports_international_payments: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["supports_refund_details"], typing_extensions.Literal["maximum_payment_amount"], typing_extensions.Literal["standing_order_metadata"], typing_extensions.Literal["supports_sepa_instant"], typing_extensions.Literal["supports_international_payments"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supports_refund_details"]) -> MetaOapg.properties.supports_refund_details: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximum_payment_amount"]) -> 'PaymentInitiationMaximumPaymentAmount': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standing_order_metadata"]) -> 'PaymentInitiationStandingOrderMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supports_sepa_instant"]) -> MetaOapg.properties.supports_sepa_instant: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supports_international_payments"]) -> MetaOapg.properties.supports_international_payments: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["supports_refund_details"], typing_extensions.Literal["maximum_payment_amount"], typing_extensions.Literal["standing_order_metadata"], typing_extensions.Literal["supports_sepa_instant"], typing_extensions.Literal["supports_international_payments"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'PaymentInitiationMetadata':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.payment_initiation_maximum_payment_amount import PaymentInitiationMaximumPaymentAmount
from plaid.model.payment_initiation_standing_order_metadata import PaymentInitiationStandingOrderMetadata
