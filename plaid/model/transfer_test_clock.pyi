# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class TransferTestClock(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Defines the test clock for a transfer.
    """


    class MetaOapg:
        required = {
            "virtual_time",
            "test_clock_id",
        }
        
        class properties:
            test_clock_id = schemas.StrSchema
            virtual_time = schemas.DateTimeSchema
            __annotations__ = {
                "test_clock_id": test_clock_id,
                "virtual_time": virtual_time,
            }
        additional_properties = schemas.AnyTypeSchema
    
    virtual_time: MetaOapg.properties.virtual_time
    test_clock_id: MetaOapg.properties.test_clock_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["virtual_time"]) -> MetaOapg.properties.virtual_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["test_clock_id"]) -> MetaOapg.properties.test_clock_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["virtual_time"], typing_extensions.Literal["test_clock_id"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["virtual_time"]) -> MetaOapg.properties.virtual_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["test_clock_id"]) -> MetaOapg.properties.test_clock_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["virtual_time"], typing_extensions.Literal["test_clock_id"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        virtual_time: typing.Union[MetaOapg.properties.virtual_time, str, datetime, ],
        test_clock_id: typing.Union[MetaOapg.properties.test_clock_id, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'TransferTestClock':
        return super().__new__(
            cls,
            *_args,
            virtual_time=virtual_time,
            test_clock_id=test_clock_id,
            _configuration=_configuration,
            **kwargs,
        )
