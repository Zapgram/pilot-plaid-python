# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class WalletTransactionCounterparty(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An object representing the e-wallet transaction's counterparty
    """


    class MetaOapg:
        required = {
            "name",
            "numbers",
        }
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def numbers() -> typing.Type['WalletTransactionCounterpartyNumbers']:
                return WalletTransactionCounterpartyNumbers
        
            @staticmethod
            def address() -> typing.Type['PaymentInitiationAddress']:
                return PaymentInitiationAddress
            
            
            class date_of_birth(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'date_of_birth':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "name": name,
                "numbers": numbers,
                "address": address,
                "date_of_birth": date_of_birth,
            }
        additional_properties = schemas.AnyTypeSchema
    
    name: MetaOapg.properties.name
    numbers: 'WalletTransactionCounterpartyNumbers'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numbers"]) -> 'WalletTransactionCounterpartyNumbers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'PaymentInitiationAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_of_birth"]) -> MetaOapg.properties.date_of_birth: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["numbers"], typing_extensions.Literal["address"], typing_extensions.Literal["date_of_birth"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numbers"]) -> 'WalletTransactionCounterpartyNumbers': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union['PaymentInitiationAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_of_birth"]) -> typing.Union[MetaOapg.properties.date_of_birth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["numbers"], typing_extensions.Literal["address"], typing_extensions.Literal["date_of_birth"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        numbers: 'WalletTransactionCounterpartyNumbers',
        address: typing.Union['PaymentInitiationAddress', schemas.Unset] = schemas.unset,
        date_of_birth: typing.Union[MetaOapg.properties.date_of_birth, None, str, date, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'WalletTransactionCounterparty':
        return super().__new__(
            cls,
            *_args,
            name=name,
            numbers=numbers,
            address=address,
            date_of_birth=date_of_birth,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.payment_initiation_address import PaymentInitiationAddress
from plaid.model.wallet_transaction_counterparty_numbers import WalletTransactionCounterpartyNumbers
