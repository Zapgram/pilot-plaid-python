# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class IdentityVerificationDocumentAddressResponse(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The address extracted from the document. The address must at least contain the following fields to be a valid address: `street`, `city`, `country`. If any are missing or unable to be extracted, the address will be null.

`region`, and `postal_code` may be null based on the addressing system. For example:

Addresses from the United Kingdom will not include a region

Addresses from Hong Kong will not include postal code

Note: Optical Character Recognition (OCR) technology may sometimes extract incorrect data from a document.
    """


    class MetaOapg:
        required = {
            "country",
            "city",
            "street",
            "postal_code",
            "region",
        }
        
        class properties:
            street = schemas.StrSchema
            city = schemas.StrSchema
        
            @staticmethod
            def region() -> typing.Type['IdentityVerificationDocumentRegion']:
                return IdentityVerificationDocumentRegion
        
            @staticmethod
            def postal_code() -> typing.Type['IdentityVerificationDocumentPostalCode']:
                return IdentityVerificationDocumentPostalCode
        
            @staticmethod
            def country() -> typing.Type['IdentityVerificationDocumentCountryCode']:
                return IdentityVerificationDocumentCountryCode
            __annotations__ = {
                "street": street,
                "city": city,
                "region": region,
                "postal_code": postal_code,
                "country": country,
            }
        additional_properties = schemas.AnyTypeSchema

    
    country: 'IdentityVerificationDocumentCountryCode'
    city: MetaOapg.properties.city
    street: MetaOapg.properties.street
    postal_code: 'IdentityVerificationDocumentPostalCode'
    region: 'IdentityVerificationDocumentRegion'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> 'IdentityVerificationDocumentCountryCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["street"]) -> MetaOapg.properties.street: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postal_code"]) -> 'IdentityVerificationDocumentPostalCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> 'IdentityVerificationDocumentRegion': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["country"], typing_extensions.Literal["city"], typing_extensions.Literal["street"], typing_extensions.Literal["postal_code"], typing_extensions.Literal["region"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> 'IdentityVerificationDocumentCountryCode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["street"]) -> MetaOapg.properties.street: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postal_code"]) -> 'IdentityVerificationDocumentPostalCode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> 'IdentityVerificationDocumentRegion': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["country"], typing_extensions.Literal["city"], typing_extensions.Literal["street"], typing_extensions.Literal["postal_code"], typing_extensions.Literal["region"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'IdentityVerificationDocumentAddressResponse':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.identity_verification_document_country_code import IdentityVerificationDocumentCountryCode
from plaid.model.identity_verification_document_postal_code import IdentityVerificationDocumentPostalCode
from plaid.model.identity_verification_document_region import IdentityVerificationDocumentRegion
