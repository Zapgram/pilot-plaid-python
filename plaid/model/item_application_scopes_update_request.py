# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class ItemApplicationScopesUpdateRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ItemApplicationScopesUpdateRequest defines the request schema for `/item/application/scopes/update`
    """


    class MetaOapg:
        required = {
            "access_token",
            "context",
            "scopes",
            "application_id",
        }
        
        class properties:
            access_token = schemas.StrSchema
            application_id = schemas.StrSchema
        
            @staticmethod
            def scopes() -> typing.Type['Scopes']:
                return Scopes
        
            @staticmethod
            def context() -> typing.Type['ScopesContext']:
                return ScopesContext
            client_id = schemas.StrSchema
            secret = schemas.StrSchema
            state = schemas.StrSchema
            __annotations__ = {
                "access_token": access_token,
                "application_id": application_id,
                "scopes": scopes,
                "context": context,
                "client_id": client_id,
                "secret": secret,
                "state": state,
            }
    
    access_token: MetaOapg.properties.access_token
    context: 'ScopesContext'
    scopes: 'Scopes'
    application_id: MetaOapg.properties.application_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["application_id"]) -> MetaOapg.properties.application_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> 'Scopes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["context"]) -> 'ScopesContext': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_id"]) -> MetaOapg.properties.client_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["access_token", "application_id", "scopes", "context", "client_id", "secret", "state", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["application_id"]) -> MetaOapg.properties.application_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> 'Scopes': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["context"]) -> 'ScopesContext': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_id"]) -> typing.Union[MetaOapg.properties.client_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access_token", "application_id", "scopes", "context", "client_id", "secret", "state", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        access_token: typing.Union[MetaOapg.properties.access_token, str, ],
        context: 'ScopesContext',
        scopes: 'Scopes',
        application_id: typing.Union[MetaOapg.properties.application_id, str, ],
        client_id: typing.Union[MetaOapg.properties.client_id, str, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ItemApplicationScopesUpdateRequest':
        return super().__new__(
            cls,
            *_args,
            access_token=access_token,
            context=context,
            scopes=scopes,
            application_id=application_id,
            client_id=client_id,
            secret=secret,
            state=state,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.scopes import Scopes
from plaid.model.scopes_context import ScopesContext
