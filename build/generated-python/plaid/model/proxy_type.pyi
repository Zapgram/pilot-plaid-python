# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class ProxyType(
    schemas.EnumBase,
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An enum indicating whether a network proxy is present and if so what type it is.

`none_detected` indicates the user is not on a detectable proxy network.

`tor` indicates the user was using a Tor browser, which sends encrypted traffic on a decentralized network and is somewhat similar to a VPN (Virtual Private Network).

`vpn` indicates the user is on a VPN (Virtual Private Network)

`web_proxy` indicates the user is on a web proxy server, which may allow them to conceal information such as their IP address or other identifying information.

`public_proxy` indicates the user is on a public web proxy server, which is similar to a web proxy but can be shared by multiple users. This may allow multiple users to appear as if they have the same IP address for instance.
    """


    class MetaOapg:
        enum_value_to_name = {
            "none_detected": "NONE_DETECTED",
            "tor": "TOR",
            "vpn": "VPN",
            "web_proxy": "WEB_PROXY",
            "public_proxy": "PUBLIC_PROXY",
        }
    
    @schemas.classproperty
    def NONE_DETECTED(cls):
        return cls("none_detected")
    
    @schemas.classproperty
    def TOR(cls):
        return cls("tor")
    
    @schemas.classproperty
    def VPN(cls):
        return cls("vpn")
    
    @schemas.classproperty
    def WEB_PROXY(cls):
        return cls("web_proxy")
    
    @schemas.classproperty
    def PUBLIC_PROXY(cls):
        return cls("public_proxy")


    def __new__(
        cls,
        *_args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ProxyType':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
        )
