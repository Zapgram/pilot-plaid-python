# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class CreditBankIncomeHistoricalSummary(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The end user's monthly summary for the income source(s).
    """


    class MetaOapg:
        
        class properties:
            total_amount = schemas.NumberSchema
            
            
            class iso_currency_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'iso_currency_code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class unofficial_currency_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'unofficial_currency_code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class total_amounts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CreditAmountWithCurrency']:
                        return CreditAmountWithCurrency
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CreditAmountWithCurrency'], typing.List['CreditAmountWithCurrency']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'total_amounts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CreditAmountWithCurrency':
                    return super().__getitem__(i)
            start_date = schemas.DateSchema
            end_date = schemas.DateSchema
            
            
            class transactions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CreditBankIncomeTransaction']:
                        return CreditBankIncomeTransaction
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CreditBankIncomeTransaction'], typing.List['CreditBankIncomeTransaction']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transactions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CreditBankIncomeTransaction':
                    return super().__getitem__(i)
            __annotations__ = {
                "total_amount": total_amount,
                "iso_currency_code": iso_currency_code,
                "unofficial_currency_code": unofficial_currency_code,
                "total_amounts": total_amounts,
                "start_date": start_date,
                "end_date": end_date,
                "transactions": transactions,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_amount"]) -> MetaOapg.properties.total_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unofficial_currency_code"]) -> MetaOapg.properties.unofficial_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_amounts"]) -> MetaOapg.properties.total_amounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["total_amount"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["unofficial_currency_code"], typing_extensions.Literal["total_amounts"], typing_extensions.Literal["start_date"], typing_extensions.Literal["end_date"], typing_extensions.Literal["transactions"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_amount"]) -> typing.Union[MetaOapg.properties.total_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iso_currency_code"]) -> typing.Union[MetaOapg.properties.iso_currency_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unofficial_currency_code"]) -> typing.Union[MetaOapg.properties.unofficial_currency_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_amounts"]) -> typing.Union[MetaOapg.properties.total_amounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> typing.Union[MetaOapg.properties.start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> typing.Union[MetaOapg.properties.end_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactions"]) -> typing.Union[MetaOapg.properties.transactions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total_amount"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["unofficial_currency_code"], typing_extensions.Literal["total_amounts"], typing_extensions.Literal["start_date"], typing_extensions.Literal["end_date"], typing_extensions.Literal["transactions"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        total_amount: typing.Union[MetaOapg.properties.total_amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        iso_currency_code: typing.Union[MetaOapg.properties.iso_currency_code, None, str, schemas.Unset] = schemas.unset,
        unofficial_currency_code: typing.Union[MetaOapg.properties.unofficial_currency_code, None, str, schemas.Unset] = schemas.unset,
        total_amounts: typing.Union[MetaOapg.properties.total_amounts, list, tuple, schemas.Unset] = schemas.unset,
        start_date: typing.Union[MetaOapg.properties.start_date, str, date, schemas.Unset] = schemas.unset,
        end_date: typing.Union[MetaOapg.properties.end_date, str, date, schemas.Unset] = schemas.unset,
        transactions: typing.Union[MetaOapg.properties.transactions, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'CreditBankIncomeHistoricalSummary':
        return super().__new__(
            cls,
            *_args,
            total_amount=total_amount,
            iso_currency_code=iso_currency_code,
            unofficial_currency_code=unofficial_currency_code,
            total_amounts=total_amounts,
            start_date=start_date,
            end_date=end_date,
            transactions=transactions,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.credit_amount_with_currency import CreditAmountWithCurrency
from plaid.model.credit_bank_income_transaction import CreditBankIncomeTransaction
