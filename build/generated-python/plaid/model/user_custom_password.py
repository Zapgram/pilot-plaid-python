# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class UserCustomPassword(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Custom test accounts are configured with a JSON configuration object formulated according to the schema below. All top level fields are optional. Sending an empty object as a configuration will result in an account configured with random balances and transaction history.
    """


    class MetaOapg:
        required = {
            "seed",
            "recaptcha",
            "mfa",
            "override_accounts",
            "force_error",
        }
        
        class properties:
            seed = schemas.StrSchema
            
            
            class override_accounts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['OverrideAccounts']:
                        return OverrideAccounts
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['OverrideAccounts'], typing.List['OverrideAccounts']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'override_accounts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'OverrideAccounts':
                    return super().__getitem__(i)
        
            @staticmethod
            def mfa() -> typing.Type['MFA']:
                return MFA
            recaptcha = schemas.StrSchema
            force_error = schemas.StrSchema
            
            
            class version(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'version':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "seed": seed,
                "override_accounts": override_accounts,
                "mfa": mfa,
                "recaptcha": recaptcha,
                "force_error": force_error,
                "version": version,
            }
        additional_properties = schemas.AnyTypeSchema
    
    seed: MetaOapg.properties.seed
    recaptcha: MetaOapg.properties.recaptcha
    mfa: 'MFA'
    override_accounts: MetaOapg.properties.override_accounts
    force_error: MetaOapg.properties.force_error
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seed"]) -> MetaOapg.properties.seed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recaptcha"]) -> MetaOapg.properties.recaptcha: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mfa"]) -> 'MFA': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["override_accounts"]) -> MetaOapg.properties.override_accounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["force_error"]) -> MetaOapg.properties.force_error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["seed"], typing_extensions.Literal["recaptcha"], typing_extensions.Literal["mfa"], typing_extensions.Literal["override_accounts"], typing_extensions.Literal["force_error"], typing_extensions.Literal["version"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seed"]) -> MetaOapg.properties.seed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recaptcha"]) -> MetaOapg.properties.recaptcha: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mfa"]) -> 'MFA': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["override_accounts"]) -> MetaOapg.properties.override_accounts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["force_error"]) -> MetaOapg.properties.force_error: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["seed"], typing_extensions.Literal["recaptcha"], typing_extensions.Literal["mfa"], typing_extensions.Literal["override_accounts"], typing_extensions.Literal["force_error"], typing_extensions.Literal["version"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        seed: typing.Union[MetaOapg.properties.seed, str, ],
        recaptcha: typing.Union[MetaOapg.properties.recaptcha, str, ],
        mfa: 'MFA',
        override_accounts: typing.Union[MetaOapg.properties.override_accounts, list, tuple, ],
        force_error: typing.Union[MetaOapg.properties.force_error, str, ],
        version: typing.Union[MetaOapg.properties.version, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'UserCustomPassword':
        return super().__new__(
            cls,
            *_args,
            seed=seed,
            recaptcha=recaptcha,
            mfa=mfa,
            override_accounts=override_accounts,
            force_error=force_error,
            version=version,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.mfa import MFA
from plaid.model.override_accounts import OverrideAccounts
