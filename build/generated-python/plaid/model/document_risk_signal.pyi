# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class DocumentRiskSignal(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Details about a certain reason as to why a document could potentially be fraudulent.
    """


    class MetaOapg:
        required = {
            "page_number",
            "field",
            "has_fraud_risk",
            "actual_value",
            "signal_description",
            "expected_value",
            "type",
            "institution_metadata",
        }
        
        class properties:
            
            
            class type(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'type':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class field(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'field':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class has_fraud_risk(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'has_fraud_risk':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def institution_metadata() -> typing.Type['DocumentRiskSignalInstitutionMetadata']:
                return DocumentRiskSignalInstitutionMetadata
            
            
            class expected_value(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'expected_value':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class actual_value(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'actual_value':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class signal_description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'signal_description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class page_number(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'page_number':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "type": type,
                "field": field,
                "has_fraud_risk": has_fraud_risk,
                "institution_metadata": institution_metadata,
                "expected_value": expected_value,
                "actual_value": actual_value,
                "signal_description": signal_description,
                "page_number": page_number,
            }
        additional_properties = schemas.AnyTypeSchema

    
    page_number: MetaOapg.properties.page_number
    field: MetaOapg.properties.field
    has_fraud_risk: MetaOapg.properties.has_fraud_risk
    actual_value: MetaOapg.properties.actual_value
    signal_description: MetaOapg.properties.signal_description
    expected_value: MetaOapg.properties.expected_value
    type: MetaOapg.properties.type
    institution_metadata: 'DocumentRiskSignalInstitutionMetadata'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["page_number"]) -> MetaOapg.properties.page_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field"]) -> MetaOapg.properties.field: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_fraud_risk"]) -> MetaOapg.properties.has_fraud_risk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actual_value"]) -> MetaOapg.properties.actual_value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signal_description"]) -> MetaOapg.properties.signal_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expected_value"]) -> MetaOapg.properties.expected_value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_metadata"]) -> 'DocumentRiskSignalInstitutionMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["page_number"], typing_extensions.Literal["field"], typing_extensions.Literal["has_fraud_risk"], typing_extensions.Literal["actual_value"], typing_extensions.Literal["signal_description"], typing_extensions.Literal["expected_value"], typing_extensions.Literal["type"], typing_extensions.Literal["institution_metadata"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["page_number"]) -> MetaOapg.properties.page_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field"]) -> MetaOapg.properties.field: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_fraud_risk"]) -> MetaOapg.properties.has_fraud_risk: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actual_value"]) -> MetaOapg.properties.actual_value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signal_description"]) -> MetaOapg.properties.signal_description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expected_value"]) -> MetaOapg.properties.expected_value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_metadata"]) -> 'DocumentRiskSignalInstitutionMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["page_number"], typing_extensions.Literal["field"], typing_extensions.Literal["has_fraud_risk"], typing_extensions.Literal["actual_value"], typing_extensions.Literal["signal_description"], typing_extensions.Literal["expected_value"], typing_extensions.Literal["type"], typing_extensions.Literal["institution_metadata"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'DocumentRiskSignal':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.document_risk_signal_institution_metadata import DocumentRiskSignalInstitutionMetadata
