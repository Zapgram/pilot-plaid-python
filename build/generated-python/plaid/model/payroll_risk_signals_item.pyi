# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class PayrollRiskSignalsItem(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Object containing fraud risk data pertaining to the Item linked as part of the verification.
    """


    class MetaOapg:
        required = {
            "item_id",
            "verification_risk_signals",
        }
        
        class properties:
            item_id = schemas.StrSchema
            
            
            class verification_risk_signals(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DocumentRiskSignalsObject']:
                        return DocumentRiskSignalsObject
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DocumentRiskSignalsObject'], typing.List['DocumentRiskSignalsObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'verification_risk_signals':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DocumentRiskSignalsObject':
                    return super().__getitem__(i)
            __annotations__ = {
                "item_id": item_id,
                "verification_risk_signals": verification_risk_signals,
            }
        additional_properties = schemas.AnyTypeSchema
    
    item_id: MetaOapg.properties.item_id
    verification_risk_signals: MetaOapg.properties.verification_risk_signals
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verification_risk_signals"]) -> MetaOapg.properties.verification_risk_signals: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["item_id"], typing_extensions.Literal["verification_risk_signals"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verification_risk_signals"]) -> MetaOapg.properties.verification_risk_signals: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["item_id"], typing_extensions.Literal["verification_risk_signals"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        item_id: typing.Union[MetaOapg.properties.item_id, str, ],
        verification_risk_signals: typing.Union[MetaOapg.properties.verification_risk_signals, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'PayrollRiskSignalsItem':
        return super().__new__(
            cls,
            *_args,
            item_id=item_id,
            verification_risk_signals=verification_risk_signals,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.document_risk_signals_object import DocumentRiskSignalsObject
