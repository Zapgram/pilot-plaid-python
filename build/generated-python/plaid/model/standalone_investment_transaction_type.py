# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class StandaloneInvestmentTransactionType(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Valid values for investment transaction types and subtypes. Note that transactions representing inflow of cash will appear as negative amounts, outflow of cash will appear as positive amounts.
    """


    class MetaOapg:
        required = {
            "cancel",
            "transfer",
            "buy",
            "fee",
            "sell",
            "cash",
        }
        
        class properties:
            buy = schemas.StrSchema
            sell = schemas.StrSchema
            cancel = schemas.StrSchema
            cash = schemas.StrSchema
            fee = schemas.StrSchema
            transfer = schemas.StrSchema
            __annotations__ = {
                "buy": buy,
                "sell": sell,
                "cancel": cancel,
                "cash": cash,
                "fee": fee,
                "transfer": transfer,
            }
        additional_properties = schemas.AnyTypeSchema
    
    cancel: MetaOapg.properties.cancel
    transfer: MetaOapg.properties.transfer
    buy: MetaOapg.properties.buy
    fee: MetaOapg.properties.fee
    sell: MetaOapg.properties.sell
    cash: MetaOapg.properties.cash
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cancel"]) -> MetaOapg.properties.cancel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transfer"]) -> MetaOapg.properties.transfer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buy"]) -> MetaOapg.properties.buy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fee"]) -> MetaOapg.properties.fee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sell"]) -> MetaOapg.properties.sell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cash"]) -> MetaOapg.properties.cash: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cancel"], typing_extensions.Literal["transfer"], typing_extensions.Literal["buy"], typing_extensions.Literal["fee"], typing_extensions.Literal["sell"], typing_extensions.Literal["cash"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cancel"]) -> MetaOapg.properties.cancel: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transfer"]) -> MetaOapg.properties.transfer: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buy"]) -> MetaOapg.properties.buy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fee"]) -> MetaOapg.properties.fee: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sell"]) -> MetaOapg.properties.sell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cash"]) -> MetaOapg.properties.cash: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cancel"], typing_extensions.Literal["transfer"], typing_extensions.Literal["buy"], typing_extensions.Literal["fee"], typing_extensions.Literal["sell"], typing_extensions.Literal["cash"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        cancel: typing.Union[MetaOapg.properties.cancel, str, ],
        transfer: typing.Union[MetaOapg.properties.transfer, str, ],
        buy: typing.Union[MetaOapg.properties.buy, str, ],
        fee: typing.Union[MetaOapg.properties.fee, str, ],
        sell: typing.Union[MetaOapg.properties.sell, str, ],
        cash: typing.Union[MetaOapg.properties.cash, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'StandaloneInvestmentTransactionType':
        return super().__new__(
            cls,
            *_args,
            cancel=cancel,
            transfer=transfer,
            buy=buy,
            fee=fee,
            sell=sell,
            cash=cash,
            _configuration=_configuration,
            **kwargs,
        )
