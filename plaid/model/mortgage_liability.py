# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class MortgageLiability(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Contains details about a mortgage account.
    """


    class MetaOapg:
        required = {
            "origination_principal_amount",
            "account_number",
            "next_monthly_payment",
            "loan_type_description",
            "escrow_balance",
            "has_pmi",
            "last_payment_date",
            "past_due_amount",
            "maturity_date",
            "has_prepayment_penalty",
            "current_late_fee",
            "last_payment_amount",
            "property_address",
            "account_id",
            "origination_date",
            "loan_term",
            "interest_rate",
            "ytd_interest_paid",
            "ytd_principal_paid",
            "next_payment_due_date",
        }
        
        class properties:
            account_id = schemas.StrSchema
            account_number = schemas.StrSchema
            
            
            class current_late_fee(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'current_late_fee':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class escrow_balance(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'escrow_balance':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class has_pmi(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'has_pmi':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class has_prepayment_penalty(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'has_prepayment_penalty':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def interest_rate() -> typing.Type['MortgageInterestRate']:
                return MortgageInterestRate
            
            
            class last_payment_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_payment_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class last_payment_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_payment_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class loan_type_description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'loan_type_description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class loan_term(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'loan_term':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class maturity_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'maturity_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class next_monthly_payment(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'next_monthly_payment':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class next_payment_due_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'next_payment_due_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class origination_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'origination_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class origination_principal_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'origination_principal_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class past_due_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'past_due_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def property_address() -> typing.Type['MortgagePropertyAddress']:
                return MortgagePropertyAddress
            
            
            class ytd_interest_paid(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ytd_interest_paid':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ytd_principal_paid(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ytd_principal_paid':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "account_id": account_id,
                "account_number": account_number,
                "current_late_fee": current_late_fee,
                "escrow_balance": escrow_balance,
                "has_pmi": has_pmi,
                "has_prepayment_penalty": has_prepayment_penalty,
                "interest_rate": interest_rate,
                "last_payment_amount": last_payment_amount,
                "last_payment_date": last_payment_date,
                "loan_type_description": loan_type_description,
                "loan_term": loan_term,
                "maturity_date": maturity_date,
                "next_monthly_payment": next_monthly_payment,
                "next_payment_due_date": next_payment_due_date,
                "origination_date": origination_date,
                "origination_principal_amount": origination_principal_amount,
                "past_due_amount": past_due_amount,
                "property_address": property_address,
                "ytd_interest_paid": ytd_interest_paid,
                "ytd_principal_paid": ytd_principal_paid,
            }
        additional_properties = schemas.AnyTypeSchema
    
    origination_principal_amount: MetaOapg.properties.origination_principal_amount
    account_number: MetaOapg.properties.account_number
    next_monthly_payment: MetaOapg.properties.next_monthly_payment
    loan_type_description: MetaOapg.properties.loan_type_description
    escrow_balance: MetaOapg.properties.escrow_balance
    has_pmi: MetaOapg.properties.has_pmi
    last_payment_date: MetaOapg.properties.last_payment_date
    past_due_amount: MetaOapg.properties.past_due_amount
    maturity_date: MetaOapg.properties.maturity_date
    has_prepayment_penalty: MetaOapg.properties.has_prepayment_penalty
    current_late_fee: MetaOapg.properties.current_late_fee
    last_payment_amount: MetaOapg.properties.last_payment_amount
    property_address: 'MortgagePropertyAddress'
    account_id: MetaOapg.properties.account_id
    origination_date: MetaOapg.properties.origination_date
    loan_term: MetaOapg.properties.loan_term
    interest_rate: 'MortgageInterestRate'
    ytd_interest_paid: MetaOapg.properties.ytd_interest_paid
    ytd_principal_paid: MetaOapg.properties.ytd_principal_paid
    next_payment_due_date: MetaOapg.properties.next_payment_due_date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origination_principal_amount"]) -> MetaOapg.properties.origination_principal_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_number"]) -> MetaOapg.properties.account_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next_monthly_payment"]) -> MetaOapg.properties.next_monthly_payment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loan_type_description"]) -> MetaOapg.properties.loan_type_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["escrow_balance"]) -> MetaOapg.properties.escrow_balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_pmi"]) -> MetaOapg.properties.has_pmi: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_payment_date"]) -> MetaOapg.properties.last_payment_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["past_due_amount"]) -> MetaOapg.properties.past_due_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maturity_date"]) -> MetaOapg.properties.maturity_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_prepayment_penalty"]) -> MetaOapg.properties.has_prepayment_penalty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_late_fee"]) -> MetaOapg.properties.current_late_fee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_payment_amount"]) -> MetaOapg.properties.last_payment_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["property_address"]) -> 'MortgagePropertyAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origination_date"]) -> MetaOapg.properties.origination_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loan_term"]) -> MetaOapg.properties.loan_term: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interest_rate"]) -> 'MortgageInterestRate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ytd_interest_paid"]) -> MetaOapg.properties.ytd_interest_paid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ytd_principal_paid"]) -> MetaOapg.properties.ytd_principal_paid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next_payment_due_date"]) -> MetaOapg.properties.next_payment_due_date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["origination_principal_amount"], typing_extensions.Literal["account_number"], typing_extensions.Literal["next_monthly_payment"], typing_extensions.Literal["loan_type_description"], typing_extensions.Literal["escrow_balance"], typing_extensions.Literal["has_pmi"], typing_extensions.Literal["last_payment_date"], typing_extensions.Literal["past_due_amount"], typing_extensions.Literal["maturity_date"], typing_extensions.Literal["has_prepayment_penalty"], typing_extensions.Literal["current_late_fee"], typing_extensions.Literal["last_payment_amount"], typing_extensions.Literal["property_address"], typing_extensions.Literal["account_id"], typing_extensions.Literal["origination_date"], typing_extensions.Literal["loan_term"], typing_extensions.Literal["interest_rate"], typing_extensions.Literal["ytd_interest_paid"], typing_extensions.Literal["ytd_principal_paid"], typing_extensions.Literal["next_payment_due_date"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origination_principal_amount"]) -> MetaOapg.properties.origination_principal_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_number"]) -> MetaOapg.properties.account_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next_monthly_payment"]) -> MetaOapg.properties.next_monthly_payment: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loan_type_description"]) -> MetaOapg.properties.loan_type_description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["escrow_balance"]) -> MetaOapg.properties.escrow_balance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_pmi"]) -> MetaOapg.properties.has_pmi: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_payment_date"]) -> MetaOapg.properties.last_payment_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["past_due_amount"]) -> MetaOapg.properties.past_due_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maturity_date"]) -> MetaOapg.properties.maturity_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_prepayment_penalty"]) -> MetaOapg.properties.has_prepayment_penalty: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_late_fee"]) -> MetaOapg.properties.current_late_fee: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_payment_amount"]) -> MetaOapg.properties.last_payment_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["property_address"]) -> 'MortgagePropertyAddress': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origination_date"]) -> MetaOapg.properties.origination_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loan_term"]) -> MetaOapg.properties.loan_term: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interest_rate"]) -> 'MortgageInterestRate': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ytd_interest_paid"]) -> MetaOapg.properties.ytd_interest_paid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ytd_principal_paid"]) -> MetaOapg.properties.ytd_principal_paid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next_payment_due_date"]) -> MetaOapg.properties.next_payment_due_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["origination_principal_amount"], typing_extensions.Literal["account_number"], typing_extensions.Literal["next_monthly_payment"], typing_extensions.Literal["loan_type_description"], typing_extensions.Literal["escrow_balance"], typing_extensions.Literal["has_pmi"], typing_extensions.Literal["last_payment_date"], typing_extensions.Literal["past_due_amount"], typing_extensions.Literal["maturity_date"], typing_extensions.Literal["has_prepayment_penalty"], typing_extensions.Literal["current_late_fee"], typing_extensions.Literal["last_payment_amount"], typing_extensions.Literal["property_address"], typing_extensions.Literal["account_id"], typing_extensions.Literal["origination_date"], typing_extensions.Literal["loan_term"], typing_extensions.Literal["interest_rate"], typing_extensions.Literal["ytd_interest_paid"], typing_extensions.Literal["ytd_principal_paid"], typing_extensions.Literal["next_payment_due_date"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        origination_principal_amount: typing.Union[MetaOapg.properties.origination_principal_amount, None, decimal.Decimal, int, float, ],
        account_number: typing.Union[MetaOapg.properties.account_number, str, ],
        next_monthly_payment: typing.Union[MetaOapg.properties.next_monthly_payment, None, decimal.Decimal, int, float, ],
        loan_type_description: typing.Union[MetaOapg.properties.loan_type_description, None, str, ],
        escrow_balance: typing.Union[MetaOapg.properties.escrow_balance, None, decimal.Decimal, int, float, ],
        has_pmi: typing.Union[MetaOapg.properties.has_pmi, None, bool, ],
        last_payment_date: typing.Union[MetaOapg.properties.last_payment_date, None, str, date, ],
        past_due_amount: typing.Union[MetaOapg.properties.past_due_amount, None, decimal.Decimal, int, float, ],
        maturity_date: typing.Union[MetaOapg.properties.maturity_date, None, str, date, ],
        has_prepayment_penalty: typing.Union[MetaOapg.properties.has_prepayment_penalty, None, bool, ],
        current_late_fee: typing.Union[MetaOapg.properties.current_late_fee, None, decimal.Decimal, int, float, ],
        last_payment_amount: typing.Union[MetaOapg.properties.last_payment_amount, None, decimal.Decimal, int, float, ],
        property_address: 'MortgagePropertyAddress',
        account_id: typing.Union[MetaOapg.properties.account_id, str, ],
        origination_date: typing.Union[MetaOapg.properties.origination_date, None, str, date, ],
        loan_term: typing.Union[MetaOapg.properties.loan_term, None, str, ],
        interest_rate: 'MortgageInterestRate',
        ytd_interest_paid: typing.Union[MetaOapg.properties.ytd_interest_paid, None, decimal.Decimal, int, float, ],
        ytd_principal_paid: typing.Union[MetaOapg.properties.ytd_principal_paid, None, decimal.Decimal, int, float, ],
        next_payment_due_date: typing.Union[MetaOapg.properties.next_payment_due_date, None, str, date, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'MortgageLiability':
        return super().__new__(
            cls,
            *_args,
            origination_principal_amount=origination_principal_amount,
            account_number=account_number,
            next_monthly_payment=next_monthly_payment,
            loan_type_description=loan_type_description,
            escrow_balance=escrow_balance,
            has_pmi=has_pmi,
            last_payment_date=last_payment_date,
            past_due_amount=past_due_amount,
            maturity_date=maturity_date,
            has_prepayment_penalty=has_prepayment_penalty,
            current_late_fee=current_late_fee,
            last_payment_amount=last_payment_amount,
            property_address=property_address,
            account_id=account_id,
            origination_date=origination_date,
            loan_term=loan_term,
            interest_rate=interest_rate,
            ytd_interest_paid=ytd_interest_paid,
            ytd_principal_paid=ytd_principal_paid,
            next_payment_due_date=next_payment_due_date,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.mortgage_interest_rate import MortgageInterestRate
from plaid.model.mortgage_property_address import MortgagePropertyAddress
