# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class W2(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    W2 is an object that represents income data taken from a W2 tax document.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def employer() -> typing.Type['PaystubEmployer']:
                return PaystubEmployer
        
            @staticmethod
            def employee() -> typing.Type['Employee']:
                return Employee
            
            
            class tax_year(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tax_year':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class employer_id_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employer_id_number':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class wages_tips_other_comp(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'wages_tips_other_comp':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class federal_income_tax_withheld(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'federal_income_tax_withheld':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class social_security_wages(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'social_security_wages':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class social_security_tax_withheld(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'social_security_tax_withheld':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class medicare_wages_and_tips(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'medicare_wages_and_tips':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class medicare_tax_withheld(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'medicare_tax_withheld':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class social_security_tips(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'social_security_tips':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class allocated_tips(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allocated_tips':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class box_9(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'box_9':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class dependent_care_benefits(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dependent_care_benefits':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class nonqualified_plans(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nonqualified_plans':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class box_12(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['W2Box12']:
                        return W2Box12
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['W2Box12'], typing.List['W2Box12']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'box_12':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'W2Box12':
                    return super().__getitem__(i)
            
            
            class statutory_employee(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'statutory_employee':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class retirement_plan(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'retirement_plan':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class third_party_sick_pay(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'third_party_sick_pay':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class other(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'other':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class state_and_local_wages(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['W2StateAndLocalWages']:
                        return W2StateAndLocalWages
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['W2StateAndLocalWages'], typing.List['W2StateAndLocalWages']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state_and_local_wages':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'W2StateAndLocalWages':
                    return super().__getitem__(i)
            __annotations__ = {
                "employer": employer,
                "employee": employee,
                "tax_year": tax_year,
                "employer_id_number": employer_id_number,
                "wages_tips_other_comp": wages_tips_other_comp,
                "federal_income_tax_withheld": federal_income_tax_withheld,
                "social_security_wages": social_security_wages,
                "social_security_tax_withheld": social_security_tax_withheld,
                "medicare_wages_and_tips": medicare_wages_and_tips,
                "medicare_tax_withheld": medicare_tax_withheld,
                "social_security_tips": social_security_tips,
                "allocated_tips": allocated_tips,
                "box_9": box_9,
                "dependent_care_benefits": dependent_care_benefits,
                "nonqualified_plans": nonqualified_plans,
                "box_12": box_12,
                "statutory_employee": statutory_employee,
                "retirement_plan": retirement_plan,
                "third_party_sick_pay": third_party_sick_pay,
                "other": other,
                "state_and_local_wages": state_and_local_wages,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employer"]) -> 'PaystubEmployer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee"]) -> 'Employee': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_year"]) -> MetaOapg.properties.tax_year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employer_id_number"]) -> MetaOapg.properties.employer_id_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wages_tips_other_comp"]) -> MetaOapg.properties.wages_tips_other_comp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["federal_income_tax_withheld"]) -> MetaOapg.properties.federal_income_tax_withheld: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["social_security_wages"]) -> MetaOapg.properties.social_security_wages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["social_security_tax_withheld"]) -> MetaOapg.properties.social_security_tax_withheld: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["medicare_wages_and_tips"]) -> MetaOapg.properties.medicare_wages_and_tips: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["medicare_tax_withheld"]) -> MetaOapg.properties.medicare_tax_withheld: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["social_security_tips"]) -> MetaOapg.properties.social_security_tips: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocated_tips"]) -> MetaOapg.properties.allocated_tips: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["box_9"]) -> MetaOapg.properties.box_9: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependent_care_benefits"]) -> MetaOapg.properties.dependent_care_benefits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nonqualified_plans"]) -> MetaOapg.properties.nonqualified_plans: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["box_12"]) -> MetaOapg.properties.box_12: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statutory_employee"]) -> MetaOapg.properties.statutory_employee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retirement_plan"]) -> MetaOapg.properties.retirement_plan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["third_party_sick_pay"]) -> MetaOapg.properties.third_party_sick_pay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other"]) -> MetaOapg.properties.other: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_and_local_wages"]) -> MetaOapg.properties.state_and_local_wages: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employer"], typing_extensions.Literal["employee"], typing_extensions.Literal["tax_year"], typing_extensions.Literal["employer_id_number"], typing_extensions.Literal["wages_tips_other_comp"], typing_extensions.Literal["federal_income_tax_withheld"], typing_extensions.Literal["social_security_wages"], typing_extensions.Literal["social_security_tax_withheld"], typing_extensions.Literal["medicare_wages_and_tips"], typing_extensions.Literal["medicare_tax_withheld"], typing_extensions.Literal["social_security_tips"], typing_extensions.Literal["allocated_tips"], typing_extensions.Literal["box_9"], typing_extensions.Literal["dependent_care_benefits"], typing_extensions.Literal["nonqualified_plans"], typing_extensions.Literal["box_12"], typing_extensions.Literal["statutory_employee"], typing_extensions.Literal["retirement_plan"], typing_extensions.Literal["third_party_sick_pay"], typing_extensions.Literal["other"], typing_extensions.Literal["state_and_local_wages"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employer"]) -> typing.Union['PaystubEmployer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee"]) -> typing.Union['Employee', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_year"]) -> typing.Union[MetaOapg.properties.tax_year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employer_id_number"]) -> typing.Union[MetaOapg.properties.employer_id_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wages_tips_other_comp"]) -> typing.Union[MetaOapg.properties.wages_tips_other_comp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["federal_income_tax_withheld"]) -> typing.Union[MetaOapg.properties.federal_income_tax_withheld, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["social_security_wages"]) -> typing.Union[MetaOapg.properties.social_security_wages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["social_security_tax_withheld"]) -> typing.Union[MetaOapg.properties.social_security_tax_withheld, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["medicare_wages_and_tips"]) -> typing.Union[MetaOapg.properties.medicare_wages_and_tips, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["medicare_tax_withheld"]) -> typing.Union[MetaOapg.properties.medicare_tax_withheld, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["social_security_tips"]) -> typing.Union[MetaOapg.properties.social_security_tips, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocated_tips"]) -> typing.Union[MetaOapg.properties.allocated_tips, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["box_9"]) -> typing.Union[MetaOapg.properties.box_9, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependent_care_benefits"]) -> typing.Union[MetaOapg.properties.dependent_care_benefits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nonqualified_plans"]) -> typing.Union[MetaOapg.properties.nonqualified_plans, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["box_12"]) -> typing.Union[MetaOapg.properties.box_12, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statutory_employee"]) -> typing.Union[MetaOapg.properties.statutory_employee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retirement_plan"]) -> typing.Union[MetaOapg.properties.retirement_plan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["third_party_sick_pay"]) -> typing.Union[MetaOapg.properties.third_party_sick_pay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other"]) -> typing.Union[MetaOapg.properties.other, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_and_local_wages"]) -> typing.Union[MetaOapg.properties.state_and_local_wages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employer"], typing_extensions.Literal["employee"], typing_extensions.Literal["tax_year"], typing_extensions.Literal["employer_id_number"], typing_extensions.Literal["wages_tips_other_comp"], typing_extensions.Literal["federal_income_tax_withheld"], typing_extensions.Literal["social_security_wages"], typing_extensions.Literal["social_security_tax_withheld"], typing_extensions.Literal["medicare_wages_and_tips"], typing_extensions.Literal["medicare_tax_withheld"], typing_extensions.Literal["social_security_tips"], typing_extensions.Literal["allocated_tips"], typing_extensions.Literal["box_9"], typing_extensions.Literal["dependent_care_benefits"], typing_extensions.Literal["nonqualified_plans"], typing_extensions.Literal["box_12"], typing_extensions.Literal["statutory_employee"], typing_extensions.Literal["retirement_plan"], typing_extensions.Literal["third_party_sick_pay"], typing_extensions.Literal["other"], typing_extensions.Literal["state_and_local_wages"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        employer: typing.Union['PaystubEmployer', schemas.Unset] = schemas.unset,
        employee: typing.Union['Employee', schemas.Unset] = schemas.unset,
        tax_year: typing.Union[MetaOapg.properties.tax_year, None, str, schemas.Unset] = schemas.unset,
        employer_id_number: typing.Union[MetaOapg.properties.employer_id_number, None, str, schemas.Unset] = schemas.unset,
        wages_tips_other_comp: typing.Union[MetaOapg.properties.wages_tips_other_comp, None, str, schemas.Unset] = schemas.unset,
        federal_income_tax_withheld: typing.Union[MetaOapg.properties.federal_income_tax_withheld, None, str, schemas.Unset] = schemas.unset,
        social_security_wages: typing.Union[MetaOapg.properties.social_security_wages, None, str, schemas.Unset] = schemas.unset,
        social_security_tax_withheld: typing.Union[MetaOapg.properties.social_security_tax_withheld, None, str, schemas.Unset] = schemas.unset,
        medicare_wages_and_tips: typing.Union[MetaOapg.properties.medicare_wages_and_tips, None, str, schemas.Unset] = schemas.unset,
        medicare_tax_withheld: typing.Union[MetaOapg.properties.medicare_tax_withheld, None, str, schemas.Unset] = schemas.unset,
        social_security_tips: typing.Union[MetaOapg.properties.social_security_tips, None, str, schemas.Unset] = schemas.unset,
        allocated_tips: typing.Union[MetaOapg.properties.allocated_tips, None, str, schemas.Unset] = schemas.unset,
        box_9: typing.Union[MetaOapg.properties.box_9, None, str, schemas.Unset] = schemas.unset,
        dependent_care_benefits: typing.Union[MetaOapg.properties.dependent_care_benefits, None, str, schemas.Unset] = schemas.unset,
        nonqualified_plans: typing.Union[MetaOapg.properties.nonqualified_plans, None, str, schemas.Unset] = schemas.unset,
        box_12: typing.Union[MetaOapg.properties.box_12, list, tuple, schemas.Unset] = schemas.unset,
        statutory_employee: typing.Union[MetaOapg.properties.statutory_employee, None, str, schemas.Unset] = schemas.unset,
        retirement_plan: typing.Union[MetaOapg.properties.retirement_plan, None, str, schemas.Unset] = schemas.unset,
        third_party_sick_pay: typing.Union[MetaOapg.properties.third_party_sick_pay, None, str, schemas.Unset] = schemas.unset,
        other: typing.Union[MetaOapg.properties.other, None, str, schemas.Unset] = schemas.unset,
        state_and_local_wages: typing.Union[MetaOapg.properties.state_and_local_wages, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'W2':
        return super().__new__(
            cls,
            *_args,
            employer=employer,
            employee=employee,
            tax_year=tax_year,
            employer_id_number=employer_id_number,
            wages_tips_other_comp=wages_tips_other_comp,
            federal_income_tax_withheld=federal_income_tax_withheld,
            social_security_wages=social_security_wages,
            social_security_tax_withheld=social_security_tax_withheld,
            medicare_wages_and_tips=medicare_wages_and_tips,
            medicare_tax_withheld=medicare_tax_withheld,
            social_security_tips=social_security_tips,
            allocated_tips=allocated_tips,
            box_9=box_9,
            dependent_care_benefits=dependent_care_benefits,
            nonqualified_plans=nonqualified_plans,
            box_12=box_12,
            statutory_employee=statutory_employee,
            retirement_plan=retirement_plan,
            third_party_sick_pay=third_party_sick_pay,
            other=other,
            state_and_local_wages=state_and_local_wages,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.employee import Employee
from plaid.model.paystub_employer import PaystubEmployer
from plaid.model.w2_box12 import W2Box12
from plaid.model.w2_state_and_local_wages import W2StateAndLocalWages
