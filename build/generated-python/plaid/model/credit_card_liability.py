# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class CreditCardLiability(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An object representing a credit card account.
    """


    class MetaOapg:
        required = {
            "account_id",
            "last_payment_date",
            "is_overdue",
            "last_statement_issue_date",
            "minimum_payment_amount",
            "aprs",
            "last_payment_amount",
            "next_payment_due_date",
            "last_statement_balance",
        }
        
        class properties:
            
            
            class account_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'account_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class aprs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['APR']:
                        return APR
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['APR'], typing.List['APR']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'aprs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'APR':
                    return super().__getitem__(i)
            
            
            class is_overdue(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_overdue':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class last_payment_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_payment_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class last_payment_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_payment_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class last_statement_issue_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_statement_issue_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class last_statement_balance(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_statement_balance':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class minimum_payment_amount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'minimum_payment_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class next_payment_due_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'next_payment_due_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "account_id": account_id,
                "aprs": aprs,
                "is_overdue": is_overdue,
                "last_payment_amount": last_payment_amount,
                "last_payment_date": last_payment_date,
                "last_statement_issue_date": last_statement_issue_date,
                "last_statement_balance": last_statement_balance,
                "minimum_payment_amount": minimum_payment_amount,
                "next_payment_due_date": next_payment_due_date,
            }
        additional_properties = schemas.AnyTypeSchema
    
    account_id: MetaOapg.properties.account_id
    last_payment_date: MetaOapg.properties.last_payment_date
    is_overdue: MetaOapg.properties.is_overdue
    last_statement_issue_date: MetaOapg.properties.last_statement_issue_date
    minimum_payment_amount: MetaOapg.properties.minimum_payment_amount
    aprs: MetaOapg.properties.aprs
    last_payment_amount: MetaOapg.properties.last_payment_amount
    next_payment_due_date: MetaOapg.properties.next_payment_due_date
    last_statement_balance: MetaOapg.properties.last_statement_balance
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_payment_date"]) -> MetaOapg.properties.last_payment_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_overdue"]) -> MetaOapg.properties.is_overdue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_statement_issue_date"]) -> MetaOapg.properties.last_statement_issue_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimum_payment_amount"]) -> MetaOapg.properties.minimum_payment_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aprs"]) -> MetaOapg.properties.aprs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_payment_amount"]) -> MetaOapg.properties.last_payment_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next_payment_due_date"]) -> MetaOapg.properties.next_payment_due_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_statement_balance"]) -> MetaOapg.properties.last_statement_balance: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account_id"], typing_extensions.Literal["last_payment_date"], typing_extensions.Literal["is_overdue"], typing_extensions.Literal["last_statement_issue_date"], typing_extensions.Literal["minimum_payment_amount"], typing_extensions.Literal["aprs"], typing_extensions.Literal["last_payment_amount"], typing_extensions.Literal["next_payment_due_date"], typing_extensions.Literal["last_statement_balance"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_payment_date"]) -> MetaOapg.properties.last_payment_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_overdue"]) -> MetaOapg.properties.is_overdue: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_statement_issue_date"]) -> MetaOapg.properties.last_statement_issue_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimum_payment_amount"]) -> MetaOapg.properties.minimum_payment_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aprs"]) -> MetaOapg.properties.aprs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_payment_amount"]) -> MetaOapg.properties.last_payment_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next_payment_due_date"]) -> MetaOapg.properties.next_payment_due_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_statement_balance"]) -> MetaOapg.properties.last_statement_balance: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account_id"], typing_extensions.Literal["last_payment_date"], typing_extensions.Literal["is_overdue"], typing_extensions.Literal["last_statement_issue_date"], typing_extensions.Literal["minimum_payment_amount"], typing_extensions.Literal["aprs"], typing_extensions.Literal["last_payment_amount"], typing_extensions.Literal["next_payment_due_date"], typing_extensions.Literal["last_statement_balance"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        account_id: typing.Union[MetaOapg.properties.account_id, None, str, ],
        last_payment_date: typing.Union[MetaOapg.properties.last_payment_date, None, str, date, ],
        is_overdue: typing.Union[MetaOapg.properties.is_overdue, None, bool, ],
        last_statement_issue_date: typing.Union[MetaOapg.properties.last_statement_issue_date, None, str, date, ],
        minimum_payment_amount: typing.Union[MetaOapg.properties.minimum_payment_amount, None, decimal.Decimal, int, float, ],
        aprs: typing.Union[MetaOapg.properties.aprs, list, tuple, ],
        last_payment_amount: typing.Union[MetaOapg.properties.last_payment_amount, None, decimal.Decimal, int, float, ],
        next_payment_due_date: typing.Union[MetaOapg.properties.next_payment_due_date, None, str, date, ],
        last_statement_balance: typing.Union[MetaOapg.properties.last_statement_balance, None, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'CreditCardLiability':
        return super().__new__(
            cls,
            *_args,
            account_id=account_id,
            last_payment_date=last_payment_date,
            is_overdue=is_overdue,
            last_statement_issue_date=last_statement_issue_date,
            minimum_payment_amount=minimum_payment_amount,
            aprs=aprs,
            last_payment_amount=last_payment_amount,
            next_payment_due_date=next_payment_due_date,
            last_statement_balance=last_statement_balance,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.apr import APR
