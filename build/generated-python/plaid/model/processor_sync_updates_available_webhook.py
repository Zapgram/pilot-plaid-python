# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class ProcessorSyncUpdatesAvailableWebhook(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    This webhook is only sent to [Plaid processor partners](https://plaid.com/docs/auth/partnerships/).

Fired when an Item's transactions change. This can be due to any event resulting in new changes, such as an initial 30-day transactions fetch upon the initialization of an Item with transactions, the backfill of historical transactions that occurs shortly after, or when changes are populated from a regularly-scheduled transactions update job. It is recommended to listen for the `SYNC_UPDATES_AVAILABLE` webhook when using the `/processor/transactions/sync` endpoint. Note that when using `/processor/transactions/sync` the older webhooks `INITIAL_UPDATE`, `HISTORICAL_UPDATE`, `DEFAULT_UPDATE`, and `TRANSACTIONS_REMOVED`, which are intended for use with `/processor/transactions/get`, will also continue to be sent in order to maintain backwards compatibility. It is not necessary to listen for and respond to those webhooks when using `/processor/transactions/sync`.

After receipt of this webhook, the new changes can be fetched for the Item from `/processor/transactions/sync`.

Note that to receive this webhook for an Item, `/processor/transactions/sync` must have been called at least once on that Item. This means that, unlike the `INITIAL_UPDATE` and `HISTORICAL_UPDATE` webhooks, it will not fire immediately upon Item creation. If `/transactions/sync` is called on an Item that was *not* initialized with Transactions, the webhook will fire twice: once the first 30 days of transactions data has been fetched, and a second time when all available historical transactions data has been fetched.

This webhook will typically not fire in the Sandbox environment, due to the lack of dynamic transactions data. To test this webhook in Sandbox, call `/sandbox/item/fire_webhook`.
    """


    class MetaOapg:
        required = {
            "environment",
            "historical_update_complete",
            "initial_update_complete",
            "account_id",
            "webhook_type",
            "webhook_code",
        }
        
        class properties:
            webhook_type = schemas.StrSchema
            webhook_code = schemas.StrSchema
            account_id = schemas.StrSchema
            initial_update_complete = schemas.BoolSchema
            historical_update_complete = schemas.BoolSchema
        
            @staticmethod
            def environment() -> typing.Type['WebhookEnvironmentValues']:
                return WebhookEnvironmentValues
            __annotations__ = {
                "webhook_type": webhook_type,
                "webhook_code": webhook_code,
                "account_id": account_id,
                "initial_update_complete": initial_update_complete,
                "historical_update_complete": historical_update_complete,
                "environment": environment,
            }
        additional_properties = schemas.AnyTypeSchema
    
    environment: 'WebhookEnvironmentValues'
    historical_update_complete: MetaOapg.properties.historical_update_complete
    initial_update_complete: MetaOapg.properties.initial_update_complete
    account_id: MetaOapg.properties.account_id
    webhook_type: MetaOapg.properties.webhook_type
    webhook_code: MetaOapg.properties.webhook_code
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment"]) -> 'WebhookEnvironmentValues': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["historical_update_complete"]) -> MetaOapg.properties.historical_update_complete: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initial_update_complete"]) -> MetaOapg.properties.initial_update_complete: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhook_type"]) -> MetaOapg.properties.webhook_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhook_code"]) -> MetaOapg.properties.webhook_code: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["environment"], typing_extensions.Literal["historical_update_complete"], typing_extensions.Literal["initial_update_complete"], typing_extensions.Literal["account_id"], typing_extensions.Literal["webhook_type"], typing_extensions.Literal["webhook_code"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment"]) -> 'WebhookEnvironmentValues': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["historical_update_complete"]) -> MetaOapg.properties.historical_update_complete: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initial_update_complete"]) -> MetaOapg.properties.initial_update_complete: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhook_type"]) -> MetaOapg.properties.webhook_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhook_code"]) -> MetaOapg.properties.webhook_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["environment"], typing_extensions.Literal["historical_update_complete"], typing_extensions.Literal["initial_update_complete"], typing_extensions.Literal["account_id"], typing_extensions.Literal["webhook_type"], typing_extensions.Literal["webhook_code"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        environment: 'WebhookEnvironmentValues',
        historical_update_complete: typing.Union[MetaOapg.properties.historical_update_complete, bool, ],
        initial_update_complete: typing.Union[MetaOapg.properties.initial_update_complete, bool, ],
        account_id: typing.Union[MetaOapg.properties.account_id, str, ],
        webhook_type: typing.Union[MetaOapg.properties.webhook_type, str, ],
        webhook_code: typing.Union[MetaOapg.properties.webhook_code, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'ProcessorSyncUpdatesAvailableWebhook':
        return super().__new__(
            cls,
            *_args,
            environment=environment,
            historical_update_complete=historical_update_complete,
            initial_update_complete=initial_update_complete,
            account_id=account_id,
            webhook_type=webhook_type,
            webhook_code=webhook_code,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.webhook_environment_values import WebhookEnvironmentValues
