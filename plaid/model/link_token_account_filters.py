# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class LinkTokenAccountFilters(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    By default, Link will provide limited account filtering: it will only display Institutions that are compatible with all products supplied in the `products` parameter of `/link/token/create`, and, if `auth` is specified in the `products` array, will also filter out accounts other than `checking` and `savings` accounts on the Account Select pane. You can further limit the accounts shown in Link by using `account_filters` to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value `"all"`. If the `account_filters` filter is used, any account type for which a filter is not specified will be entirely omitted from Link. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).

For institutions using OAuth, the filter will not affect the list of accounts shown by the bank in the OAuth window.

    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def depository() -> typing.Type['DepositoryFilter']:
                return DepositoryFilter
        
            @staticmethod
            def credit() -> typing.Type['CreditFilter']:
                return CreditFilter
        
            @staticmethod
            def loan() -> typing.Type['LoanFilter']:
                return LoanFilter
        
            @staticmethod
            def investment() -> typing.Type['InvestmentFilter']:
                return InvestmentFilter
            __annotations__ = {
                "depository": depository,
                "credit": credit,
                "loan": loan,
                "investment": investment,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depository"]) -> 'DepositoryFilter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credit"]) -> 'CreditFilter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loan"]) -> 'LoanFilter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investment"]) -> 'InvestmentFilter': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["depository"], typing_extensions.Literal["credit"], typing_extensions.Literal["loan"], typing_extensions.Literal["investment"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depository"]) -> typing.Union['DepositoryFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credit"]) -> typing.Union['CreditFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loan"]) -> typing.Union['LoanFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investment"]) -> typing.Union['InvestmentFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["depository"], typing_extensions.Literal["credit"], typing_extensions.Literal["loan"], typing_extensions.Literal["investment"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        depository: typing.Union['DepositoryFilter', schemas.Unset] = schemas.unset,
        credit: typing.Union['CreditFilter', schemas.Unset] = schemas.unset,
        loan: typing.Union['LoanFilter', schemas.Unset] = schemas.unset,
        investment: typing.Union['InvestmentFilter', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'LinkTokenAccountFilters':
        return super().__new__(
            cls,
            *_args,
            depository=depository,
            credit=credit,
            loan=loan,
            investment=investment,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.credit_filter import CreditFilter
from plaid.model.depository_filter import DepositoryFilter
from plaid.model.investment_filter import InvestmentFilter
from plaid.model.loan_filter import LoanFilter
