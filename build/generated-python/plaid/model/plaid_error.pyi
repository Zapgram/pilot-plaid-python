# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class PlaidError(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead.
    """


    class MetaOapg:
        required = {
            "error_message",
            "error_type",
            "display_message",
            "error_code",
        }
        
        class properties:
        
            @staticmethod
            def error_type() -> typing.Type['PlaidErrorType']:
                return PlaidErrorType
            error_code = schemas.StrSchema
            error_message = schemas.StrSchema
            
            
            class display_message(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'display_message':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            request_id = schemas.StrSchema
            
            
            class causes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'causes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class status(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            documentation_url = schemas.StrSchema
            
            
            class suggested_action(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'suggested_action':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "error_type": error_type,
                "error_code": error_code,
                "error_message": error_message,
                "display_message": display_message,
                "request_id": request_id,
                "causes": causes,
                "status": status,
                "documentation_url": documentation_url,
                "suggested_action": suggested_action,
            }
        additional_properties = schemas.AnyTypeSchema

    
    error_message: MetaOapg.properties.error_message
    error_type: 'PlaidErrorType'
    display_message: MetaOapg.properties.display_message
    error_code: MetaOapg.properties.error_code
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_message"]) -> MetaOapg.properties.error_message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_type"]) -> 'PlaidErrorType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_message"]) -> MetaOapg.properties.display_message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_code"]) -> MetaOapg.properties.error_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["causes"]) -> MetaOapg.properties.causes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentation_url"]) -> MetaOapg.properties.documentation_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suggested_action"]) -> MetaOapg.properties.suggested_action: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["error_message"], typing_extensions.Literal["error_type"], typing_extensions.Literal["display_message"], typing_extensions.Literal["error_code"], typing_extensions.Literal["request_id"], typing_extensions.Literal["causes"], typing_extensions.Literal["status"], typing_extensions.Literal["documentation_url"], typing_extensions.Literal["suggested_action"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_message"]) -> MetaOapg.properties.error_message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_type"]) -> 'PlaidErrorType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_message"]) -> MetaOapg.properties.display_message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_code"]) -> MetaOapg.properties.error_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> typing.Union[MetaOapg.properties.request_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["causes"]) -> typing.Union[MetaOapg.properties.causes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentation_url"]) -> typing.Union[MetaOapg.properties.documentation_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suggested_action"]) -> typing.Union[MetaOapg.properties.suggested_action, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["error_message"], typing_extensions.Literal["error_type"], typing_extensions.Literal["display_message"], typing_extensions.Literal["error_code"], typing_extensions.Literal["request_id"], typing_extensions.Literal["causes"], typing_extensions.Literal["status"], typing_extensions.Literal["documentation_url"], typing_extensions.Literal["suggested_action"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        request_id: typing.Union[MetaOapg.properties.request_id, str, schemas.Unset] = schemas.unset,
        causes: typing.Union[MetaOapg.properties.causes, list, tuple, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        documentation_url: typing.Union[MetaOapg.properties.documentation_url, str, schemas.Unset] = schemas.unset,
        suggested_action: typing.Union[MetaOapg.properties.suggested_action, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'PlaidError':
        return super().__new__(
            cls,
            *_args,
            request_id=request_id,
            causes=causes,
            status=status,
            documentation_url=documentation_url,
            suggested_action=suggested_action,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.plaid_error_type import PlaidErrorType
