# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class EarningsBreakdownCanonicalDescription(
    schemas.EnumBase,
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Commonly used term to describe the earning line item.
    """


    class MetaOapg:
        enum_value_to_name = {
            "BONUS": "BONUS",
            "COMMISSION": "COMMISSION",
            "OVERTIME": "OVERTIME",
            "PAID TIME OFF": "PAID_TIME_OFF",
            "REGULAR PAY": "REGULAR_PAY",
            "VACATION": "VACATION",
            "BASIC ALLOWANCE HOUSING": "BASIC_ALLOWANCE_HOUSING",
            "BASIC ALLOWANCE SUBSISTENCE": "BASIC_ALLOWANCE_SUBSISTENCE",
            "OTHER": "OTHER",
            schemas.NoneClass.NONE: "NONE",
        }
    
    @schemas.classproperty
    def BONUS(cls):
        return cls("BONUS")
    
    @schemas.classproperty
    def COMMISSION(cls):
        return cls("COMMISSION")
    
    @schemas.classproperty
    def OVERTIME(cls):
        return cls("OVERTIME")
    
    @schemas.classproperty
    def PAID_TIME_OFF(cls):
        return cls("PAID TIME OFF")
    
    @schemas.classproperty
    def REGULAR_PAY(cls):
        return cls("REGULAR PAY")
    
    @schemas.classproperty
    def VACATION(cls):
        return cls("VACATION")
    
    @schemas.classproperty
    def BASIC_ALLOWANCE_HOUSING(cls):
        return cls("BASIC ALLOWANCE HOUSING")
    
    @schemas.classproperty
    def BASIC_ALLOWANCE_SUBSISTENCE(cls):
        return cls("BASIC ALLOWANCE SUBSISTENCE")
    
    @schemas.classproperty
    def OTHER(cls):
        return cls("OTHER")
    
    @schemas.classproperty
    def NONE(cls):
        return cls(None)


    def __new__(
        cls,
        *_args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'EarningsBreakdownCanonicalDescription':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
        )
