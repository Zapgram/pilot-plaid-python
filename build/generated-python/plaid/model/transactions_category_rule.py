# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class TransactionsCategoryRule(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A representation of a transactions category rule.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            item_id = schemas.StrSchema
            created_at = schemas.DateTimeSchema
            personal_finance_category = schemas.StrSchema
        
            @staticmethod
            def rule_details() -> typing.Type['TransactionsRuleDetails']:
                return TransactionsRuleDetails
            __annotations__ = {
                "id": id,
                "item_id": item_id,
                "created_at": created_at,
                "personal_finance_category": personal_finance_category,
                "rule_details": rule_details,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personal_finance_category"]) -> MetaOapg.properties.personal_finance_category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rule_details"]) -> 'TransactionsRuleDetails': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "item_id", "created_at", "personal_finance_category", "rule_details", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_id"]) -> typing.Union[MetaOapg.properties.item_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personal_finance_category"]) -> typing.Union[MetaOapg.properties.personal_finance_category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rule_details"]) -> typing.Union['TransactionsRuleDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "item_id", "created_at", "personal_finance_category", "rule_details", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        item_id: typing.Union[MetaOapg.properties.item_id, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        personal_finance_category: typing.Union[MetaOapg.properties.personal_finance_category, str, schemas.Unset] = schemas.unset,
        rule_details: typing.Union['TransactionsRuleDetails', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransactionsCategoryRule':
        return super().__new__(
            cls,
            *_args,
            id=id,
            item_id=item_id,
            created_at=created_at,
            personal_finance_category=personal_finance_category,
            rule_details=rule_details,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.transactions_rule_details import TransactionsRuleDetails
