# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class AccountAccess(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Allow or disallow product access by account. Unlisted (e.g. missing) accounts will be considered `new_accounts`.
    """


    class MetaOapg:
        required = {
            "unique_id",
        }
        
        class properties:
            unique_id = schemas.StrSchema
            
            
            class authorized(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'authorized':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def account_product_access() -> typing.Type['AccountProductAccessNullable']:
                return AccountProductAccessNullable
            __annotations__ = {
                "unique_id": unique_id,
                "authorized": authorized,
                "account_product_access": account_product_access,
            }
    
    unique_id: MetaOapg.properties.unique_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unique_id"]) -> MetaOapg.properties.unique_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorized"]) -> MetaOapg.properties.authorized: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_product_access"]) -> 'AccountProductAccessNullable': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["unique_id", "authorized", "account_product_access", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unique_id"]) -> MetaOapg.properties.unique_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorized"]) -> typing.Union[MetaOapg.properties.authorized, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_product_access"]) -> typing.Union['AccountProductAccessNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["unique_id", "authorized", "account_product_access", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        unique_id: typing.Union[MetaOapg.properties.unique_id, str, ],
        authorized: typing.Union[MetaOapg.properties.authorized, None, bool, schemas.Unset] = schemas.unset,
        account_product_access: typing.Union['AccountProductAccessNullable', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccountAccess':
        return super().__new__(
            cls,
            *_args,
            unique_id=unique_id,
            authorized=authorized,
            account_product_access=account_product_access,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.account_product_access_nullable import AccountProductAccessNullable
