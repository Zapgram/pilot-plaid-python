# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class StatementsAccount(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Account associated with the item.
    """


    class MetaOapg:
        required = {
            "account_type",
            "account_id",
            "account_name",
            "statements",
        }
        
        class properties:
            account_id = schemas.StrSchema
            account_name = schemas.StrSchema
            account_type = schemas.StrSchema
            
            
            class statements(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['StatementsStatement']:
                        return StatementsStatement
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['StatementsStatement'], typing.List['StatementsStatement']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'statements':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'StatementsStatement':
                    return super().__getitem__(i)
            __annotations__ = {
                "account_id": account_id,
                "account_name": account_name,
                "account_type": account_type,
                "statements": statements,
            }
        additional_properties = schemas.AnyTypeSchema
    
    account_type: MetaOapg.properties.account_type
    account_id: MetaOapg.properties.account_id
    account_name: MetaOapg.properties.account_name
    statements: MetaOapg.properties.statements
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_type"]) -> MetaOapg.properties.account_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_name"]) -> MetaOapg.properties.account_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statements"]) -> MetaOapg.properties.statements: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account_type"], typing_extensions.Literal["account_id"], typing_extensions.Literal["account_name"], typing_extensions.Literal["statements"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_type"]) -> MetaOapg.properties.account_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_name"]) -> MetaOapg.properties.account_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statements"]) -> MetaOapg.properties.statements: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account_type"], typing_extensions.Literal["account_id"], typing_extensions.Literal["account_name"], typing_extensions.Literal["statements"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        account_type: typing.Union[MetaOapg.properties.account_type, str, ],
        account_id: typing.Union[MetaOapg.properties.account_id, str, ],
        account_name: typing.Union[MetaOapg.properties.account_name, str, ],
        statements: typing.Union[MetaOapg.properties.statements, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'StatementsAccount':
        return super().__new__(
            cls,
            *_args,
            account_type=account_type,
            account_id=account_id,
            account_name=account_name,
            statements=statements,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.statements_statement import StatementsStatement
