# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class Transaction(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A representation of a transaction
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "transaction_code",
                    "authorized_datetime",
                    "datetime",
                    "payment_meta",
                    "category_id",
                    "payment_channel",
                    "name",
                    "location",
                    "pending_transaction_id",
                    "category",
                    "account_owner",
                    "authorized_date",
                }
                
                class properties:
                    
                    
                    class authorized_date(
                        schemas.DateBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date'
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, date, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'authorized_date':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
                    
                    
                    class authorized_datetime(
                        schemas.DateTimeBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date-time'
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, datetime, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'authorized_datetime':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
                    
                    
                    class datetime(
                        schemas.DateTimeBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date-time'
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, datetime, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'datetime':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
                    
                    
                    class payment_channel(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def ONLINE(cls):
                            return cls("online")
                        
                        @schemas.classproperty
                        def IN_STORE(cls):
                            return cls("in store")
                        
                        @schemas.classproperty
                        def OTHER(cls):
                            return cls("other")
                
                    @staticmethod
                    def personal_finance_category() -> typing.Type['PersonalFinanceCategory']:
                        return PersonalFinanceCategory
                
                    @staticmethod
                    def transaction_code() -> typing.Type['TransactionCode']:
                        return TransactionCode
                    personal_finance_category_icon_url = schemas.StrSchema
                    
                    
                    class counterparties(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['TransactionCounterparty']:
                                return TransactionCounterparty
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['TransactionCounterparty'], typing.List['TransactionCounterparty']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'counterparties':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'TransactionCounterparty':
                            return super().__getitem__(i)
                    __annotations__ = {
                        "authorized_date": authorized_date,
                        "authorized_datetime": authorized_datetime,
                        "datetime": datetime,
                        "payment_channel": payment_channel,
                        "personal_finance_category": personal_finance_category,
                        "transaction_code": transaction_code,
                        "personal_finance_category_icon_url": personal_finance_category_icon_url,
                        "counterparties": counterparties,
                    }
                additional_properties = schemas.AnyTypeSchema
            
            transaction_code: 'TransactionCode'
            authorized_datetime: MetaOapg.properties.authorized_datetime
            datetime: MetaOapg.properties.datetime
            payment_meta: MetaOapg.additional_properties
            category_id: MetaOapg.additional_properties
            payment_channel: MetaOapg.properties.payment_channel
            name: MetaOapg.additional_properties
            location: MetaOapg.additional_properties
            pending_transaction_id: MetaOapg.additional_properties
            category: MetaOapg.additional_properties
            account_owner: MetaOapg.additional_properties
            authorized_date: MetaOapg.properties.authorized_date
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["transaction_code"]) -> 'TransactionCode': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["authorized_datetime"]) -> MetaOapg.properties.authorized_datetime: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["datetime"]) -> MetaOapg.properties.datetime: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["payment_meta"]) -> MetaOapg.additional_properties: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.additional_properties: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["payment_channel"]) -> MetaOapg.properties.payment_channel: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.additional_properties: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.additional_properties: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["pending_transaction_id"]) -> MetaOapg.additional_properties: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.additional_properties: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["account_owner"]) -> MetaOapg.additional_properties: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["authorized_date"]) -> MetaOapg.properties.authorized_date: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["personal_finance_category"]) -> 'PersonalFinanceCategory': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["personal_finance_category_icon_url"]) -> MetaOapg.properties.personal_finance_category_icon_url: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["counterparties"]) -> MetaOapg.properties.counterparties: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["transaction_code"], typing_extensions.Literal["authorized_datetime"], typing_extensions.Literal["datetime"], typing_extensions.Literal["payment_meta"], typing_extensions.Literal["category_id"], typing_extensions.Literal["payment_channel"], typing_extensions.Literal["name"], typing_extensions.Literal["location"], typing_extensions.Literal["pending_transaction_id"], typing_extensions.Literal["category"], typing_extensions.Literal["account_owner"], typing_extensions.Literal["authorized_date"], typing_extensions.Literal["personal_finance_category"], typing_extensions.Literal["personal_finance_category_icon_url"], typing_extensions.Literal["counterparties"], str, ]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["transaction_code"]) -> 'TransactionCode': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["authorized_datetime"]) -> MetaOapg.properties.authorized_datetime: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["datetime"]) -> MetaOapg.properties.datetime: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["payment_meta"]) -> MetaOapg.additional_properties: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.additional_properties: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["payment_channel"]) -> MetaOapg.properties.payment_channel: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.additional_properties: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> MetaOapg.additional_properties: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["pending_transaction_id"]) -> MetaOapg.additional_properties: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> MetaOapg.additional_properties: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["account_owner"]) -> MetaOapg.additional_properties: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["authorized_date"]) -> MetaOapg.properties.authorized_date: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["personal_finance_category"]) -> typing.Union['PersonalFinanceCategory', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["personal_finance_category_icon_url"]) -> typing.Union[MetaOapg.properties.personal_finance_category_icon_url, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["counterparties"]) -> typing.Union[MetaOapg.properties.counterparties, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transaction_code"], typing_extensions.Literal["authorized_datetime"], typing_extensions.Literal["datetime"], typing_extensions.Literal["payment_meta"], typing_extensions.Literal["category_id"], typing_extensions.Literal["payment_channel"], typing_extensions.Literal["name"], typing_extensions.Literal["location"], typing_extensions.Literal["pending_transaction_id"], typing_extensions.Literal["category"], typing_extensions.Literal["account_owner"], typing_extensions.Literal["authorized_date"], typing_extensions.Literal["personal_finance_category"], typing_extensions.Literal["personal_finance_category_icon_url"], typing_extensions.Literal["counterparties"], str, ]):
                return super().get_item_oapg(name)
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                transaction_code: 'TransactionCode',
                authorized_datetime: typing.Union[MetaOapg.properties.authorized_datetime, None, str, datetime, ],
                datetime: typing.Union[MetaOapg.properties.datetime, None, str, datetime, ],
                payment_meta: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                category_id: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                payment_channel: typing.Union[MetaOapg.properties.payment_channel, str, ],
                name: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                location: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                pending_transaction_id: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                category: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                account_owner: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                authorized_date: typing.Union[MetaOapg.properties.authorized_date, None, str, date, ],
                personal_finance_category: typing.Union['PersonalFinanceCategory', schemas.Unset] = schemas.unset,
                personal_finance_category_icon_url: typing.Union[MetaOapg.properties.personal_finance_category_icon_url, str, schemas.Unset] = schemas.unset,
                counterparties: typing.Union[MetaOapg.properties.counterparties, list, tuple, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    transaction_code=transaction_code,
                    authorized_datetime=authorized_datetime,
                    datetime=datetime,
                    payment_meta=payment_meta,
                    category_id=category_id,
                    payment_channel=payment_channel,
                    name=name,
                    location=location,
                    pending_transaction_id=pending_transaction_id,
                    category=category,
                    account_owner=account_owner,
                    authorized_date=authorized_date,
                    personal_finance_category=personal_finance_category,
                    personal_finance_category_icon_url=personal_finance_category_icon_url,
                    counterparties=counterparties,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                TransactionBase,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Transaction':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.personal_finance_category import PersonalFinanceCategory
from plaid.model.transaction_base import TransactionBase
from plaid.model.transaction_code import TransactionCode
from plaid.model.transaction_counterparty import TransactionCounterparty
