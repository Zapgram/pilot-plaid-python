# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class ProcessorSignalReturnReportRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ProcessorSignalReturnReportRequest defines the request schema for `/processor/signal/return/report`
    """


    class MetaOapg:
        required = {
            "processor_token",
            "client_transaction_id",
            "return_code",
        }
        
        class properties:
            processor_token = schemas.StrSchema
            
            
            class client_transaction_id(
                schemas.StrSchema
            ):
                pass
            return_code = schemas.StrSchema
            client_id = schemas.StrSchema
            secret = schemas.StrSchema
            
            
            class returned_at(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'returned_at':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "processor_token": processor_token,
                "client_transaction_id": client_transaction_id,
                "return_code": return_code,
                "client_id": client_id,
                "secret": secret,
                "returned_at": returned_at,
            }
    
    processor_token: MetaOapg.properties.processor_token
    client_transaction_id: MetaOapg.properties.client_transaction_id
    return_code: MetaOapg.properties.return_code
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processor_token"]) -> MetaOapg.properties.processor_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_transaction_id"]) -> MetaOapg.properties.client_transaction_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["return_code"]) -> MetaOapg.properties.return_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_id"]) -> MetaOapg.properties.client_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["returned_at"]) -> MetaOapg.properties.returned_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["processor_token", "client_transaction_id", "return_code", "client_id", "secret", "returned_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processor_token"]) -> MetaOapg.properties.processor_token: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_transaction_id"]) -> MetaOapg.properties.client_transaction_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["return_code"]) -> MetaOapg.properties.return_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_id"]) -> typing.Union[MetaOapg.properties.client_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["returned_at"]) -> typing.Union[MetaOapg.properties.returned_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["processor_token", "client_transaction_id", "return_code", "client_id", "secret", "returned_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        processor_token: typing.Union[MetaOapg.properties.processor_token, str, ],
        client_transaction_id: typing.Union[MetaOapg.properties.client_transaction_id, str, ],
        return_code: typing.Union[MetaOapg.properties.return_code, str, ],
        client_id: typing.Union[MetaOapg.properties.client_id, str, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        returned_at: typing.Union[MetaOapg.properties.returned_at, None, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProcessorSignalReturnReportRequest':
        return super().__new__(
            cls,
            *_args,
            processor_token=processor_token,
            client_transaction_id=client_transaction_id,
            return_code=return_code,
            client_id=client_id,
            secret=secret,
            returned_at=returned_at,
            _configuration=_configuration,
            **kwargs,
        )
