# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class NameMatchScore(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Score found by matching name provided by the API with the name on the account at the financial institution. If the account contains multiple owners, the maximum match score is filled.
    """


    class MetaOapg:
        
        class properties:
            
            
            class score(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'score':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class is_first_name_or_last_name_match(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_first_name_or_last_name_match':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class is_nickname_match(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_nickname_match':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class is_business_name_detected(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_business_name_detected':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "score": score,
                "is_first_name_or_last_name_match": is_first_name_or_last_name_match,
                "is_nickname_match": is_nickname_match,
                "is_business_name_detected": is_business_name_detected,
            }
        additional_properties = schemas.AnyTypeSchema

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_first_name_or_last_name_match"]) -> MetaOapg.properties.is_first_name_or_last_name_match: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_nickname_match"]) -> MetaOapg.properties.is_nickname_match: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_business_name_detected"]) -> MetaOapg.properties.is_business_name_detected: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["score"], typing_extensions.Literal["is_first_name_or_last_name_match"], typing_extensions.Literal["is_nickname_match"], typing_extensions.Literal["is_business_name_detected"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> typing.Union[MetaOapg.properties.score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_first_name_or_last_name_match"]) -> typing.Union[MetaOapg.properties.is_first_name_or_last_name_match, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_nickname_match"]) -> typing.Union[MetaOapg.properties.is_nickname_match, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_business_name_detected"]) -> typing.Union[MetaOapg.properties.is_business_name_detected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["score"], typing_extensions.Literal["is_first_name_or_last_name_match"], typing_extensions.Literal["is_nickname_match"], typing_extensions.Literal["is_business_name_detected"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        score: typing.Union[MetaOapg.properties.score, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        is_first_name_or_last_name_match: typing.Union[MetaOapg.properties.is_first_name_or_last_name_match, None, bool, schemas.Unset] = schemas.unset,
        is_nickname_match: typing.Union[MetaOapg.properties.is_nickname_match, None, bool, schemas.Unset] = schemas.unset,
        is_business_name_detected: typing.Union[MetaOapg.properties.is_business_name_detected, None, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'NameMatchScore':
        return super().__new__(
            cls,
            *_args,
            score=score,
            is_first_name_or_last_name_match=is_first_name_or_last_name_match,
            is_nickname_match=is_nickname_match,
            is_business_name_detected=is_business_name_detected,
            _configuration=_configuration,
            **kwargs,
        )
