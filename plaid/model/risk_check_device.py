# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class RiskCheckDevice(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Result summary object specifying values for `device` attributes of risk check.
    """


    class MetaOapg:
        required = {
            "ip_timezone_offset",
            "ip_proxy_type",
            "ip_spam_list_count",
        }
        
        class properties:
        
            @staticmethod
            def ip_proxy_type() -> typing.Type['ProxyType']:
                return ProxyType
            
            
            class ip_spam_list_count(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ip_spam_list_count':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def ip_timezone_offset() -> typing.Type['UTCOffset']:
                return UTCOffset
            __annotations__ = {
                "ip_proxy_type": ip_proxy_type,
                "ip_spam_list_count": ip_spam_list_count,
                "ip_timezone_offset": ip_timezone_offset,
            }
        additional_properties = schemas.AnyTypeSchema
    
    ip_timezone_offset: 'UTCOffset'
    ip_proxy_type: 'ProxyType'
    ip_spam_list_count: MetaOapg.properties.ip_spam_list_count
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip_timezone_offset"]) -> 'UTCOffset': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip_proxy_type"]) -> 'ProxyType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip_spam_list_count"]) -> MetaOapg.properties.ip_spam_list_count: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ip_timezone_offset"], typing_extensions.Literal["ip_proxy_type"], typing_extensions.Literal["ip_spam_list_count"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip_timezone_offset"]) -> 'UTCOffset': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip_proxy_type"]) -> 'ProxyType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip_spam_list_count"]) -> MetaOapg.properties.ip_spam_list_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ip_timezone_offset"], typing_extensions.Literal["ip_proxy_type"], typing_extensions.Literal["ip_spam_list_count"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ip_timezone_offset: 'UTCOffset',
        ip_proxy_type: 'ProxyType',
        ip_spam_list_count: typing.Union[MetaOapg.properties.ip_spam_list_count, None, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'RiskCheckDevice':
        return super().__new__(
            cls,
            *_args,
            ip_timezone_offset=ip_timezone_offset,
            ip_proxy_type=ip_proxy_type,
            ip_spam_list_count=ip_spam_list_count,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.proxy_type import ProxyType
from plaid.model.utc_offset import UTCOffset
