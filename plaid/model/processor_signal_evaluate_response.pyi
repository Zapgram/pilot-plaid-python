# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class ProcessorSignalEvaluateResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ProcessorSignalEvaluateResponse defines the response schema for `/processor/signal/evaluate`
    """


    class MetaOapg:
        required = {
            "scores",
            "request_id",
        }
        
        class properties:
            request_id = schemas.StrSchema
        
            @staticmethod
            def scores() -> typing.Type['SignalScores']:
                return SignalScores
        
            @staticmethod
            def core_attributes() -> typing.Type['SignalEvaluateCoreAttributes']:
                return SignalEvaluateCoreAttributes
            
            
            class warnings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SignalWarning']:
                        return SignalWarning
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SignalWarning'], typing.List['SignalWarning']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'warnings':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SignalWarning':
                    return super().__getitem__(i)
            __annotations__ = {
                "request_id": request_id,
                "scores": scores,
                "core_attributes": core_attributes,
                "warnings": warnings,
            }
        additional_properties = schemas.AnyTypeSchema
    
    scores: 'SignalScores'
    request_id: MetaOapg.properties.request_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scores"]) -> 'SignalScores': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["core_attributes"]) -> 'SignalEvaluateCoreAttributes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["warnings"]) -> MetaOapg.properties.warnings: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["scores"], typing_extensions.Literal["request_id"], typing_extensions.Literal["core_attributes"], typing_extensions.Literal["warnings"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scores"]) -> 'SignalScores': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["core_attributes"]) -> typing.Union['SignalEvaluateCoreAttributes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["warnings"]) -> typing.Union[MetaOapg.properties.warnings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["scores"], typing_extensions.Literal["request_id"], typing_extensions.Literal["core_attributes"], typing_extensions.Literal["warnings"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        scores: 'SignalScores',
        request_id: typing.Union[MetaOapg.properties.request_id, str, ],
        core_attributes: typing.Union['SignalEvaluateCoreAttributes', schemas.Unset] = schemas.unset,
        warnings: typing.Union[MetaOapg.properties.warnings, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'ProcessorSignalEvaluateResponse':
        return super().__new__(
            cls,
            *_args,
            scores=scores,
            request_id=request_id,
            core_attributes=core_attributes,
            warnings=warnings,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.signal_evaluate_core_attributes import SignalEvaluateCoreAttributes
from plaid.model.signal_scores import SignalScores
from plaid.model.signal_warning import SignalWarning
