# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class RiskCheckDetails(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Additional information for the `risk_check` step.
    """


    class MetaOapg:
        required = {
            "devices",
            "phone",
            "behavior",
            "identity_abuse_signals",
            "email",
            "status",
        }
        
        class properties:
        
            @staticmethod
            def status() -> typing.Type['IdentityVerificationStepStatus']:
                return IdentityVerificationStepStatus
        
            @staticmethod
            def behavior() -> typing.Type['RiskCheckBehavior']:
                return RiskCheckBehavior
        
            @staticmethod
            def email() -> typing.Type['RiskCheckEmail']:
                return RiskCheckEmail
        
            @staticmethod
            def phone() -> typing.Type['RiskCheckPhone']:
                return RiskCheckPhone
            
            
            class devices(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RiskCheckDevice']:
                        return RiskCheckDevice
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['RiskCheckDevice'], typing.List['RiskCheckDevice']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'devices':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RiskCheckDevice':
                    return super().__getitem__(i)
        
            @staticmethod
            def identity_abuse_signals() -> typing.Type['RiskCheckIdentityAbuseSignals']:
                return RiskCheckIdentityAbuseSignals
            __annotations__ = {
                "status": status,
                "behavior": behavior,
                "email": email,
                "phone": phone,
                "devices": devices,
                "identity_abuse_signals": identity_abuse_signals,
            }
        additional_properties = schemas.AnyTypeSchema

    
    devices: MetaOapg.properties.devices
    phone: 'RiskCheckPhone'
    behavior: 'RiskCheckBehavior'
    identity_abuse_signals: 'RiskCheckIdentityAbuseSignals'
    email: 'RiskCheckEmail'
    status: 'IdentityVerificationStepStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["devices"]) -> MetaOapg.properties.devices: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> 'RiskCheckPhone': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["behavior"]) -> 'RiskCheckBehavior': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identity_abuse_signals"]) -> 'RiskCheckIdentityAbuseSignals': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> 'RiskCheckEmail': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'IdentityVerificationStepStatus': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["devices"], typing_extensions.Literal["phone"], typing_extensions.Literal["behavior"], typing_extensions.Literal["identity_abuse_signals"], typing_extensions.Literal["email"], typing_extensions.Literal["status"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["devices"]) -> MetaOapg.properties.devices: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> 'RiskCheckPhone': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["behavior"]) -> 'RiskCheckBehavior': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identity_abuse_signals"]) -> 'RiskCheckIdentityAbuseSignals': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> 'RiskCheckEmail': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'IdentityVerificationStepStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["devices"], typing_extensions.Literal["phone"], typing_extensions.Literal["behavior"], typing_extensions.Literal["identity_abuse_signals"], typing_extensions.Literal["email"], typing_extensions.Literal["status"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'RiskCheckDetails':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.identity_verification_step_status import IdentityVerificationStepStatus
from plaid.model.risk_check_behavior import RiskCheckBehavior
from plaid.model.risk_check_device import RiskCheckDevice
from plaid.model.risk_check_email import RiskCheckEmail
from plaid.model.risk_check_identity_abuse_signals import RiskCheckIdentityAbuseSignals
from plaid.model.risk_check_phone import RiskCheckPhone
