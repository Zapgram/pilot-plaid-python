# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class ProcessorTokenCreateRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ProcessorTokenCreateRequest defines the request schema for `/processor/token/create`
    """


    class MetaOapg:
        required = {
            "access_token",
            "account_id",
            "processor",
        }
        
        class properties:
            access_token = schemas.StrSchema
            account_id = schemas.StrSchema
            
            
            class processor(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DWOLLA(cls):
                    return cls("dwolla")
                
                @schemas.classproperty
                def GALILEO(cls):
                    return cls("galileo")
                
                @schemas.classproperty
                def MODERN_TREASURY(cls):
                    return cls("modern_treasury")
                
                @schemas.classproperty
                def OCROLUS(cls):
                    return cls("ocrolus")
                
                @schemas.classproperty
                def PRIME_TRUST(cls):
                    return cls("prime_trust")
                
                @schemas.classproperty
                def VESTA(cls):
                    return cls("vesta")
                
                @schemas.classproperty
                def DRIVEWEALTH(cls):
                    return cls("drivewealth")
                
                @schemas.classproperty
                def VOPAY(cls):
                    return cls("vopay")
                
                @schemas.classproperty
                def ACHQ(cls):
                    return cls("achq")
                
                @schemas.classproperty
                def CHECK(cls):
                    return cls("check")
                
                @schemas.classproperty
                def CHECKBOOK(cls):
                    return cls("checkbook")
                
                @schemas.classproperty
                def CIRCLE(cls):
                    return cls("circle")
                
                @schemas.classproperty
                def SILA_MONEY(cls):
                    return cls("sila_money")
                
                @schemas.classproperty
                def RIZE(cls):
                    return cls("rize")
                
                @schemas.classproperty
                def SVB_API(cls):
                    return cls("svb_api")
                
                @schemas.classproperty
                def UNIT(cls):
                    return cls("unit")
                
                @schemas.classproperty
                def WYRE(cls):
                    return cls("wyre")
                
                @schemas.classproperty
                def LITHIC(cls):
                    return cls("lithic")
                
                @schemas.classproperty
                def ALPACA(cls):
                    return cls("alpaca")
                
                @schemas.classproperty
                def ASTRA(cls):
                    return cls("astra")
                
                @schemas.classproperty
                def MOOV(cls):
                    return cls("moov")
                
                @schemas.classproperty
                def TREASURY_PRIME(cls):
                    return cls("treasury_prime")
                
                @schemas.classproperty
                def MARQETA(cls):
                    return cls("marqeta")
                
                @schemas.classproperty
                def CHECKOUT(cls):
                    return cls("checkout")
                
                @schemas.classproperty
                def SOLID(cls):
                    return cls("solid")
                
                @schemas.classproperty
                def HIGHNOTE(cls):
                    return cls("highnote")
                
                @schemas.classproperty
                def GEMINI(cls):
                    return cls("gemini")
                
                @schemas.classproperty
                def APEX_CLEARING(cls):
                    return cls("apex_clearing")
                
                @schemas.classproperty
                def GUSTO(cls):
                    return cls("gusto")
                
                @schemas.classproperty
                def ADYEN(cls):
                    return cls("adyen")
                
                @schemas.classproperty
                def ATOMIC(cls):
                    return cls("atomic")
                
                @schemas.classproperty
                def I2C(cls):
                    return cls("i2c")
                
                @schemas.classproperty
                def WEPAY(cls):
                    return cls("wepay")
                
                @schemas.classproperty
                def RISKIFIED(cls):
                    return cls("riskified")
                
                @schemas.classproperty
                def UTB(cls):
                    return cls("utb")
                
                @schemas.classproperty
                def ADP_ROLL(cls):
                    return cls("adp_roll")
                
                @schemas.classproperty
                def FORTRESS_TRUST(cls):
                    return cls("fortress_trust")
                
                @schemas.classproperty
                def BOND(cls):
                    return cls("bond")
            client_id = schemas.StrSchema
            secret = schemas.StrSchema
            __annotations__ = {
                "access_token": access_token,
                "account_id": account_id,
                "processor": processor,
                "client_id": client_id,
                "secret": secret,
            }
    
    access_token: MetaOapg.properties.access_token
    account_id: MetaOapg.properties.account_id
    processor: MetaOapg.properties.processor
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processor"]) -> MetaOapg.properties.processor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_id"]) -> MetaOapg.properties.client_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["access_token", "account_id", "processor", "client_id", "secret", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processor"]) -> MetaOapg.properties.processor: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_id"]) -> typing.Union[MetaOapg.properties.client_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access_token", "account_id", "processor", "client_id", "secret", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        access_token: typing.Union[MetaOapg.properties.access_token, str, ],
        account_id: typing.Union[MetaOapg.properties.account_id, str, ],
        processor: typing.Union[MetaOapg.properties.processor, str, ],
        client_id: typing.Union[MetaOapg.properties.client_id, str, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProcessorTokenCreateRequest':
        return super().__new__(
            cls,
            *_args,
            access_token=access_token,
            account_id=account_id,
            processor=processor,
            client_id=client_id,
            secret=secret,
            _configuration=_configuration,
            **kwargs,
        )
