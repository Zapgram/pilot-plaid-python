# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class AssetTransactionDetail(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
    """


    class MetaOapg:
        required = {
            "AssetTransactionCategoryType",
            "AssetTransactionAmount",
            "AssetTransactionPaidByName",
            "AssetTransactionTypeAdditionalDescription",
            "AssetTransactionDate",
            "AssetTransactionPostDate",
            "AssetTransactionType",
            "AssetTransactionUniqueIdentifier",
            "FinancialInstitutionTransactionIdentifier",
        }
        
        class properties:
            AssetTransactionUniqueIdentifier = schemas.StrSchema
            AssetTransactionAmount = schemas.NumberSchema
            AssetTransactionDate = schemas.DateSchema
            AssetTransactionPostDate = schemas.DateSchema
        
            @staticmethod
            def AssetTransactionType() -> typing.Type['AssetTransactionType']:
                return AssetTransactionType
            
            
            class AssetTransactionPaidByName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'AssetTransactionPaidByName':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class AssetTransactionTypeAdditionalDescription(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'AssetTransactionTypeAdditionalDescription':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def AssetTransactionCategoryType() -> typing.Type['AssetTransactionCategoryType']:
                return AssetTransactionCategoryType
            
            
            class FinancialInstitutionTransactionIdentifier(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'FinancialInstitutionTransactionIdentifier':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "AssetTransactionUniqueIdentifier": AssetTransactionUniqueIdentifier,
                "AssetTransactionAmount": AssetTransactionAmount,
                "AssetTransactionDate": AssetTransactionDate,
                "AssetTransactionPostDate": AssetTransactionPostDate,
                "AssetTransactionType": AssetTransactionType,
                "AssetTransactionPaidByName": AssetTransactionPaidByName,
                "AssetTransactionTypeAdditionalDescription": AssetTransactionTypeAdditionalDescription,
                "AssetTransactionCategoryType": AssetTransactionCategoryType,
                "FinancialInstitutionTransactionIdentifier": FinancialInstitutionTransactionIdentifier,
            }
        additional_properties = schemas.AnyTypeSchema
    
    AssetTransactionCategoryType: 'AssetTransactionCategoryType'
    AssetTransactionAmount: MetaOapg.properties.AssetTransactionAmount
    AssetTransactionPaidByName: MetaOapg.properties.AssetTransactionPaidByName
    AssetTransactionTypeAdditionalDescription: MetaOapg.properties.AssetTransactionTypeAdditionalDescription
    AssetTransactionDate: MetaOapg.properties.AssetTransactionDate
    AssetTransactionPostDate: MetaOapg.properties.AssetTransactionPostDate
    AssetTransactionType: 'AssetTransactionType'
    AssetTransactionUniqueIdentifier: MetaOapg.properties.AssetTransactionUniqueIdentifier
    FinancialInstitutionTransactionIdentifier: MetaOapg.properties.FinancialInstitutionTransactionIdentifier
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AssetTransactionCategoryType"]) -> 'AssetTransactionCategoryType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AssetTransactionAmount"]) -> MetaOapg.properties.AssetTransactionAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AssetTransactionPaidByName"]) -> MetaOapg.properties.AssetTransactionPaidByName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AssetTransactionTypeAdditionalDescription"]) -> MetaOapg.properties.AssetTransactionTypeAdditionalDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AssetTransactionDate"]) -> MetaOapg.properties.AssetTransactionDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AssetTransactionPostDate"]) -> MetaOapg.properties.AssetTransactionPostDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AssetTransactionType"]) -> 'AssetTransactionType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AssetTransactionUniqueIdentifier"]) -> MetaOapg.properties.AssetTransactionUniqueIdentifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FinancialInstitutionTransactionIdentifier"]) -> MetaOapg.properties.FinancialInstitutionTransactionIdentifier: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["AssetTransactionCategoryType"], typing_extensions.Literal["AssetTransactionAmount"], typing_extensions.Literal["AssetTransactionPaidByName"], typing_extensions.Literal["AssetTransactionTypeAdditionalDescription"], typing_extensions.Literal["AssetTransactionDate"], typing_extensions.Literal["AssetTransactionPostDate"], typing_extensions.Literal["AssetTransactionType"], typing_extensions.Literal["AssetTransactionUniqueIdentifier"], typing_extensions.Literal["FinancialInstitutionTransactionIdentifier"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AssetTransactionCategoryType"]) -> 'AssetTransactionCategoryType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AssetTransactionAmount"]) -> MetaOapg.properties.AssetTransactionAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AssetTransactionPaidByName"]) -> MetaOapg.properties.AssetTransactionPaidByName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AssetTransactionTypeAdditionalDescription"]) -> MetaOapg.properties.AssetTransactionTypeAdditionalDescription: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AssetTransactionDate"]) -> MetaOapg.properties.AssetTransactionDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AssetTransactionPostDate"]) -> MetaOapg.properties.AssetTransactionPostDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AssetTransactionType"]) -> 'AssetTransactionType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AssetTransactionUniqueIdentifier"]) -> MetaOapg.properties.AssetTransactionUniqueIdentifier: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FinancialInstitutionTransactionIdentifier"]) -> MetaOapg.properties.FinancialInstitutionTransactionIdentifier: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["AssetTransactionCategoryType"], typing_extensions.Literal["AssetTransactionAmount"], typing_extensions.Literal["AssetTransactionPaidByName"], typing_extensions.Literal["AssetTransactionTypeAdditionalDescription"], typing_extensions.Literal["AssetTransactionDate"], typing_extensions.Literal["AssetTransactionPostDate"], typing_extensions.Literal["AssetTransactionType"], typing_extensions.Literal["AssetTransactionUniqueIdentifier"], typing_extensions.Literal["FinancialInstitutionTransactionIdentifier"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        AssetTransactionCategoryType: 'AssetTransactionCategoryType',
        AssetTransactionAmount: typing.Union[MetaOapg.properties.AssetTransactionAmount, decimal.Decimal, int, float, ],
        AssetTransactionPaidByName: typing.Union[MetaOapg.properties.AssetTransactionPaidByName, None, str, ],
        AssetTransactionTypeAdditionalDescription: typing.Union[MetaOapg.properties.AssetTransactionTypeAdditionalDescription, None, str, ],
        AssetTransactionDate: typing.Union[MetaOapg.properties.AssetTransactionDate, str, date, ],
        AssetTransactionPostDate: typing.Union[MetaOapg.properties.AssetTransactionPostDate, str, date, ],
        AssetTransactionType: 'AssetTransactionType',
        AssetTransactionUniqueIdentifier: typing.Union[MetaOapg.properties.AssetTransactionUniqueIdentifier, str, ],
        FinancialInstitutionTransactionIdentifier: typing.Union[MetaOapg.properties.FinancialInstitutionTransactionIdentifier, None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'AssetTransactionDetail':
        return super().__new__(
            cls,
            *_args,
            AssetTransactionCategoryType=AssetTransactionCategoryType,
            AssetTransactionAmount=AssetTransactionAmount,
            AssetTransactionPaidByName=AssetTransactionPaidByName,
            AssetTransactionTypeAdditionalDescription=AssetTransactionTypeAdditionalDescription,
            AssetTransactionDate=AssetTransactionDate,
            AssetTransactionPostDate=AssetTransactionPostDate,
            AssetTransactionType=AssetTransactionType,
            AssetTransactionUniqueIdentifier=AssetTransactionUniqueIdentifier,
            FinancialInstitutionTransactionIdentifier=FinancialInstitutionTransactionIdentifier,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.asset_transaction_category_type import AssetTransactionCategoryType
from plaid.model.asset_transaction_type import AssetTransactionType
