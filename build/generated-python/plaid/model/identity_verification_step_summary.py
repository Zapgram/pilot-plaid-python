# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class IdentityVerificationStepSummary(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Each step will be one of the following values:


`active` - This step is the user's current step. They are either in the process of completing this step, or they recently closed their Identity Verification attempt while in the middle of this step. Only one step will be marked as `active` at any given point.

`success` - The Identity Verification attempt has completed this step.

`failed` - The user failed this step. This can either call the user to fail the session as a whole, or cause them to fallback to another step depending on how the Identity Verification template is configured. A failed step does not imply a failed session.

`waiting_for_prerequisite` - The user needs to complete another step first, before they progress to this step. This step may never run, depending on if the user fails an earlier step or if the step is only run as a fallback.

`not_applicable` - This step will not be run for this session.

`skipped` - The retry instructions that created this Identity Verification attempt specified that this step should be skipped.

`expired` - This step had not yet been completed when the Identity Verification attempt as a whole expired.

`canceled` - The Identity Verification attempt was canceled before the user completed this step.

`pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.

`manually_approved` - The step was manually overridden to pass by a team member in the dashboard.

`manually_rejected` - The step was manually overridden to fail by a team member in the dashboard.
    """


    class MetaOapg:
        required = {
            "risk_check",
            "verify_sms",
            "accept_tos",
            "documentary_verification",
            "watchlist_screening",
            "selfie_check",
            "kyc_check",
        }
        
        class properties:
        
            @staticmethod
            def accept_tos() -> typing.Type['IdentityVerificationStepStatus']:
                return IdentityVerificationStepStatus
        
            @staticmethod
            def verify_sms() -> typing.Type['IdentityVerificationStepStatus']:
                return IdentityVerificationStepStatus
        
            @staticmethod
            def kyc_check() -> typing.Type['IdentityVerificationStepStatus']:
                return IdentityVerificationStepStatus
        
            @staticmethod
            def documentary_verification() -> typing.Type['IdentityVerificationStepStatus']:
                return IdentityVerificationStepStatus
        
            @staticmethod
            def selfie_check() -> typing.Type['IdentityVerificationStepStatus']:
                return IdentityVerificationStepStatus
        
            @staticmethod
            def watchlist_screening() -> typing.Type['IdentityVerificationStepStatus']:
                return IdentityVerificationStepStatus
        
            @staticmethod
            def risk_check() -> typing.Type['IdentityVerificationStepStatus']:
                return IdentityVerificationStepStatus
            __annotations__ = {
                "accept_tos": accept_tos,
                "verify_sms": verify_sms,
                "kyc_check": kyc_check,
                "documentary_verification": documentary_verification,
                "selfie_check": selfie_check,
                "watchlist_screening": watchlist_screening,
                "risk_check": risk_check,
            }
        additional_properties = schemas.AnyTypeSchema
    
    risk_check: 'IdentityVerificationStepStatus'
    verify_sms: 'IdentityVerificationStepStatus'
    accept_tos: 'IdentityVerificationStepStatus'
    documentary_verification: 'IdentityVerificationStepStatus'
    watchlist_screening: 'IdentityVerificationStepStatus'
    selfie_check: 'IdentityVerificationStepStatus'
    kyc_check: 'IdentityVerificationStepStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["risk_check"]) -> 'IdentityVerificationStepStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verify_sms"]) -> 'IdentityVerificationStepStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accept_tos"]) -> 'IdentityVerificationStepStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentary_verification"]) -> 'IdentityVerificationStepStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["watchlist_screening"]) -> 'IdentityVerificationStepStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selfie_check"]) -> 'IdentityVerificationStepStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kyc_check"]) -> 'IdentityVerificationStepStatus': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["risk_check"], typing_extensions.Literal["verify_sms"], typing_extensions.Literal["accept_tos"], typing_extensions.Literal["documentary_verification"], typing_extensions.Literal["watchlist_screening"], typing_extensions.Literal["selfie_check"], typing_extensions.Literal["kyc_check"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["risk_check"]) -> 'IdentityVerificationStepStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verify_sms"]) -> 'IdentityVerificationStepStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accept_tos"]) -> 'IdentityVerificationStepStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentary_verification"]) -> 'IdentityVerificationStepStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["watchlist_screening"]) -> 'IdentityVerificationStepStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selfie_check"]) -> 'IdentityVerificationStepStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kyc_check"]) -> 'IdentityVerificationStepStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["risk_check"], typing_extensions.Literal["verify_sms"], typing_extensions.Literal["accept_tos"], typing_extensions.Literal["documentary_verification"], typing_extensions.Literal["watchlist_screening"], typing_extensions.Literal["selfie_check"], typing_extensions.Literal["kyc_check"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        risk_check: 'IdentityVerificationStepStatus',
        verify_sms: 'IdentityVerificationStepStatus',
        accept_tos: 'IdentityVerificationStepStatus',
        documentary_verification: 'IdentityVerificationStepStatus',
        watchlist_screening: 'IdentityVerificationStepStatus',
        selfie_check: 'IdentityVerificationStepStatus',
        kyc_check: 'IdentityVerificationStepStatus',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'IdentityVerificationStepSummary':
        return super().__new__(
            cls,
            *_args,
            risk_check=risk_check,
            verify_sms=verify_sms,
            accept_tos=accept_tos,
            documentary_verification=documentary_verification,
            watchlist_screening=watchlist_screening,
            selfie_check=selfie_check,
            kyc_check=kyc_check,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.identity_verification_step_status import IdentityVerificationStepStatus
