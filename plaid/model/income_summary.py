# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class IncomeSummary(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The verified fields from a paystub verification. All fields are provided as reported on the paystub.
    """


    class MetaOapg:
        required = {
            "projected_wage",
            "ytd_gross_income",
            "ytd_net_income",
            "employee_name",
            "employer_name",
            "pay_frequency",
            "verified_transaction",
        }
        
        class properties:
        
            @staticmethod
            def employer_name() -> typing.Type['EmployerIncomeSummaryFieldString']:
                return EmployerIncomeSummaryFieldString
        
            @staticmethod
            def employee_name() -> typing.Type['EmployeeIncomeSummaryFieldString']:
                return EmployeeIncomeSummaryFieldString
        
            @staticmethod
            def ytd_gross_income() -> typing.Type['YTDGrossIncomeSummaryFieldNumber']:
                return YTDGrossIncomeSummaryFieldNumber
        
            @staticmethod
            def ytd_net_income() -> typing.Type['YTDNetIncomeSummaryFieldNumber']:
                return YTDNetIncomeSummaryFieldNumber
        
            @staticmethod
            def pay_frequency() -> typing.Type['PayFrequency']:
                return PayFrequency
        
            @staticmethod
            def projected_wage() -> typing.Type['ProjectedIncomeSummaryFieldNumber']:
                return ProjectedIncomeSummaryFieldNumber
        
            @staticmethod
            def verified_transaction() -> typing.Type['TransactionData']:
                return TransactionData
            __annotations__ = {
                "employer_name": employer_name,
                "employee_name": employee_name,
                "ytd_gross_income": ytd_gross_income,
                "ytd_net_income": ytd_net_income,
                "pay_frequency": pay_frequency,
                "projected_wage": projected_wage,
                "verified_transaction": verified_transaction,
            }
        additional_properties = schemas.AnyTypeSchema
    
    projected_wage: 'ProjectedIncomeSummaryFieldNumber'
    ytd_gross_income: 'YTDGrossIncomeSummaryFieldNumber'
    ytd_net_income: 'YTDNetIncomeSummaryFieldNumber'
    employee_name: 'EmployeeIncomeSummaryFieldString'
    employer_name: 'EmployerIncomeSummaryFieldString'
    pay_frequency: 'PayFrequency'
    verified_transaction: 'TransactionData'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projected_wage"]) -> 'ProjectedIncomeSummaryFieldNumber': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ytd_gross_income"]) -> 'YTDGrossIncomeSummaryFieldNumber': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ytd_net_income"]) -> 'YTDNetIncomeSummaryFieldNumber': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_name"]) -> 'EmployeeIncomeSummaryFieldString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employer_name"]) -> 'EmployerIncomeSummaryFieldString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_frequency"]) -> 'PayFrequency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verified_transaction"]) -> 'TransactionData': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["projected_wage"], typing_extensions.Literal["ytd_gross_income"], typing_extensions.Literal["ytd_net_income"], typing_extensions.Literal["employee_name"], typing_extensions.Literal["employer_name"], typing_extensions.Literal["pay_frequency"], typing_extensions.Literal["verified_transaction"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projected_wage"]) -> 'ProjectedIncomeSummaryFieldNumber': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ytd_gross_income"]) -> 'YTDGrossIncomeSummaryFieldNumber': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ytd_net_income"]) -> 'YTDNetIncomeSummaryFieldNumber': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_name"]) -> 'EmployeeIncomeSummaryFieldString': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employer_name"]) -> 'EmployerIncomeSummaryFieldString': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_frequency"]) -> 'PayFrequency': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verified_transaction"]) -> 'TransactionData': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["projected_wage"], typing_extensions.Literal["ytd_gross_income"], typing_extensions.Literal["ytd_net_income"], typing_extensions.Literal["employee_name"], typing_extensions.Literal["employer_name"], typing_extensions.Literal["pay_frequency"], typing_extensions.Literal["verified_transaction"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        projected_wage: 'ProjectedIncomeSummaryFieldNumber',
        ytd_gross_income: 'YTDGrossIncomeSummaryFieldNumber',
        ytd_net_income: 'YTDNetIncomeSummaryFieldNumber',
        employee_name: 'EmployeeIncomeSummaryFieldString',
        employer_name: 'EmployerIncomeSummaryFieldString',
        pay_frequency: 'PayFrequency',
        verified_transaction: 'TransactionData',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'IncomeSummary':
        return super().__new__(
            cls,
            *_args,
            projected_wage=projected_wage,
            ytd_gross_income=ytd_gross_income,
            ytd_net_income=ytd_net_income,
            employee_name=employee_name,
            employer_name=employer_name,
            pay_frequency=pay_frequency,
            verified_transaction=verified_transaction,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.employee_income_summary_field_string import EmployeeIncomeSummaryFieldString
from plaid.model.employer_income_summary_field_string import EmployerIncomeSummaryFieldString
from plaid.model.pay_frequency import PayFrequency
from plaid.model.projected_income_summary_field_number import ProjectedIncomeSummaryFieldNumber
from plaid.model.transaction_data import TransactionData
from plaid.model.ytd_gross_income_summary_field_number import YTDGrossIncomeSummaryFieldNumber
from plaid.model.ytd_net_income_summary_field_number import YTDNetIncomeSummaryFieldNumber
