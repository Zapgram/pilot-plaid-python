# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class ProductAccess(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The product access being requested. Used to or disallow product access across all accounts. If unset, defaults to all products allowed.
    """


    class MetaOapg:
        
        class properties:
            
            
            class statements(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'statements':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class identity(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'identity':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class auth(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'auth':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class transactions(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transactions':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class accounts_details_transactions(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accounts_details_transactions':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class accounts_routing_number(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accounts_routing_number':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class accounts_statements(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accounts_statements':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class accounts_tax_statements(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accounts_tax_statements':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class customers_profiles(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'customers_profiles':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "statements": statements,
                "identity": identity,
                "auth": auth,
                "transactions": transactions,
                "accounts_details_transactions": accounts_details_transactions,
                "accounts_routing_number": accounts_routing_number,
                "accounts_statements": accounts_statements,
                "accounts_tax_statements": accounts_tax_statements,
                "customers_profiles": customers_profiles,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statements"]) -> MetaOapg.properties.statements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identity"]) -> MetaOapg.properties.identity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auth"]) -> MetaOapg.properties.auth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accounts_details_transactions"]) -> MetaOapg.properties.accounts_details_transactions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accounts_routing_number"]) -> MetaOapg.properties.accounts_routing_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accounts_statements"]) -> MetaOapg.properties.accounts_statements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accounts_tax_statements"]) -> MetaOapg.properties.accounts_tax_statements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customers_profiles"]) -> MetaOapg.properties.customers_profiles: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["statements"], typing_extensions.Literal["identity"], typing_extensions.Literal["auth"], typing_extensions.Literal["transactions"], typing_extensions.Literal["accounts_details_transactions"], typing_extensions.Literal["accounts_routing_number"], typing_extensions.Literal["accounts_statements"], typing_extensions.Literal["accounts_tax_statements"], typing_extensions.Literal["customers_profiles"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statements"]) -> typing.Union[MetaOapg.properties.statements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identity"]) -> typing.Union[MetaOapg.properties.identity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auth"]) -> typing.Union[MetaOapg.properties.auth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactions"]) -> typing.Union[MetaOapg.properties.transactions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accounts_details_transactions"]) -> typing.Union[MetaOapg.properties.accounts_details_transactions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accounts_routing_number"]) -> typing.Union[MetaOapg.properties.accounts_routing_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accounts_statements"]) -> typing.Union[MetaOapg.properties.accounts_statements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accounts_tax_statements"]) -> typing.Union[MetaOapg.properties.accounts_tax_statements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customers_profiles"]) -> typing.Union[MetaOapg.properties.customers_profiles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["statements"], typing_extensions.Literal["identity"], typing_extensions.Literal["auth"], typing_extensions.Literal["transactions"], typing_extensions.Literal["accounts_details_transactions"], typing_extensions.Literal["accounts_routing_number"], typing_extensions.Literal["accounts_statements"], typing_extensions.Literal["accounts_tax_statements"], typing_extensions.Literal["customers_profiles"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        statements: typing.Union[MetaOapg.properties.statements, None, bool, schemas.Unset] = schemas.unset,
        identity: typing.Union[MetaOapg.properties.identity, None, bool, schemas.Unset] = schemas.unset,
        auth: typing.Union[MetaOapg.properties.auth, None, bool, schemas.Unset] = schemas.unset,
        transactions: typing.Union[MetaOapg.properties.transactions, None, bool, schemas.Unset] = schemas.unset,
        accounts_details_transactions: typing.Union[MetaOapg.properties.accounts_details_transactions, None, bool, schemas.Unset] = schemas.unset,
        accounts_routing_number: typing.Union[MetaOapg.properties.accounts_routing_number, None, bool, schemas.Unset] = schemas.unset,
        accounts_statements: typing.Union[MetaOapg.properties.accounts_statements, None, bool, schemas.Unset] = schemas.unset,
        accounts_tax_statements: typing.Union[MetaOapg.properties.accounts_tax_statements, None, bool, schemas.Unset] = schemas.unset,
        customers_profiles: typing.Union[MetaOapg.properties.customers_profiles, None, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'ProductAccess':
        return super().__new__(
            cls,
            *_args,
            statements=statements,
            identity=identity,
            auth=auth,
            transactions=transactions,
            accounts_details_transactions=accounts_details_transactions,
            accounts_routing_number=accounts_routing_number,
            accounts_statements=accounts_statements,
            accounts_tax_statements=accounts_tax_statements,
            customers_profiles=customers_profiles,
            _configuration=_configuration,
            **kwargs,
        )
