# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class DocumentaryVerificationDocument(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Images, extracted data, and analysis from a user's identity document
    """


    class MetaOapg:
        required = {
            "extracted_data",
            "images",
            "redacted_at",
            "analysis",
            "attempt",
            "status",
        }
        
        class properties:
        
            @staticmethod
            def status() -> typing.Type['DocumentStatus']:
                return DocumentStatus
            attempt = schemas.IntSchema
        
            @staticmethod
            def images() -> typing.Type['PhysicalDocumentImages']:
                return PhysicalDocumentImages
        
            @staticmethod
            def extracted_data() -> typing.Type['PhysicalDocumentExtractedData']:
                return PhysicalDocumentExtractedData
        
            @staticmethod
            def analysis() -> typing.Type['DocumentAnalysis']:
                return DocumentAnalysis
        
            @staticmethod
            def redacted_at() -> typing.Type['TimestampNullable']:
                return TimestampNullable
            __annotations__ = {
                "status": status,
                "attempt": attempt,
                "images": images,
                "extracted_data": extracted_data,
                "analysis": analysis,
                "redacted_at": redacted_at,
            }
        additional_properties = schemas.AnyTypeSchema
    
    extracted_data: 'PhysicalDocumentExtractedData'
    images: 'PhysicalDocumentImages'
    redacted_at: 'TimestampNullable'
    analysis: 'DocumentAnalysis'
    attempt: MetaOapg.properties.attempt
    status: 'DocumentStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extracted_data"]) -> 'PhysicalDocumentExtractedData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["images"]) -> 'PhysicalDocumentImages': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["redacted_at"]) -> 'TimestampNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analysis"]) -> 'DocumentAnalysis': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attempt"]) -> MetaOapg.properties.attempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'DocumentStatus': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["extracted_data"], typing_extensions.Literal["images"], typing_extensions.Literal["redacted_at"], typing_extensions.Literal["analysis"], typing_extensions.Literal["attempt"], typing_extensions.Literal["status"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extracted_data"]) -> 'PhysicalDocumentExtractedData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["images"]) -> 'PhysicalDocumentImages': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["redacted_at"]) -> 'TimestampNullable': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analysis"]) -> 'DocumentAnalysis': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attempt"]) -> MetaOapg.properties.attempt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'DocumentStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["extracted_data"], typing_extensions.Literal["images"], typing_extensions.Literal["redacted_at"], typing_extensions.Literal["analysis"], typing_extensions.Literal["attempt"], typing_extensions.Literal["status"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        extracted_data: 'PhysicalDocumentExtractedData',
        images: 'PhysicalDocumentImages',
        redacted_at: 'TimestampNullable',
        analysis: 'DocumentAnalysis',
        attempt: typing.Union[MetaOapg.properties.attempt, decimal.Decimal, int, ],
        status: 'DocumentStatus',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'DocumentaryVerificationDocument':
        return super().__new__(
            cls,
            *_args,
            extracted_data=extracted_data,
            images=images,
            redacted_at=redacted_at,
            analysis=analysis,
            attempt=attempt,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.document_analysis import DocumentAnalysis
from plaid.model.document_status import DocumentStatus
from plaid.model.physical_document_extracted_data import PhysicalDocumentExtractedData
from plaid.model.physical_document_images import PhysicalDocumentImages
from plaid.model.timestamp_nullable import TimestampNullable
