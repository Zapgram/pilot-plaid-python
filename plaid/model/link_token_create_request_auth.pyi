# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class LinkTokenCreateRequestAuth(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Specifies options for initializing Link for use with the Auth product. This field can be used to enable or disable extended Auth flows for the resulting Link session. Omitting any field will result in a default that can be configured by your account manager.
    """


    class MetaOapg:
        
        class properties:
            auth_type_select_enabled = schemas.BoolSchema
            automated_microdeposits_enabled = schemas.BoolSchema
            instant_match_enabled = schemas.BoolSchema
            same_day_microdeposits_enabled = schemas.BoolSchema
            
            
            class reroute_to_credentials(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def OFF(cls):
                    return cls("OFF")
                
                @schemas.classproperty
                def OPTIONAL(cls):
                    return cls("OPTIONAL")
                
                @schemas.classproperty
                def FORCED(cls):
                    return cls("FORCED")
            
            
            class flow_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def FLEXIBLE_AUTH(cls):
                    return cls("FLEXIBLE_AUTH")
            __annotations__ = {
                "auth_type_select_enabled": auth_type_select_enabled,
                "automated_microdeposits_enabled": automated_microdeposits_enabled,
                "instant_match_enabled": instant_match_enabled,
                "same_day_microdeposits_enabled": same_day_microdeposits_enabled,
                "reroute_to_credentials": reroute_to_credentials,
                "flow_type": flow_type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auth_type_select_enabled"]) -> MetaOapg.properties.auth_type_select_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["automated_microdeposits_enabled"]) -> MetaOapg.properties.automated_microdeposits_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instant_match_enabled"]) -> MetaOapg.properties.instant_match_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["same_day_microdeposits_enabled"]) -> MetaOapg.properties.same_day_microdeposits_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reroute_to_credentials"]) -> MetaOapg.properties.reroute_to_credentials: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flow_type"]) -> MetaOapg.properties.flow_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["auth_type_select_enabled", "automated_microdeposits_enabled", "instant_match_enabled", "same_day_microdeposits_enabled", "reroute_to_credentials", "flow_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auth_type_select_enabled"]) -> typing.Union[MetaOapg.properties.auth_type_select_enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["automated_microdeposits_enabled"]) -> typing.Union[MetaOapg.properties.automated_microdeposits_enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instant_match_enabled"]) -> typing.Union[MetaOapg.properties.instant_match_enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["same_day_microdeposits_enabled"]) -> typing.Union[MetaOapg.properties.same_day_microdeposits_enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reroute_to_credentials"]) -> typing.Union[MetaOapg.properties.reroute_to_credentials, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flow_type"]) -> typing.Union[MetaOapg.properties.flow_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["auth_type_select_enabled", "automated_microdeposits_enabled", "instant_match_enabled", "same_day_microdeposits_enabled", "reroute_to_credentials", "flow_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        auth_type_select_enabled: typing.Union[MetaOapg.properties.auth_type_select_enabled, bool, schemas.Unset] = schemas.unset,
        automated_microdeposits_enabled: typing.Union[MetaOapg.properties.automated_microdeposits_enabled, bool, schemas.Unset] = schemas.unset,
        instant_match_enabled: typing.Union[MetaOapg.properties.instant_match_enabled, bool, schemas.Unset] = schemas.unset,
        same_day_microdeposits_enabled: typing.Union[MetaOapg.properties.same_day_microdeposits_enabled, bool, schemas.Unset] = schemas.unset,
        reroute_to_credentials: typing.Union[MetaOapg.properties.reroute_to_credentials, str, schemas.Unset] = schemas.unset,
        flow_type: typing.Union[MetaOapg.properties.flow_type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LinkTokenCreateRequestAuth':
        return super().__new__(
            cls,
            *_args,
            auth_type_select_enabled=auth_type_select_enabled,
            automated_microdeposits_enabled=automated_microdeposits_enabled,
            instant_match_enabled=instant_match_enabled,
            same_day_microdeposits_enabled=same_day_microdeposits_enabled,
            reroute_to_credentials=reroute_to_credentials,
            flow_type=flow_type,
            _configuration=_configuration,
            **kwargs,
        )
