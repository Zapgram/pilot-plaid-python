# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class ItemStatus(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An object with information about the status of the Item.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def investments() -> typing.Type['ItemStatusInvestments']:
                return ItemStatusInvestments
        
            @staticmethod
            def transactions() -> typing.Type['ItemStatusTransactions']:
                return ItemStatusTransactions
        
            @staticmethod
            def last_webhook() -> typing.Type['ItemStatusLastWebhook']:
                return ItemStatusLastWebhook
            __annotations__ = {
                "investments": investments,
                "transactions": transactions,
                "last_webhook": last_webhook,
            }
        additional_properties = schemas.AnyTypeSchema

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investments"]) -> 'ItemStatusInvestments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactions"]) -> 'ItemStatusTransactions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_webhook"]) -> 'ItemStatusLastWebhook': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["investments"], typing_extensions.Literal["transactions"], typing_extensions.Literal["last_webhook"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investments"]) -> typing.Union['ItemStatusInvestments', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactions"]) -> typing.Union['ItemStatusTransactions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_webhook"]) -> typing.Union['ItemStatusLastWebhook', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["investments"], typing_extensions.Literal["transactions"], typing_extensions.Literal["last_webhook"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        investments: typing.Union['ItemStatusInvestments', schemas.Unset] = schemas.unset,
        transactions: typing.Union['ItemStatusTransactions', schemas.Unset] = schemas.unset,
        last_webhook: typing.Union['ItemStatusLastWebhook', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'ItemStatus':
        return super().__new__(
            cls,
            *_args,
            investments=investments,
            transactions=transactions,
            last_webhook=last_webhook,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.item_status_investments import ItemStatusInvestments
from plaid.model.item_status_last_webhook import ItemStatusLastWebhook
from plaid.model.item_status_transactions import ItemStatusTransactions
