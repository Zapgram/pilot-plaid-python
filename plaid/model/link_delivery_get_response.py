# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class LinkDeliveryGetResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    LinkDeliveryGetRequest defines the response schema for `/link_delivery/get`
    """


    class MetaOapg:
        required = {
            "created_at",
            "request_id",
            "status",
        }
        
        class properties:
        
            @staticmethod
            def status() -> typing.Type['LinkDeliverySessionStatus']:
                return LinkDeliverySessionStatus
            created_at = schemas.DateTimeSchema
            request_id = schemas.StrSchema
            
            
            class completed_at(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'completed_at':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class access_tokens(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'access_tokens':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class item_ids(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'item_ids':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "status": status,
                "created_at": created_at,
                "request_id": request_id,
                "completed_at": completed_at,
                "access_tokens": access_tokens,
                "item_ids": item_ids,
            }
        additional_properties = schemas.AnyTypeSchema
    
    created_at: MetaOapg.properties.created_at
    request_id: MetaOapg.properties.request_id
    status: 'LinkDeliverySessionStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'LinkDeliverySessionStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completed_at"]) -> MetaOapg.properties.completed_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_tokens"]) -> MetaOapg.properties.access_tokens: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_ids"]) -> MetaOapg.properties.item_ids: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["created_at"], typing_extensions.Literal["request_id"], typing_extensions.Literal["status"], typing_extensions.Literal["completed_at"], typing_extensions.Literal["access_tokens"], typing_extensions.Literal["item_ids"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'LinkDeliverySessionStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completed_at"]) -> typing.Union[MetaOapg.properties.completed_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_tokens"]) -> typing.Union[MetaOapg.properties.access_tokens, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_ids"]) -> typing.Union[MetaOapg.properties.item_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created_at"], typing_extensions.Literal["request_id"], typing_extensions.Literal["status"], typing_extensions.Literal["completed_at"], typing_extensions.Literal["access_tokens"], typing_extensions.Literal["item_ids"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, ],
        request_id: typing.Union[MetaOapg.properties.request_id, str, ],
        status: 'LinkDeliverySessionStatus',
        completed_at: typing.Union[MetaOapg.properties.completed_at, None, str, datetime, schemas.Unset] = schemas.unset,
        access_tokens: typing.Union[MetaOapg.properties.access_tokens, list, tuple, None, schemas.Unset] = schemas.unset,
        item_ids: typing.Union[MetaOapg.properties.item_ids, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'LinkDeliveryGetResponse':
        return super().__new__(
            cls,
            *_args,
            created_at=created_at,
            request_id=request_id,
            status=status,
            completed_at=completed_at,
            access_tokens=access_tokens,
            item_ids=item_ids,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.link_delivery_session_status import LinkDeliverySessionStatus
