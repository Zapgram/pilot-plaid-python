# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class PaymentMeta(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Transaction information specific to inter-bank transfers. If the transaction was not an inter-bank transfer, all fields will be `null`.

If the `transactions` object was returned by a Transactions endpoint such as `/transactions/sync or `/transactions/get`, the `payment_meta` key will always appear, but no data elements are guaranteed. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
    """


    class MetaOapg:
        required = {
            "payee",
            "ppd_id",
            "reason",
            "by_order_of",
            "payment_processor",
            "payer",
            "reference_number",
            "payment_method",
        }
        
        class properties:
            
            
            class reference_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reference_number':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ppd_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ppd_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class payee(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payee':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class by_order_of(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'by_order_of':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class payer(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payer':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class payment_method(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payment_method':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class payment_processor(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payment_processor':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class reason(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reason':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "reference_number": reference_number,
                "ppd_id": ppd_id,
                "payee": payee,
                "by_order_of": by_order_of,
                "payer": payer,
                "payment_method": payment_method,
                "payment_processor": payment_processor,
                "reason": reason,
            }
        additional_properties = schemas.AnyTypeSchema
    
    payee: MetaOapg.properties.payee
    ppd_id: MetaOapg.properties.ppd_id
    reason: MetaOapg.properties.reason
    by_order_of: MetaOapg.properties.by_order_of
    payment_processor: MetaOapg.properties.payment_processor
    payer: MetaOapg.properties.payer
    reference_number: MetaOapg.properties.reference_number
    payment_method: MetaOapg.properties.payment_method
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payee"]) -> MetaOapg.properties.payee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ppd_id"]) -> MetaOapg.properties.ppd_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["by_order_of"]) -> MetaOapg.properties.by_order_of: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_processor"]) -> MetaOapg.properties.payment_processor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payer"]) -> MetaOapg.properties.payer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference_number"]) -> MetaOapg.properties.reference_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_method"]) -> MetaOapg.properties.payment_method: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payee"], typing_extensions.Literal["ppd_id"], typing_extensions.Literal["reason"], typing_extensions.Literal["by_order_of"], typing_extensions.Literal["payment_processor"], typing_extensions.Literal["payer"], typing_extensions.Literal["reference_number"], typing_extensions.Literal["payment_method"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payee"]) -> MetaOapg.properties.payee: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ppd_id"]) -> MetaOapg.properties.ppd_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["by_order_of"]) -> MetaOapg.properties.by_order_of: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_processor"]) -> MetaOapg.properties.payment_processor: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payer"]) -> MetaOapg.properties.payer: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference_number"]) -> MetaOapg.properties.reference_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_method"]) -> MetaOapg.properties.payment_method: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payee"], typing_extensions.Literal["ppd_id"], typing_extensions.Literal["reason"], typing_extensions.Literal["by_order_of"], typing_extensions.Literal["payment_processor"], typing_extensions.Literal["payer"], typing_extensions.Literal["reference_number"], typing_extensions.Literal["payment_method"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        payee: typing.Union[MetaOapg.properties.payee, None, str, ],
        ppd_id: typing.Union[MetaOapg.properties.ppd_id, None, str, ],
        reason: typing.Union[MetaOapg.properties.reason, None, str, ],
        by_order_of: typing.Union[MetaOapg.properties.by_order_of, None, str, ],
        payment_processor: typing.Union[MetaOapg.properties.payment_processor, None, str, ],
        payer: typing.Union[MetaOapg.properties.payer, None, str, ],
        reference_number: typing.Union[MetaOapg.properties.reference_number, None, str, ],
        payment_method: typing.Union[MetaOapg.properties.payment_method, None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'PaymentMeta':
        return super().__new__(
            cls,
            *_args,
            payee=payee,
            ppd_id=ppd_id,
            reason=reason,
            by_order_of=by_order_of,
            payment_processor=payment_processor,
            payer=payer,
            reference_number=reference_number,
            payment_method=payment_method,
            _configuration=_configuration,
            **kwargs,
        )
