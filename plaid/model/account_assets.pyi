# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class AccountAssets(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Asset information about an account
    """


    class MetaOapg:
        required = {
            "historical_balances",
            "owners",
            "transactions",
            "days_available",
        }
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    days_available = schemas.NumberSchema
                    
                    
                    class transactions(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['AssetReportTransaction']:
                                return AssetReportTransaction
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['AssetReportTransaction'], typing.List['AssetReportTransaction']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'transactions':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'AssetReportTransaction':
                            return super().__getitem__(i)
                    
                    
                    class owners(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['Owner']:
                                return Owner
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['Owner'], typing.List['Owner']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'owners':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'Owner':
                            return super().__getitem__(i)
                
                    @staticmethod
                    def ownership_type() -> typing.Type['OwnershipType']:
                        return OwnershipType
                    
                    
                    class historical_balances(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['HistoricalBalance']:
                                return HistoricalBalance
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['HistoricalBalance'], typing.List['HistoricalBalance']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'historical_balances':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'HistoricalBalance':
                            return super().__getitem__(i)
                    __annotations__ = {
                        "days_available": days_available,
                        "transactions": transactions,
                        "owners": owners,
                        "ownership_type": ownership_type,
                        "historical_balances": historical_balances,
                    }
                additional_properties = schemas.AnyTypeSchema
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["days_available"]) -> MetaOapg.properties.days_available: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["owners"]) -> MetaOapg.properties.owners: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["ownership_type"]) -> 'OwnershipType': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["historical_balances"]) -> MetaOapg.properties.historical_balances: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["days_available"], typing_extensions.Literal["transactions"], typing_extensions.Literal["owners"], typing_extensions.Literal["ownership_type"], typing_extensions.Literal["historical_balances"], str, ]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["days_available"]) -> typing.Union[MetaOapg.properties.days_available, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["transactions"]) -> typing.Union[MetaOapg.properties.transactions, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["owners"]) -> typing.Union[MetaOapg.properties.owners, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["ownership_type"]) -> typing.Union['OwnershipType', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["historical_balances"]) -> typing.Union[MetaOapg.properties.historical_balances, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["days_available"], typing_extensions.Literal["transactions"], typing_extensions.Literal["owners"], typing_extensions.Literal["ownership_type"], typing_extensions.Literal["historical_balances"], str, ]):
                return super().get_item_oapg(name)
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                days_available: typing.Union[MetaOapg.properties.days_available, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                transactions: typing.Union[MetaOapg.properties.transactions, list, tuple, schemas.Unset] = schemas.unset,
                owners: typing.Union[MetaOapg.properties.owners, list, tuple, schemas.Unset] = schemas.unset,
                ownership_type: typing.Union['OwnershipType', schemas.Unset] = schemas.unset,
                historical_balances: typing.Union[MetaOapg.properties.historical_balances, list, tuple, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    days_available=days_available,
                    transactions=transactions,
                    owners=owners,
                    ownership_type=ownership_type,
                    historical_balances=historical_balances,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                AccountBase,
                cls.all_of_1,
            ]

    
    historical_balances: schemas.AnyTypeSchema
    owners: schemas.AnyTypeSchema
    transactions: schemas.AnyTypeSchema
    days_available: schemas.AnyTypeSchema

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccountAssets':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.account_base import AccountBase
from plaid.model.asset_report_transaction import AssetReportTransaction
from plaid.model.historical_balance import HistoricalBalance
from plaid.model.owner import Owner
from plaid.model.ownership_type import OwnershipType
