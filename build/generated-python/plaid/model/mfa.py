# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class MFA(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Specifies the multi-factor authentication settings to use with this test account
    """


    class MetaOapg:
        required = {
            "question_rounds",
            "selections_per_question",
            "type",
            "questions_per_round",
            "selection_rounds",
        }
        
        class properties:
            type = schemas.StrSchema
            question_rounds = schemas.NumberSchema
            questions_per_round = schemas.NumberSchema
            selection_rounds = schemas.NumberSchema
            selections_per_question = schemas.NumberSchema
            __annotations__ = {
                "type": type,
                "question_rounds": question_rounds,
                "questions_per_round": questions_per_round,
                "selection_rounds": selection_rounds,
                "selections_per_question": selections_per_question,
            }
        additional_properties = schemas.AnyTypeSchema
    
    question_rounds: MetaOapg.properties.question_rounds
    selections_per_question: MetaOapg.properties.selections_per_question
    type: MetaOapg.properties.type
    questions_per_round: MetaOapg.properties.questions_per_round
    selection_rounds: MetaOapg.properties.selection_rounds
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["question_rounds"]) -> MetaOapg.properties.question_rounds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selections_per_question"]) -> MetaOapg.properties.selections_per_question: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["questions_per_round"]) -> MetaOapg.properties.questions_per_round: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selection_rounds"]) -> MetaOapg.properties.selection_rounds: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["question_rounds"], typing_extensions.Literal["selections_per_question"], typing_extensions.Literal["type"], typing_extensions.Literal["questions_per_round"], typing_extensions.Literal["selection_rounds"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["question_rounds"]) -> MetaOapg.properties.question_rounds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selections_per_question"]) -> MetaOapg.properties.selections_per_question: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["questions_per_round"]) -> MetaOapg.properties.questions_per_round: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selection_rounds"]) -> MetaOapg.properties.selection_rounds: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["question_rounds"], typing_extensions.Literal["selections_per_question"], typing_extensions.Literal["type"], typing_extensions.Literal["questions_per_round"], typing_extensions.Literal["selection_rounds"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        question_rounds: typing.Union[MetaOapg.properties.question_rounds, decimal.Decimal, int, float, ],
        selections_per_question: typing.Union[MetaOapg.properties.selections_per_question, decimal.Decimal, int, float, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        questions_per_round: typing.Union[MetaOapg.properties.questions_per_round, decimal.Decimal, int, float, ],
        selection_rounds: typing.Union[MetaOapg.properties.selection_rounds, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'MFA':
        return super().__new__(
            cls,
            *_args,
            question_rounds=question_rounds,
            selections_per_question=selections_per_question,
            type=type,
            questions_per_round=questions_per_round,
            selection_rounds=selection_rounds,
            _configuration=_configuration,
            **kwargs,
        )
