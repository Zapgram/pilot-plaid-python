# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class OverrideAccounts(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Data to use to set values of test accounts. Some values cannot be specified in the schema and will instead will be calculated from other test data in order to achieve more consistent, realistic test data.
    """


    class MetaOapg:
        required = {
            "subtype",
            "identity",
            "inflow_model",
            "liability",
            "meta",
            "numbers",
            "currency",
            "force_available_balance",
            "transactions",
            "type",
            "starting_balance",
        }
        
        class properties:
        
            @staticmethod
            def type() -> typing.Type['OverrideAccountType']:
                return OverrideAccountType
        
            @staticmethod
            def subtype() -> typing.Type['AccountSubtype']:
                return AccountSubtype
            starting_balance = schemas.Float64Schema
            force_available_balance = schemas.Float64Schema
            currency = schemas.StrSchema
        
            @staticmethod
            def meta() -> typing.Type['Meta']:
                return Meta
        
            @staticmethod
            def numbers() -> typing.Type['Numbers']:
                return Numbers
            
            
            class transactions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TransactionOverride']:
                        return TransactionOverride
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TransactionOverride'], typing.List['TransactionOverride']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transactions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TransactionOverride':
                    return super().__getitem__(i)
        
            @staticmethod
            def identity() -> typing.Type['OwnerOverride']:
                return OwnerOverride
        
            @staticmethod
            def liability() -> typing.Type['LiabilityOverride']:
                return LiabilityOverride
        
            @staticmethod
            def inflow_model() -> typing.Type['InflowModel']:
                return InflowModel
        
            @staticmethod
            def holdings() -> typing.Type['HoldingsOverride']:
                return HoldingsOverride
        
            @staticmethod
            def investment_transactions() -> typing.Type['InvestmentsTransactionsOverride']:
                return InvestmentsTransactionsOverride
        
            @staticmethod
            def income() -> typing.Type['IncomeOverride']:
                return IncomeOverride
            __annotations__ = {
                "type": type,
                "subtype": subtype,
                "starting_balance": starting_balance,
                "force_available_balance": force_available_balance,
                "currency": currency,
                "meta": meta,
                "numbers": numbers,
                "transactions": transactions,
                "identity": identity,
                "liability": liability,
                "inflow_model": inflow_model,
                "holdings": holdings,
                "investment_transactions": investment_transactions,
                "income": income,
            }
        additional_properties = schemas.AnyTypeSchema
    
    subtype: 'AccountSubtype'
    identity: 'OwnerOverride'
    inflow_model: 'InflowModel'
    liability: 'LiabilityOverride'
    meta: 'Meta'
    numbers: 'Numbers'
    currency: MetaOapg.properties.currency
    force_available_balance: MetaOapg.properties.force_available_balance
    transactions: MetaOapg.properties.transactions
    type: 'OverrideAccountType'
    starting_balance: MetaOapg.properties.starting_balance
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtype"]) -> 'AccountSubtype': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identity"]) -> 'OwnerOverride': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inflow_model"]) -> 'InflowModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liability"]) -> 'LiabilityOverride': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> 'Meta': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numbers"]) -> 'Numbers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["force_available_balance"]) -> MetaOapg.properties.force_available_balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'OverrideAccountType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["starting_balance"]) -> MetaOapg.properties.starting_balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["holdings"]) -> 'HoldingsOverride': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investment_transactions"]) -> 'InvestmentsTransactionsOverride': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["income"]) -> 'IncomeOverride': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["subtype"], typing_extensions.Literal["identity"], typing_extensions.Literal["inflow_model"], typing_extensions.Literal["liability"], typing_extensions.Literal["meta"], typing_extensions.Literal["numbers"], typing_extensions.Literal["currency"], typing_extensions.Literal["force_available_balance"], typing_extensions.Literal["transactions"], typing_extensions.Literal["type"], typing_extensions.Literal["starting_balance"], typing_extensions.Literal["holdings"], typing_extensions.Literal["investment_transactions"], typing_extensions.Literal["income"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtype"]) -> 'AccountSubtype': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identity"]) -> 'OwnerOverride': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inflow_model"]) -> 'InflowModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liability"]) -> 'LiabilityOverride': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> 'Meta': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numbers"]) -> 'Numbers': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["force_available_balance"]) -> MetaOapg.properties.force_available_balance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'OverrideAccountType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["starting_balance"]) -> MetaOapg.properties.starting_balance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["holdings"]) -> typing.Union['HoldingsOverride', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investment_transactions"]) -> typing.Union['InvestmentsTransactionsOverride', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["income"]) -> typing.Union['IncomeOverride', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["subtype"], typing_extensions.Literal["identity"], typing_extensions.Literal["inflow_model"], typing_extensions.Literal["liability"], typing_extensions.Literal["meta"], typing_extensions.Literal["numbers"], typing_extensions.Literal["currency"], typing_extensions.Literal["force_available_balance"], typing_extensions.Literal["transactions"], typing_extensions.Literal["type"], typing_extensions.Literal["starting_balance"], typing_extensions.Literal["holdings"], typing_extensions.Literal["investment_transactions"], typing_extensions.Literal["income"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        subtype: 'AccountSubtype',
        identity: 'OwnerOverride',
        inflow_model: 'InflowModel',
        liability: 'LiabilityOverride',
        meta: 'Meta',
        numbers: 'Numbers',
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        force_available_balance: typing.Union[MetaOapg.properties.force_available_balance, decimal.Decimal, int, float, ],
        transactions: typing.Union[MetaOapg.properties.transactions, list, tuple, ],
        type: 'OverrideAccountType',
        starting_balance: typing.Union[MetaOapg.properties.starting_balance, decimal.Decimal, int, float, ],
        holdings: typing.Union['HoldingsOverride', schemas.Unset] = schemas.unset,
        investment_transactions: typing.Union['InvestmentsTransactionsOverride', schemas.Unset] = schemas.unset,
        income: typing.Union['IncomeOverride', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'OverrideAccounts':
        return super().__new__(
            cls,
            *_args,
            subtype=subtype,
            identity=identity,
            inflow_model=inflow_model,
            liability=liability,
            meta=meta,
            numbers=numbers,
            currency=currency,
            force_available_balance=force_available_balance,
            transactions=transactions,
            type=type,
            starting_balance=starting_balance,
            holdings=holdings,
            investment_transactions=investment_transactions,
            income=income,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.account_subtype import AccountSubtype
from plaid.model.holdings_override import HoldingsOverride
from plaid.model.income_override import IncomeOverride
from plaid.model.inflow_model import InflowModel
from plaid.model.investments_transactions_override import InvestmentsTransactionsOverride
from plaid.model.liability_override import LiabilityOverride
from plaid.model.meta import Meta
from plaid.model.numbers import Numbers
from plaid.model.override_account_type import OverrideAccountType
from plaid.model.owner_override import OwnerOverride
from plaid.model.transaction_override import TransactionOverride
