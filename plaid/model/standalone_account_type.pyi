# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class StandaloneAccountType(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The schema below describes the various `types` and corresponding `subtypes` that Plaid recognizes and reports for financial institution accounts.
    """


    class MetaOapg:
        required = {
            "loan",
            "other",
            "investment",
            "depository",
            "credit",
        }
        
        class properties:
            depository = schemas.StrSchema
            credit = schemas.StrSchema
            loan = schemas.StrSchema
            investment = schemas.StrSchema
            other = schemas.StrSchema
            __annotations__ = {
                "depository": depository,
                "credit": credit,
                "loan": loan,
                "investment": investment,
                "other": other,
            }
        additional_properties = schemas.AnyTypeSchema
    
    loan: MetaOapg.properties.loan
    other: MetaOapg.properties.other
    investment: MetaOapg.properties.investment
    depository: MetaOapg.properties.depository
    credit: MetaOapg.properties.credit
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loan"]) -> MetaOapg.properties.loan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other"]) -> MetaOapg.properties.other: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["investment"]) -> MetaOapg.properties.investment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depository"]) -> MetaOapg.properties.depository: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credit"]) -> MetaOapg.properties.credit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["loan"], typing_extensions.Literal["other"], typing_extensions.Literal["investment"], typing_extensions.Literal["depository"], typing_extensions.Literal["credit"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loan"]) -> MetaOapg.properties.loan: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other"]) -> MetaOapg.properties.other: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["investment"]) -> MetaOapg.properties.investment: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depository"]) -> MetaOapg.properties.depository: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credit"]) -> MetaOapg.properties.credit: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["loan"], typing_extensions.Literal["other"], typing_extensions.Literal["investment"], typing_extensions.Literal["depository"], typing_extensions.Literal["credit"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        loan: typing.Union[MetaOapg.properties.loan, str, ],
        other: typing.Union[MetaOapg.properties.other, str, ],
        investment: typing.Union[MetaOapg.properties.investment, str, ],
        depository: typing.Union[MetaOapg.properties.depository, str, ],
        credit: typing.Union[MetaOapg.properties.credit, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'StandaloneAccountType':
        return super().__new__(
            cls,
            *_args,
            loan=loan,
            other=other,
            investment=investment,
            depository=depository,
            credit=credit,
            _configuration=_configuration,
            **kwargs,
        )
