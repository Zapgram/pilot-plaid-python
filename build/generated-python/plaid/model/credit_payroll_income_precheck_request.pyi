# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class CreditPayrollIncomePrecheckRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Defines the request schema for `/credit/payroll_income/precheck`.
    """


    class MetaOapg:
        
        class properties:
            client_id = schemas.StrSchema
            secret = schemas.StrSchema
            user_token = schemas.StrSchema
            
            
            class access_tokens(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'access_tokens':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def employer() -> typing.Type['IncomeVerificationPrecheckEmployer']:
                return IncomeVerificationPrecheckEmployer
        
            @staticmethod
            def us_military_info() -> typing.Type['IncomeVerificationPrecheckMilitaryInfo']:
                return IncomeVerificationPrecheckMilitaryInfo
        
            @staticmethod
            def payroll_institution() -> typing.Type['IncomeVerificationPrecheckPayrollInstitution']:
                return IncomeVerificationPrecheckPayrollInstitution
            __annotations__ = {
                "client_id": client_id,
                "secret": secret,
                "user_token": user_token,
                "access_tokens": access_tokens,
                "employer": employer,
                "us_military_info": us_military_info,
                "payroll_institution": payroll_institution,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_id"]) -> MetaOapg.properties.client_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_token"]) -> MetaOapg.properties.user_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_tokens"]) -> MetaOapg.properties.access_tokens: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employer"]) -> 'IncomeVerificationPrecheckEmployer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["us_military_info"]) -> 'IncomeVerificationPrecheckMilitaryInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payroll_institution"]) -> 'IncomeVerificationPrecheckPayrollInstitution': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["client_id", "secret", "user_token", "access_tokens", "employer", "us_military_info", "payroll_institution", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_id"]) -> typing.Union[MetaOapg.properties.client_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_token"]) -> typing.Union[MetaOapg.properties.user_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_tokens"]) -> typing.Union[MetaOapg.properties.access_tokens, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employer"]) -> typing.Union['IncomeVerificationPrecheckEmployer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["us_military_info"]) -> typing.Union['IncomeVerificationPrecheckMilitaryInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payroll_institution"]) -> typing.Union['IncomeVerificationPrecheckPayrollInstitution', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["client_id", "secret", "user_token", "access_tokens", "employer", "us_military_info", "payroll_institution", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        client_id: typing.Union[MetaOapg.properties.client_id, str, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        user_token: typing.Union[MetaOapg.properties.user_token, str, schemas.Unset] = schemas.unset,
        access_tokens: typing.Union[MetaOapg.properties.access_tokens, list, tuple, schemas.Unset] = schemas.unset,
        employer: typing.Union['IncomeVerificationPrecheckEmployer', schemas.Unset] = schemas.unset,
        us_military_info: typing.Union['IncomeVerificationPrecheckMilitaryInfo', schemas.Unset] = schemas.unset,
        payroll_institution: typing.Union['IncomeVerificationPrecheckPayrollInstitution', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreditPayrollIncomePrecheckRequest':
        return super().__new__(
            cls,
            *_args,
            client_id=client_id,
            secret=secret,
            user_token=user_token,
            access_tokens=access_tokens,
            employer=employer,
            us_military_info=us_military_info,
            payroll_institution=payroll_institution,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.income_verification_precheck_employer import IncomeVerificationPrecheckEmployer
from plaid.model.income_verification_precheck_military_info import IncomeVerificationPrecheckMilitaryInfo
from plaid.model.income_verification_precheck_payroll_institution import IncomeVerificationPrecheckPayrollInstitution
