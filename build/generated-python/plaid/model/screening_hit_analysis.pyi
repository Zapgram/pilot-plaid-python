# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class ScreeningHitAnalysis(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Analysis information describing why a screening hit matched the provided user information
    """


    class MetaOapg:
        required = {
            "search_terms_version",
        }
        
        class properties:
            search_terms_version = schemas.IntSchema
        
            @staticmethod
            def dates_of_birth() -> typing.Type['MatchSummaryCode']:
                return MatchSummaryCode
        
            @staticmethod
            def documents() -> typing.Type['MatchSummaryCode']:
                return MatchSummaryCode
        
            @staticmethod
            def locations() -> typing.Type['MatchSummaryCode']:
                return MatchSummaryCode
        
            @staticmethod
            def names() -> typing.Type['MatchSummaryCode']:
                return MatchSummaryCode
            __annotations__ = {
                "search_terms_version": search_terms_version,
                "dates_of_birth": dates_of_birth,
                "documents": documents,
                "locations": locations,
                "names": names,
            }
        additional_properties = schemas.AnyTypeSchema
    
    search_terms_version: MetaOapg.properties.search_terms_version
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["search_terms_version"]) -> MetaOapg.properties.search_terms_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dates_of_birth"]) -> 'MatchSummaryCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documents"]) -> 'MatchSummaryCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locations"]) -> 'MatchSummaryCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["names"]) -> 'MatchSummaryCode': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["search_terms_version"], typing_extensions.Literal["dates_of_birth"], typing_extensions.Literal["documents"], typing_extensions.Literal["locations"], typing_extensions.Literal["names"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["search_terms_version"]) -> MetaOapg.properties.search_terms_version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dates_of_birth"]) -> typing.Union['MatchSummaryCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documents"]) -> typing.Union['MatchSummaryCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locations"]) -> typing.Union['MatchSummaryCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["names"]) -> typing.Union['MatchSummaryCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["search_terms_version"], typing_extensions.Literal["dates_of_birth"], typing_extensions.Literal["documents"], typing_extensions.Literal["locations"], typing_extensions.Literal["names"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        search_terms_version: typing.Union[MetaOapg.properties.search_terms_version, decimal.Decimal, int, ],
        dates_of_birth: typing.Union['MatchSummaryCode', schemas.Unset] = schemas.unset,
        documents: typing.Union['MatchSummaryCode', schemas.Unset] = schemas.unset,
        locations: typing.Union['MatchSummaryCode', schemas.Unset] = schemas.unset,
        names: typing.Union['MatchSummaryCode', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'ScreeningHitAnalysis':
        return super().__new__(
            cls,
            *_args,
            search_terms_version=search_terms_version,
            dates_of_birth=dates_of_birth,
            documents=documents,
            locations=locations,
            names=names,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.match_summary_code import MatchSummaryCode
