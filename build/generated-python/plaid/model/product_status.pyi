# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class ProductStatus(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A representation of the status health of a request type. Auth requests, Balance requests, Identity requests, Investments requests, Liabilities requests, Transactions updates, Investments updates, Liabilities updates, and Item logins each have their own status object.
    """


    class MetaOapg:
        required = {
            "last_status_change",
            "breakdown",
            "status",
        }
        
        class properties:
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def HEALTHY(cls):
                    return cls("HEALTHY")
                
                @schemas.classproperty
                def DEGRADED(cls):
                    return cls("DEGRADED")
                
                @schemas.classproperty
                def DOWN(cls):
                    return cls("DOWN")
            last_status_change = schemas.DateTimeSchema
        
            @staticmethod
            def breakdown() -> typing.Type['ProductStatusBreakdown']:
                return ProductStatusBreakdown
            __annotations__ = {
                "status": status,
                "last_status_change": last_status_change,
                "breakdown": breakdown,
            }
        additional_properties = schemas.AnyTypeSchema

    
    last_status_change: MetaOapg.properties.last_status_change
    breakdown: 'ProductStatusBreakdown'
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_status_change"]) -> MetaOapg.properties.last_status_change: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["breakdown"]) -> 'ProductStatusBreakdown': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["last_status_change"], typing_extensions.Literal["breakdown"], typing_extensions.Literal["status"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_status_change"]) -> MetaOapg.properties.last_status_change: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["breakdown"]) -> 'ProductStatusBreakdown': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["last_status_change"], typing_extensions.Literal["breakdown"], typing_extensions.Literal["status"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'ProductStatus':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.product_status_breakdown import ProductStatusBreakdown
