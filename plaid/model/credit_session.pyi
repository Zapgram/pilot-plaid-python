# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class CreditSession(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Metadata and results for a Link session
    """


    class MetaOapg:
        
        class properties:
            link_session_id = schemas.StrSchema
            session_start_time = schemas.DateTimeSchema
        
            @staticmethod
            def results() -> typing.Type['CreditSessionResults']:
                return CreditSessionResults
            
            
            class errors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CreditSessionError']:
                        return CreditSessionError
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CreditSessionError'], typing.List['CreditSessionError']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'errors':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CreditSessionError':
                    return super().__getitem__(i)
            __annotations__ = {
                "link_session_id": link_session_id,
                "session_start_time": session_start_time,
                "results": results,
                "errors": errors,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link_session_id"]) -> MetaOapg.properties.link_session_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["session_start_time"]) -> MetaOapg.properties.session_start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["results"]) -> 'CreditSessionResults': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errors"]) -> MetaOapg.properties.errors: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["link_session_id", "session_start_time", "results", "errors", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link_session_id"]) -> typing.Union[MetaOapg.properties.link_session_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["session_start_time"]) -> typing.Union[MetaOapg.properties.session_start_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["results"]) -> typing.Union['CreditSessionResults', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errors"]) -> typing.Union[MetaOapg.properties.errors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["link_session_id", "session_start_time", "results", "errors", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        link_session_id: typing.Union[MetaOapg.properties.link_session_id, str, schemas.Unset] = schemas.unset,
        session_start_time: typing.Union[MetaOapg.properties.session_start_time, str, datetime, schemas.Unset] = schemas.unset,
        results: typing.Union['CreditSessionResults', schemas.Unset] = schemas.unset,
        errors: typing.Union[MetaOapg.properties.errors, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreditSession':
        return super().__new__(
            cls,
            *_args,
            link_session_id=link_session_id,
            session_start_time=session_start_time,
            results=results,
            errors=errors,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.credit_session_error import CreditSessionError
from plaid.model.credit_session_results import CreditSessionResults
