# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class IdentityVerificationRetryRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Request input for retrying an identity verification attempt
    """


    class MetaOapg:
        required = {
            "client_user_id",
            "template_id",
            "strategy",
        }
        
        class properties:
        
            @staticmethod
            def client_user_id() -> typing.Type['ClientUserID']:
                return ClientUserID
            template_id = schemas.StrSchema
        
            @staticmethod
            def strategy() -> typing.Type['Strategy']:
                return Strategy
        
            @staticmethod
            def user() -> typing.Type['IdentityVerificationRequestUser']:
                return IdentityVerificationRequestUser
        
            @staticmethod
            def steps() -> typing.Type['IdentityVerificationRetryRequestStepsObject']:
                return IdentityVerificationRetryRequestStepsObject
            client_id = schemas.StrSchema
            secret = schemas.StrSchema
            __annotations__ = {
                "client_user_id": client_user_id,
                "template_id": template_id,
                "strategy": strategy,
                "user": user,
                "steps": steps,
                "client_id": client_id,
                "secret": secret,
            }
    
    client_user_id: 'ClientUserID'
    template_id: MetaOapg.properties.template_id
    strategy: 'Strategy'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_user_id"]) -> 'ClientUserID': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["template_id"]) -> MetaOapg.properties.template_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["strategy"]) -> 'Strategy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'IdentityVerificationRequestUser': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["steps"]) -> 'IdentityVerificationRetryRequestStepsObject': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_id"]) -> MetaOapg.properties.client_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["client_user_id", "template_id", "strategy", "user", "steps", "client_id", "secret", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_user_id"]) -> 'ClientUserID': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["template_id"]) -> MetaOapg.properties.template_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["strategy"]) -> 'Strategy': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['IdentityVerificationRequestUser', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["steps"]) -> typing.Union['IdentityVerificationRetryRequestStepsObject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_id"]) -> typing.Union[MetaOapg.properties.client_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["client_user_id", "template_id", "strategy", "user", "steps", "client_id", "secret", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        client_user_id: 'ClientUserID',
        template_id: typing.Union[MetaOapg.properties.template_id, str, ],
        strategy: 'Strategy',
        user: typing.Union['IdentityVerificationRequestUser', schemas.Unset] = schemas.unset,
        steps: typing.Union['IdentityVerificationRetryRequestStepsObject', schemas.Unset] = schemas.unset,
        client_id: typing.Union[MetaOapg.properties.client_id, str, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IdentityVerificationRetryRequest':
        return super().__new__(
            cls,
            *_args,
            client_user_id=client_user_id,
            template_id=template_id,
            strategy=strategy,
            user=user,
            steps=steps,
            client_id=client_id,
            secret=secret,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.client_user_id import ClientUserID
from plaid.model.identity_verification_request_user import IdentityVerificationRequestUser
from plaid.model.identity_verification_retry_request_steps_object import IdentityVerificationRetryRequestStepsObject
from plaid.model.strategy import Strategy
