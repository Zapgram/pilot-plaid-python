# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class CreditSessionPayrollIncomeResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The details of a digital payroll income verification in Link
    """


    class MetaOapg:
        
        class properties:
            num_paystubs_retrieved = schemas.IntSchema
            num_w2s_retrieved = schemas.IntSchema
            institution_id = schemas.StrSchema
            institution_name = schemas.StrSchema
            __annotations__ = {
                "num_paystubs_retrieved": num_paystubs_retrieved,
                "num_w2s_retrieved": num_w2s_retrieved,
                "institution_id": institution_id,
                "institution_name": institution_name,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_paystubs_retrieved"]) -> MetaOapg.properties.num_paystubs_retrieved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_w2s_retrieved"]) -> MetaOapg.properties.num_w2s_retrieved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_id"]) -> MetaOapg.properties.institution_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_name"]) -> MetaOapg.properties.institution_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["num_paystubs_retrieved", "num_w2s_retrieved", "institution_id", "institution_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_paystubs_retrieved"]) -> typing.Union[MetaOapg.properties.num_paystubs_retrieved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_w2s_retrieved"]) -> typing.Union[MetaOapg.properties.num_w2s_retrieved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_id"]) -> typing.Union[MetaOapg.properties.institution_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_name"]) -> typing.Union[MetaOapg.properties.institution_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["num_paystubs_retrieved", "num_w2s_retrieved", "institution_id", "institution_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        num_paystubs_retrieved: typing.Union[MetaOapg.properties.num_paystubs_retrieved, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        num_w2s_retrieved: typing.Union[MetaOapg.properties.num_w2s_retrieved, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        institution_id: typing.Union[MetaOapg.properties.institution_id, str, schemas.Unset] = schemas.unset,
        institution_name: typing.Union[MetaOapg.properties.institution_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreditSessionPayrollIncomeResult':
        return super().__new__(
            cls,
            *_args,
            num_paystubs_retrieved=num_paystubs_retrieved,
            num_w2s_retrieved=num_w2s_retrieved,
            institution_id=institution_id,
            institution_name=institution_name,
            _configuration=_configuration,
            **kwargs,
        )
