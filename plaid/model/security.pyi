# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class Security(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Contains details about a security
    """


    class MetaOapg:
        required = {
            "unofficial_currency_code",
            "cusip",
            "ticker_symbol",
            "close_price_as_of",
            "institution_security_id",
            "sedol",
            "type",
            "institution_id",
            "close_price",
            "proxy_security_id",
            "iso_currency_code",
            "name",
            "is_cash_equivalent",
            "isin",
            "security_id",
        }
        
        class properties:
            security_id = schemas.StrSchema
            
            
            class isin(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isin':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cusip(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cusip':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class sedol(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sedol':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class institution_security_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'institution_security_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class institution_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'institution_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class proxy_security_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'proxy_security_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ticker_symbol(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ticker_symbol':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class is_cash_equivalent(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_cash_equivalent':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class type(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'type':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class close_price(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'close_price':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class close_price_as_of(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'close_price_as_of':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class iso_currency_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'iso_currency_code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class unofficial_currency_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'unofficial_currency_code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class update_datetime(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'update_datetime':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "security_id": security_id,
                "isin": isin,
                "cusip": cusip,
                "sedol": sedol,
                "institution_security_id": institution_security_id,
                "institution_id": institution_id,
                "proxy_security_id": proxy_security_id,
                "name": name,
                "ticker_symbol": ticker_symbol,
                "is_cash_equivalent": is_cash_equivalent,
                "type": type,
                "close_price": close_price,
                "close_price_as_of": close_price_as_of,
                "iso_currency_code": iso_currency_code,
                "unofficial_currency_code": unofficial_currency_code,
                "update_datetime": update_datetime,
            }
        additional_properties = schemas.AnyTypeSchema
    
    unofficial_currency_code: MetaOapg.properties.unofficial_currency_code
    cusip: MetaOapg.properties.cusip
    ticker_symbol: MetaOapg.properties.ticker_symbol
    close_price_as_of: MetaOapg.properties.close_price_as_of
    institution_security_id: MetaOapg.properties.institution_security_id
    sedol: MetaOapg.properties.sedol
    type: MetaOapg.properties.type
    institution_id: MetaOapg.properties.institution_id
    close_price: MetaOapg.properties.close_price
    proxy_security_id: MetaOapg.properties.proxy_security_id
    iso_currency_code: MetaOapg.properties.iso_currency_code
    name: MetaOapg.properties.name
    is_cash_equivalent: MetaOapg.properties.is_cash_equivalent
    isin: MetaOapg.properties.isin
    security_id: MetaOapg.properties.security_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unofficial_currency_code"]) -> MetaOapg.properties.unofficial_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cusip"]) -> MetaOapg.properties.cusip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ticker_symbol"]) -> MetaOapg.properties.ticker_symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["close_price_as_of"]) -> MetaOapg.properties.close_price_as_of: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_security_id"]) -> MetaOapg.properties.institution_security_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sedol"]) -> MetaOapg.properties.sedol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution_id"]) -> MetaOapg.properties.institution_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["close_price"]) -> MetaOapg.properties.close_price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proxy_security_id"]) -> MetaOapg.properties.proxy_security_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_cash_equivalent"]) -> MetaOapg.properties.is_cash_equivalent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isin"]) -> MetaOapg.properties.isin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["security_id"]) -> MetaOapg.properties.security_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_datetime"]) -> MetaOapg.properties.update_datetime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["unofficial_currency_code"], typing_extensions.Literal["cusip"], typing_extensions.Literal["ticker_symbol"], typing_extensions.Literal["close_price_as_of"], typing_extensions.Literal["institution_security_id"], typing_extensions.Literal["sedol"], typing_extensions.Literal["type"], typing_extensions.Literal["institution_id"], typing_extensions.Literal["close_price"], typing_extensions.Literal["proxy_security_id"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["name"], typing_extensions.Literal["is_cash_equivalent"], typing_extensions.Literal["isin"], typing_extensions.Literal["security_id"], typing_extensions.Literal["update_datetime"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unofficial_currency_code"]) -> MetaOapg.properties.unofficial_currency_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cusip"]) -> MetaOapg.properties.cusip: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ticker_symbol"]) -> MetaOapg.properties.ticker_symbol: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["close_price_as_of"]) -> MetaOapg.properties.close_price_as_of: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_security_id"]) -> MetaOapg.properties.institution_security_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sedol"]) -> MetaOapg.properties.sedol: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution_id"]) -> MetaOapg.properties.institution_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["close_price"]) -> MetaOapg.properties.close_price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proxy_security_id"]) -> MetaOapg.properties.proxy_security_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_cash_equivalent"]) -> MetaOapg.properties.is_cash_equivalent: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isin"]) -> MetaOapg.properties.isin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["security_id"]) -> MetaOapg.properties.security_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_datetime"]) -> typing.Union[MetaOapg.properties.update_datetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["unofficial_currency_code"], typing_extensions.Literal["cusip"], typing_extensions.Literal["ticker_symbol"], typing_extensions.Literal["close_price_as_of"], typing_extensions.Literal["institution_security_id"], typing_extensions.Literal["sedol"], typing_extensions.Literal["type"], typing_extensions.Literal["institution_id"], typing_extensions.Literal["close_price"], typing_extensions.Literal["proxy_security_id"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["name"], typing_extensions.Literal["is_cash_equivalent"], typing_extensions.Literal["isin"], typing_extensions.Literal["security_id"], typing_extensions.Literal["update_datetime"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        unofficial_currency_code: typing.Union[MetaOapg.properties.unofficial_currency_code, None, str, ],
        cusip: typing.Union[MetaOapg.properties.cusip, None, str, ],
        ticker_symbol: typing.Union[MetaOapg.properties.ticker_symbol, None, str, ],
        close_price_as_of: typing.Union[MetaOapg.properties.close_price_as_of, None, str, date, ],
        institution_security_id: typing.Union[MetaOapg.properties.institution_security_id, None, str, ],
        sedol: typing.Union[MetaOapg.properties.sedol, None, str, ],
        type: typing.Union[MetaOapg.properties.type, None, str, ],
        institution_id: typing.Union[MetaOapg.properties.institution_id, None, str, ],
        close_price: typing.Union[MetaOapg.properties.close_price, None, decimal.Decimal, int, float, ],
        proxy_security_id: typing.Union[MetaOapg.properties.proxy_security_id, None, str, ],
        iso_currency_code: typing.Union[MetaOapg.properties.iso_currency_code, None, str, ],
        name: typing.Union[MetaOapg.properties.name, None, str, ],
        is_cash_equivalent: typing.Union[MetaOapg.properties.is_cash_equivalent, None, bool, ],
        isin: typing.Union[MetaOapg.properties.isin, None, str, ],
        security_id: typing.Union[MetaOapg.properties.security_id, str, ],
        update_datetime: typing.Union[MetaOapg.properties.update_datetime, None, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'Security':
        return super().__new__(
            cls,
            *_args,
            unofficial_currency_code=unofficial_currency_code,
            cusip=cusip,
            ticker_symbol=ticker_symbol,
            close_price_as_of=close_price_as_of,
            institution_security_id=institution_security_id,
            sedol=sedol,
            type=type,
            institution_id=institution_id,
            close_price=close_price,
            proxy_security_id=proxy_security_id,
            iso_currency_code=iso_currency_code,
            name=name,
            is_cash_equivalent=is_cash_equivalent,
            isin=isin,
            security_id=security_id,
            update_datetime=update_datetime,
            _configuration=_configuration,
            **kwargs,
        )
