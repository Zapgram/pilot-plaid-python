# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class WalletTransaction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The transaction details
    """


    class MetaOapg:
        required = {
            "reference",
            "transaction_id",
            "amount",
            "wallet_id",
            "counterparty",
            "created_at",
            "last_status_update",
            "type",
            "status",
        }
        
        class properties:
            transaction_id = schemas.StrSchema
            wallet_id = schemas.StrSchema
            reference = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "BANK_TRANSFER": "BANK_TRANSFER",
                        "PAYOUT": "PAYOUT",
                        "PIS_PAY_IN": "PIS_PAY_IN",
                        "REFUND": "REFUND",
                        "FUNDS_SWEEP": "FUNDS_SWEEP",
                    }
                
                @schemas.classproperty
                def BANK_TRANSFER(cls):
                    return cls("BANK_TRANSFER")
                
                @schemas.classproperty
                def PAYOUT(cls):
                    return cls("PAYOUT")
                
                @schemas.classproperty
                def PIS_PAY_IN(cls):
                    return cls("PIS_PAY_IN")
                
                @schemas.classproperty
                def REFUND(cls):
                    return cls("REFUND")
                
                @schemas.classproperty
                def FUNDS_SWEEP(cls):
                    return cls("FUNDS_SWEEP")
        
            @staticmethod
            def amount() -> typing.Type['WalletTransactionAmount']:
                return WalletTransactionAmount
        
            @staticmethod
            def counterparty() -> typing.Type['WalletTransactionCounterparty']:
                return WalletTransactionCounterparty
        
            @staticmethod
            def status() -> typing.Type['WalletTransactionStatus']:
                return WalletTransactionStatus
            created_at = schemas.DateTimeSchema
            last_status_update = schemas.DateTimeSchema
        
            @staticmethod
            def scheme() -> typing.Type['WalletPaymentScheme']:
                return WalletPaymentScheme
            
            
            class payment_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payment_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "transaction_id": transaction_id,
                "wallet_id": wallet_id,
                "reference": reference,
                "type": type,
                "amount": amount,
                "counterparty": counterparty,
                "status": status,
                "created_at": created_at,
                "last_status_update": last_status_update,
                "scheme": scheme,
                "payment_id": payment_id,
            }
        additional_properties = schemas.AnyTypeSchema
    
    reference: MetaOapg.properties.reference
    transaction_id: MetaOapg.properties.transaction_id
    amount: 'WalletTransactionAmount'
    wallet_id: MetaOapg.properties.wallet_id
    counterparty: 'WalletTransactionCounterparty'
    created_at: MetaOapg.properties.created_at
    last_status_update: MetaOapg.properties.last_status_update
    type: MetaOapg.properties.type
    status: 'WalletTransactionStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference"]) -> MetaOapg.properties.reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_id"]) -> MetaOapg.properties.transaction_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> 'WalletTransactionAmount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wallet_id"]) -> MetaOapg.properties.wallet_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["counterparty"]) -> 'WalletTransactionCounterparty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_status_update"]) -> MetaOapg.properties.last_status_update: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'WalletTransactionStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheme"]) -> 'WalletPaymentScheme': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_id"]) -> MetaOapg.properties.payment_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["reference"], typing_extensions.Literal["transaction_id"], typing_extensions.Literal["amount"], typing_extensions.Literal["wallet_id"], typing_extensions.Literal["counterparty"], typing_extensions.Literal["created_at"], typing_extensions.Literal["last_status_update"], typing_extensions.Literal["type"], typing_extensions.Literal["status"], typing_extensions.Literal["scheme"], typing_extensions.Literal["payment_id"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference"]) -> MetaOapg.properties.reference: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_id"]) -> MetaOapg.properties.transaction_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> 'WalletTransactionAmount': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wallet_id"]) -> MetaOapg.properties.wallet_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["counterparty"]) -> 'WalletTransactionCounterparty': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_status_update"]) -> MetaOapg.properties.last_status_update: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'WalletTransactionStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheme"]) -> typing.Union['WalletPaymentScheme', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_id"]) -> typing.Union[MetaOapg.properties.payment_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reference"], typing_extensions.Literal["transaction_id"], typing_extensions.Literal["amount"], typing_extensions.Literal["wallet_id"], typing_extensions.Literal["counterparty"], typing_extensions.Literal["created_at"], typing_extensions.Literal["last_status_update"], typing_extensions.Literal["type"], typing_extensions.Literal["status"], typing_extensions.Literal["scheme"], typing_extensions.Literal["payment_id"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        reference: typing.Union[MetaOapg.properties.reference, str, ],
        transaction_id: typing.Union[MetaOapg.properties.transaction_id, str, ],
        amount: 'WalletTransactionAmount',
        wallet_id: typing.Union[MetaOapg.properties.wallet_id, str, ],
        counterparty: 'WalletTransactionCounterparty',
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, ],
        last_status_update: typing.Union[MetaOapg.properties.last_status_update, str, datetime, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        status: 'WalletTransactionStatus',
        scheme: typing.Union['WalletPaymentScheme', schemas.Unset] = schemas.unset,
        payment_id: typing.Union[MetaOapg.properties.payment_id, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'WalletTransaction':
        return super().__new__(
            cls,
            *_args,
            reference=reference,
            transaction_id=transaction_id,
            amount=amount,
            wallet_id=wallet_id,
            counterparty=counterparty,
            created_at=created_at,
            last_status_update=last_status_update,
            type=type,
            status=status,
            scheme=scheme,
            payment_id=payment_id,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.wallet_payment_scheme import WalletPaymentScheme
from plaid.model.wallet_transaction_amount import WalletTransactionAmount
from plaid.model.wallet_transaction_counterparty import WalletTransactionCounterparty
from plaid.model.wallet_transaction_status import WalletTransactionStatus
