# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class PartnerCustomerCreateRequest(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Request schema for `/partner/customer/create`.
    """


    class MetaOapg:
        required = {
            "is_diligence_attested",
            "website",
            "address",
            "application_name",
            "company_name",
            "is_bank_addendum_completed",
            "legal_entity_name",
            "products",
        }
        
        class properties:
            company_name = schemas.StrSchema
            is_diligence_attested = schemas.BoolSchema
            
            
            class products(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Products']:
                        return Products
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Products'], typing.List['Products']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'products':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Products':
                    return super().__getitem__(i)
            legal_entity_name = schemas.StrSchema
            website = schemas.StrSchema
            application_name = schemas.StrSchema
        
            @staticmethod
            def address() -> typing.Type['PartnerEndCustomerAddress']:
                return PartnerEndCustomerAddress
            is_bank_addendum_completed = schemas.BoolSchema
            client_id = schemas.StrSchema
            secret = schemas.StrSchema
            create_link_customization = schemas.BoolSchema
            logo = schemas.StrSchema
        
            @staticmethod
            def technical_contact() -> typing.Type['PartnerEndCustomerTechnicalContact']:
                return PartnerEndCustomerTechnicalContact
        
            @staticmethod
            def billing_contact() -> typing.Type['PartnerEndCustomerBillingContact']:
                return PartnerEndCustomerBillingContact
        
            @staticmethod
            def customer_support_info() -> typing.Type['PartnerEndCustomerCustomerSupportInfo']:
                return PartnerEndCustomerCustomerSupportInfo
        
            @staticmethod
            def assets_under_management() -> typing.Type['PartnerEndCustomerAssetsUnderManagement']:
                return PartnerEndCustomerAssetsUnderManagement
            
            
            class redirect_uris(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'redirect_uris':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "company_name": company_name,
                "is_diligence_attested": is_diligence_attested,
                "products": products,
                "legal_entity_name": legal_entity_name,
                "website": website,
                "application_name": application_name,
                "address": address,
                "is_bank_addendum_completed": is_bank_addendum_completed,
                "client_id": client_id,
                "secret": secret,
                "create_link_customization": create_link_customization,
                "logo": logo,
                "technical_contact": technical_contact,
                "billing_contact": billing_contact,
                "customer_support_info": customer_support_info,
                "assets_under_management": assets_under_management,
                "redirect_uris": redirect_uris,
            }

    
    is_diligence_attested: MetaOapg.properties.is_diligence_attested
    website: MetaOapg.properties.website
    address: 'PartnerEndCustomerAddress'
    application_name: MetaOapg.properties.application_name
    company_name: MetaOapg.properties.company_name
    is_bank_addendum_completed: MetaOapg.properties.is_bank_addendum_completed
    legal_entity_name: MetaOapg.properties.legal_entity_name
    products: MetaOapg.properties.products
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_name"]) -> MetaOapg.properties.company_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_diligence_attested"]) -> MetaOapg.properties.is_diligence_attested: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["products"]) -> MetaOapg.properties.products: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legal_entity_name"]) -> MetaOapg.properties.legal_entity_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["website"]) -> MetaOapg.properties.website: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["application_name"]) -> MetaOapg.properties.application_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'PartnerEndCustomerAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_bank_addendum_completed"]) -> MetaOapg.properties.is_bank_addendum_completed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_id"]) -> MetaOapg.properties.client_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_link_customization"]) -> MetaOapg.properties.create_link_customization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo"]) -> MetaOapg.properties.logo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["technical_contact"]) -> 'PartnerEndCustomerTechnicalContact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing_contact"]) -> 'PartnerEndCustomerBillingContact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer_support_info"]) -> 'PartnerEndCustomerCustomerSupportInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assets_under_management"]) -> 'PartnerEndCustomerAssetsUnderManagement': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["redirect_uris"]) -> MetaOapg.properties.redirect_uris: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["company_name", "is_diligence_attested", "products", "legal_entity_name", "website", "application_name", "address", "is_bank_addendum_completed", "client_id", "secret", "create_link_customization", "logo", "technical_contact", "billing_contact", "customer_support_info", "assets_under_management", "redirect_uris", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_name"]) -> MetaOapg.properties.company_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_diligence_attested"]) -> MetaOapg.properties.is_diligence_attested: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["products"]) -> MetaOapg.properties.products: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legal_entity_name"]) -> MetaOapg.properties.legal_entity_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["website"]) -> MetaOapg.properties.website: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["application_name"]) -> MetaOapg.properties.application_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> 'PartnerEndCustomerAddress': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_bank_addendum_completed"]) -> MetaOapg.properties.is_bank_addendum_completed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_id"]) -> typing.Union[MetaOapg.properties.client_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_link_customization"]) -> typing.Union[MetaOapg.properties.create_link_customization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logo"]) -> typing.Union[MetaOapg.properties.logo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["technical_contact"]) -> typing.Union['PartnerEndCustomerTechnicalContact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing_contact"]) -> typing.Union['PartnerEndCustomerBillingContact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer_support_info"]) -> typing.Union['PartnerEndCustomerCustomerSupportInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assets_under_management"]) -> typing.Union['PartnerEndCustomerAssetsUnderManagement', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["redirect_uris"]) -> typing.Union[MetaOapg.properties.redirect_uris, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["company_name", "is_diligence_attested", "products", "legal_entity_name", "website", "application_name", "address", "is_bank_addendum_completed", "client_id", "secret", "create_link_customization", "logo", "technical_contact", "billing_contact", "customer_support_info", "assets_under_management", "redirect_uris", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        is_diligence_attested: typing.Union[MetaOapg.properties.is_diligence_attested, bool, ],
        website: typing.Union[MetaOapg.properties.website, str, ],
        address: 'PartnerEndCustomerAddress',
        application_name: typing.Union[MetaOapg.properties.application_name, str, ],
        company_name: typing.Union[MetaOapg.properties.company_name, str, ],
        is_bank_addendum_completed: typing.Union[MetaOapg.properties.is_bank_addendum_completed, bool, ],
        legal_entity_name: typing.Union[MetaOapg.properties.legal_entity_name, str, ],
        products: typing.Union[MetaOapg.properties.products, list, tuple, ],
        client_id: typing.Union[MetaOapg.properties.client_id, str, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        create_link_customization: typing.Union[MetaOapg.properties.create_link_customization, bool, schemas.Unset] = schemas.unset,
        logo: typing.Union[MetaOapg.properties.logo, str, schemas.Unset] = schemas.unset,
        technical_contact: typing.Union['PartnerEndCustomerTechnicalContact', schemas.Unset] = schemas.unset,
        billing_contact: typing.Union['PartnerEndCustomerBillingContact', schemas.Unset] = schemas.unset,
        customer_support_info: typing.Union['PartnerEndCustomerCustomerSupportInfo', schemas.Unset] = schemas.unset,
        assets_under_management: typing.Union['PartnerEndCustomerAssetsUnderManagement', schemas.Unset] = schemas.unset,
        redirect_uris: typing.Union[MetaOapg.properties.redirect_uris, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PartnerCustomerCreateRequest':
        return super().__new__(
            cls,
            *_args,
            is_diligence_attested=is_diligence_attested,
            website=website,
            address=address,
            application_name=application_name,
            company_name=company_name,
            is_bank_addendum_completed=is_bank_addendum_completed,
            legal_entity_name=legal_entity_name,
            products=products,
            client_id=client_id,
            secret=secret,
            create_link_customization=create_link_customization,
            logo=logo,
            technical_contact=technical_contact,
            billing_contact=billing_contact,
            customer_support_info=customer_support_info,
            assets_under_management=assets_under_management,
            redirect_uris=redirect_uris,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.partner_end_customer_address import PartnerEndCustomerAddress
from plaid.model.partner_end_customer_assets_under_management import PartnerEndCustomerAssetsUnderManagement
from plaid.model.partner_end_customer_billing_contact import PartnerEndCustomerBillingContact
from plaid.model.partner_end_customer_customer_support_info import PartnerEndCustomerCustomerSupportInfo
from plaid.model.partner_end_customer_technical_contact import PartnerEndCustomerTechnicalContact
from plaid.model.products import Products
