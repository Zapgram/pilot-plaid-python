# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class TaxpayerIdentifier(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Information about the Taxpayer identification values assigned to the individual or legal entity.Information about the Taxpayer identification values assigned to the individual or legal entity.
    """


    class MetaOapg:
        required = {
            "TaxpayerIdentifierType",
            "TaxpayerIdentifierValue",
        }
        
        class properties:
        
            @staticmethod
            def TaxpayerIdentifierType() -> typing.Type['TaxpayerIdentifierType']:
                return TaxpayerIdentifierType
            
            
            class TaxpayerIdentifierValue(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'TaxpayerIdentifierValue':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "TaxpayerIdentifierType": TaxpayerIdentifierType,
                "TaxpayerIdentifierValue": TaxpayerIdentifierValue,
            }
        additional_properties = schemas.AnyTypeSchema
    
    TaxpayerIdentifierType: 'TaxpayerIdentifierType'
    TaxpayerIdentifierValue: MetaOapg.properties.TaxpayerIdentifierValue
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TaxpayerIdentifierType"]) -> 'TaxpayerIdentifierType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TaxpayerIdentifierValue"]) -> MetaOapg.properties.TaxpayerIdentifierValue: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["TaxpayerIdentifierType"], typing_extensions.Literal["TaxpayerIdentifierValue"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TaxpayerIdentifierType"]) -> 'TaxpayerIdentifierType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TaxpayerIdentifierValue"]) -> MetaOapg.properties.TaxpayerIdentifierValue: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["TaxpayerIdentifierType"], typing_extensions.Literal["TaxpayerIdentifierValue"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        TaxpayerIdentifierType: 'TaxpayerIdentifierType',
        TaxpayerIdentifierValue: typing.Union[MetaOapg.properties.TaxpayerIdentifierValue, None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'TaxpayerIdentifier':
        return super().__new__(
            cls,
            *_args,
            TaxpayerIdentifierType=TaxpayerIdentifierType,
            TaxpayerIdentifierValue=TaxpayerIdentifierValue,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.taxpayer_identifier_type import TaxpayerIdentifierType
