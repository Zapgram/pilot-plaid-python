# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class TransactionStream(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A grouping of related transactions
    """


    class MetaOapg:
        required = {
            "average_amount",
            "is_active",
            "description",
            "merchant_name",
            "last_date",
            "frequency",
            "account_id",
            "category_id",
            "stream_id",
            "transaction_ids",
            "category",
            "first_date",
            "last_amount",
            "status",
        }
        
        class properties:
            account_id = schemas.StrSchema
            stream_id = schemas.StrSchema
            
            
            class category(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'category':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            category_id = schemas.StrSchema
            description = schemas.StrSchema
            
            
            class merchant_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'merchant_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            first_date = schemas.DateSchema
            last_date = schemas.DateSchema
        
            @staticmethod
            def frequency() -> typing.Type['RecurringTransactionFrequency']:
                return RecurringTransactionFrequency
            
            
            class transaction_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transaction_ids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def average_amount() -> typing.Type['TransactionStreamAmount']:
                return TransactionStreamAmount
        
            @staticmethod
            def last_amount() -> typing.Type['TransactionStreamAmount']:
                return TransactionStreamAmount
            is_active = schemas.BoolSchema
        
            @staticmethod
            def status() -> typing.Type['TransactionStreamStatus']:
                return TransactionStreamStatus
        
            @staticmethod
            def personal_finance_category() -> typing.Type['PersonalFinanceCategory']:
                return PersonalFinanceCategory
            __annotations__ = {
                "account_id": account_id,
                "stream_id": stream_id,
                "category": category,
                "category_id": category_id,
                "description": description,
                "merchant_name": merchant_name,
                "first_date": first_date,
                "last_date": last_date,
                "frequency": frequency,
                "transaction_ids": transaction_ids,
                "average_amount": average_amount,
                "last_amount": last_amount,
                "is_active": is_active,
                "status": status,
                "personal_finance_category": personal_finance_category,
            }
        additional_properties = schemas.AnyTypeSchema
    
    average_amount: 'TransactionStreamAmount'
    is_active: MetaOapg.properties.is_active
    description: MetaOapg.properties.description
    merchant_name: MetaOapg.properties.merchant_name
    last_date: MetaOapg.properties.last_date
    frequency: 'RecurringTransactionFrequency'
    account_id: MetaOapg.properties.account_id
    category_id: MetaOapg.properties.category_id
    stream_id: MetaOapg.properties.stream_id
    transaction_ids: MetaOapg.properties.transaction_ids
    category: MetaOapg.properties.category
    first_date: MetaOapg.properties.first_date
    last_amount: 'TransactionStreamAmount'
    status: 'TransactionStreamStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["average_amount"]) -> 'TransactionStreamAmount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant_name"]) -> MetaOapg.properties.merchant_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_date"]) -> MetaOapg.properties.last_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> 'RecurringTransactionFrequency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.properties.category_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stream_id"]) -> MetaOapg.properties.stream_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_ids"]) -> MetaOapg.properties.transaction_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_date"]) -> MetaOapg.properties.first_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_amount"]) -> 'TransactionStreamAmount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'TransactionStreamStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personal_finance_category"]) -> 'PersonalFinanceCategory': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["average_amount"], typing_extensions.Literal["is_active"], typing_extensions.Literal["description"], typing_extensions.Literal["merchant_name"], typing_extensions.Literal["last_date"], typing_extensions.Literal["frequency"], typing_extensions.Literal["account_id"], typing_extensions.Literal["category_id"], typing_extensions.Literal["stream_id"], typing_extensions.Literal["transaction_ids"], typing_extensions.Literal["category"], typing_extensions.Literal["first_date"], typing_extensions.Literal["last_amount"], typing_extensions.Literal["status"], typing_extensions.Literal["personal_finance_category"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["average_amount"]) -> 'TransactionStreamAmount': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant_name"]) -> MetaOapg.properties.merchant_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_date"]) -> MetaOapg.properties.last_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> 'RecurringTransactionFrequency': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.properties.category_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stream_id"]) -> MetaOapg.properties.stream_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_ids"]) -> MetaOapg.properties.transaction_ids: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_date"]) -> MetaOapg.properties.first_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_amount"]) -> 'TransactionStreamAmount': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'TransactionStreamStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personal_finance_category"]) -> typing.Union['PersonalFinanceCategory', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["average_amount"], typing_extensions.Literal["is_active"], typing_extensions.Literal["description"], typing_extensions.Literal["merchant_name"], typing_extensions.Literal["last_date"], typing_extensions.Literal["frequency"], typing_extensions.Literal["account_id"], typing_extensions.Literal["category_id"], typing_extensions.Literal["stream_id"], typing_extensions.Literal["transaction_ids"], typing_extensions.Literal["category"], typing_extensions.Literal["first_date"], typing_extensions.Literal["last_amount"], typing_extensions.Literal["status"], typing_extensions.Literal["personal_finance_category"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        average_amount: 'TransactionStreamAmount',
        is_active: typing.Union[MetaOapg.properties.is_active, bool, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        merchant_name: typing.Union[MetaOapg.properties.merchant_name, None, str, ],
        last_date: typing.Union[MetaOapg.properties.last_date, str, date, ],
        frequency: 'RecurringTransactionFrequency',
        account_id: typing.Union[MetaOapg.properties.account_id, str, ],
        category_id: typing.Union[MetaOapg.properties.category_id, str, ],
        stream_id: typing.Union[MetaOapg.properties.stream_id, str, ],
        transaction_ids: typing.Union[MetaOapg.properties.transaction_ids, list, tuple, ],
        category: typing.Union[MetaOapg.properties.category, list, tuple, ],
        first_date: typing.Union[MetaOapg.properties.first_date, str, date, ],
        last_amount: 'TransactionStreamAmount',
        status: 'TransactionStreamStatus',
        personal_finance_category: typing.Union['PersonalFinanceCategory', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'TransactionStream':
        return super().__new__(
            cls,
            *_args,
            average_amount=average_amount,
            is_active=is_active,
            description=description,
            merchant_name=merchant_name,
            last_date=last_date,
            frequency=frequency,
            account_id=account_id,
            category_id=category_id,
            stream_id=stream_id,
            transaction_ids=transaction_ids,
            category=category,
            first_date=first_date,
            last_amount=last_amount,
            status=status,
            personal_finance_category=personal_finance_category,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.personal_finance_category import PersonalFinanceCategory
from plaid.model.recurring_transaction_frequency import RecurringTransactionFrequency
from plaid.model.transaction_stream_amount import TransactionStreamAmount
from plaid.model.transaction_stream_status import TransactionStreamStatus
