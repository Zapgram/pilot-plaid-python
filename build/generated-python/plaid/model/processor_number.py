# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class ProcessorNumber(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An object containing identifying numbers used for making electronic transfers to and from the `account`. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by the `account` for which auth data has been requested, a null value will be returned.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def ach() -> typing.Type['NumbersACHNullable']:
                return NumbersACHNullable
        
            @staticmethod
            def eft() -> typing.Type['NumbersEFTNullable']:
                return NumbersEFTNullable
        
            @staticmethod
            def international() -> typing.Type['NumbersInternationalNullable']:
                return NumbersInternationalNullable
        
            @staticmethod
            def bacs() -> typing.Type['NumbersBACSNullable']:
                return NumbersBACSNullable
            __annotations__ = {
                "ach": ach,
                "eft": eft,
                "international": international,
                "bacs": bacs,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ach"]) -> 'NumbersACHNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eft"]) -> 'NumbersEFTNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["international"]) -> 'NumbersInternationalNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bacs"]) -> 'NumbersBACSNullable': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ach"], typing_extensions.Literal["eft"], typing_extensions.Literal["international"], typing_extensions.Literal["bacs"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ach"]) -> typing.Union['NumbersACHNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eft"]) -> typing.Union['NumbersEFTNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["international"]) -> typing.Union['NumbersInternationalNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bacs"]) -> typing.Union['NumbersBACSNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ach"], typing_extensions.Literal["eft"], typing_extensions.Literal["international"], typing_extensions.Literal["bacs"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ach: typing.Union['NumbersACHNullable', schemas.Unset] = schemas.unset,
        eft: typing.Union['NumbersEFTNullable', schemas.Unset] = schemas.unset,
        international: typing.Union['NumbersInternationalNullable', schemas.Unset] = schemas.unset,
        bacs: typing.Union['NumbersBACSNullable', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'ProcessorNumber':
        return super().__new__(
            cls,
            *_args,
            ach=ach,
            eft=eft,
            international=international,
            bacs=bacs,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.numbers_ach_nullable import NumbersACHNullable
from plaid.model.numbers_bacs_nullable import NumbersBACSNullable
from plaid.model.numbers_eft_nullable import NumbersEFTNullable
from plaid.model.numbers_international_nullable import NumbersInternationalNullable
