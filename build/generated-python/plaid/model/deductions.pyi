# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class Deductions(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An object with the deduction information found on a paystub.
    """


    class MetaOapg:
        required = {
            "total",
            "breakdown",
        }
        
        class properties:
            
            
            class breakdown(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeductionsBreakdown']:
                        return DeductionsBreakdown
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeductionsBreakdown'], typing.List['DeductionsBreakdown']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'breakdown':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeductionsBreakdown':
                    return super().__getitem__(i)
        
            @staticmethod
            def total() -> typing.Type['DeductionsTotal']:
                return DeductionsTotal
            
            
            class subtotals(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Total']:
                        return Total
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Total'], typing.List['Total']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subtotals':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Total':
                    return super().__getitem__(i)
            
            
            class totals(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Total']:
                        return Total
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Total'], typing.List['Total']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'totals':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Total':
                    return super().__getitem__(i)
            __annotations__ = {
                "breakdown": breakdown,
                "total": total,
                "subtotals": subtotals,
                "totals": totals,
            }
        additional_properties = schemas.AnyTypeSchema
    
    total: 'DeductionsTotal'
    breakdown: MetaOapg.properties.breakdown
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> 'DeductionsTotal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["breakdown"]) -> MetaOapg.properties.breakdown: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtotals"]) -> MetaOapg.properties.subtotals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totals"]) -> MetaOapg.properties.totals: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["total"], typing_extensions.Literal["breakdown"], typing_extensions.Literal["subtotals"], typing_extensions.Literal["totals"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> 'DeductionsTotal': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["breakdown"]) -> MetaOapg.properties.breakdown: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtotals"]) -> typing.Union[MetaOapg.properties.subtotals, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totals"]) -> typing.Union[MetaOapg.properties.totals, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total"], typing_extensions.Literal["breakdown"], typing_extensions.Literal["subtotals"], typing_extensions.Literal["totals"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        total: 'DeductionsTotal',
        breakdown: typing.Union[MetaOapg.properties.breakdown, list, tuple, ],
        subtotals: typing.Union[MetaOapg.properties.subtotals, list, tuple, schemas.Unset] = schemas.unset,
        totals: typing.Union[MetaOapg.properties.totals, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'Deductions':
        return super().__new__(
            cls,
            *_args,
            total=total,
            breakdown=breakdown,
            subtotals=subtotals,
            totals=totals,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.deductions_breakdown import DeductionsBreakdown
from plaid.model.deductions_total import DeductionsTotal
from plaid.model.total import Total
