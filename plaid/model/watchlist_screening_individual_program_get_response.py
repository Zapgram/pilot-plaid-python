# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class WatchlistScreeningIndividualProgramGetResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of individuals.
    """


    class MetaOapg:
        required = {
            "lists_enabled",
            "audit_trail",
            "is_archived",
            "name",
            "created_at",
            "name_sensitivity",
            "id",
            "request_id",
            "is_rescanning_enabled",
        }
        
        class properties:
            id = schemas.StrSchema
            created_at = schemas.DateTimeSchema
            is_rescanning_enabled = schemas.BoolSchema
            
            
            class lists_enabled(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    
                    @staticmethod
                    def items() -> typing.Type['IndividualWatchlistCode']:
                        return IndividualWatchlistCode
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['IndividualWatchlistCode'], typing.List['IndividualWatchlistCode']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lists_enabled':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IndividualWatchlistCode':
                    return super().__getitem__(i)
        
            @staticmethod
            def name() -> typing.Type['IndividualWatchlistScreeningProgramName']:
                return IndividualWatchlistScreeningProgramName
        
            @staticmethod
            def name_sensitivity() -> typing.Type['ProgramNameSensitivity']:
                return ProgramNameSensitivity
        
            @staticmethod
            def audit_trail() -> typing.Type['WatchlistScreeningAuditTrail']:
                return WatchlistScreeningAuditTrail
            is_archived = schemas.BoolSchema
            request_id = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "created_at": created_at,
                "is_rescanning_enabled": is_rescanning_enabled,
                "lists_enabled": lists_enabled,
                "name": name,
                "name_sensitivity": name_sensitivity,
                "audit_trail": audit_trail,
                "is_archived": is_archived,
                "request_id": request_id,
            }
        additional_properties = schemas.AnyTypeSchema
    
    lists_enabled: MetaOapg.properties.lists_enabled
    audit_trail: 'WatchlistScreeningAuditTrail'
    is_archived: MetaOapg.properties.is_archived
    name: 'IndividualWatchlistScreeningProgramName'
    created_at: MetaOapg.properties.created_at
    name_sensitivity: 'ProgramNameSensitivity'
    id: MetaOapg.properties.id
    request_id: MetaOapg.properties.request_id
    is_rescanning_enabled: MetaOapg.properties.is_rescanning_enabled
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lists_enabled"]) -> MetaOapg.properties.lists_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audit_trail"]) -> 'WatchlistScreeningAuditTrail': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_archived"]) -> MetaOapg.properties.is_archived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> 'IndividualWatchlistScreeningProgramName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name_sensitivity"]) -> 'ProgramNameSensitivity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_rescanning_enabled"]) -> MetaOapg.properties.is_rescanning_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["lists_enabled"], typing_extensions.Literal["audit_trail"], typing_extensions.Literal["is_archived"], typing_extensions.Literal["name"], typing_extensions.Literal["created_at"], typing_extensions.Literal["name_sensitivity"], typing_extensions.Literal["id"], typing_extensions.Literal["request_id"], typing_extensions.Literal["is_rescanning_enabled"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lists_enabled"]) -> MetaOapg.properties.lists_enabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audit_trail"]) -> 'WatchlistScreeningAuditTrail': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_archived"]) -> MetaOapg.properties.is_archived: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> 'IndividualWatchlistScreeningProgramName': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name_sensitivity"]) -> 'ProgramNameSensitivity': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_rescanning_enabled"]) -> MetaOapg.properties.is_rescanning_enabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["lists_enabled"], typing_extensions.Literal["audit_trail"], typing_extensions.Literal["is_archived"], typing_extensions.Literal["name"], typing_extensions.Literal["created_at"], typing_extensions.Literal["name_sensitivity"], typing_extensions.Literal["id"], typing_extensions.Literal["request_id"], typing_extensions.Literal["is_rescanning_enabled"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        lists_enabled: typing.Union[MetaOapg.properties.lists_enabled, list, tuple, ],
        audit_trail: 'WatchlistScreeningAuditTrail',
        is_archived: typing.Union[MetaOapg.properties.is_archived, bool, ],
        name: 'IndividualWatchlistScreeningProgramName',
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, ],
        name_sensitivity: 'ProgramNameSensitivity',
        id: typing.Union[MetaOapg.properties.id, str, ],
        request_id: typing.Union[MetaOapg.properties.request_id, str, ],
        is_rescanning_enabled: typing.Union[MetaOapg.properties.is_rescanning_enabled, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'WatchlistScreeningIndividualProgramGetResponse':
        return super().__new__(
            cls,
            *_args,
            lists_enabled=lists_enabled,
            audit_trail=audit_trail,
            is_archived=is_archived,
            name=name,
            created_at=created_at,
            name_sensitivity=name_sensitivity,
            id=id,
            request_id=request_id,
            is_rescanning_enabled=is_rescanning_enabled,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.individual_watchlist_code import IndividualWatchlistCode
from plaid.model.individual_watchlist_screening_program_name import IndividualWatchlistScreeningProgramName
from plaid.model.program_name_sensitivity import ProgramNameSensitivity
from plaid.model.watchlist_screening_audit_trail import WatchlistScreeningAuditTrail
