# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class HealthIncident(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A status health incident
    """


    class MetaOapg:
        required = {
            "incident_updates",
            "title",
            "start_date",
        }
        
        class properties:
            start_date = schemas.DateTimeSchema
            title = schemas.StrSchema
            
            
            class incident_updates(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IncidentUpdate']:
                        return IncidentUpdate
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['IncidentUpdate'], typing.List['IncidentUpdate']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'incident_updates':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IncidentUpdate':
                    return super().__getitem__(i)
            
            
            class end_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'end_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "start_date": start_date,
                "title": title,
                "incident_updates": incident_updates,
                "end_date": end_date,
            }
        additional_properties = schemas.AnyTypeSchema
    
    incident_updates: MetaOapg.properties.incident_updates
    title: MetaOapg.properties.title
    start_date: MetaOapg.properties.start_date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incident_updates"]) -> MetaOapg.properties.incident_updates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["incident_updates"], typing_extensions.Literal["title"], typing_extensions.Literal["start_date"], typing_extensions.Literal["end_date"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incident_updates"]) -> MetaOapg.properties.incident_updates: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> typing.Union[MetaOapg.properties.end_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["incident_updates"], typing_extensions.Literal["title"], typing_extensions.Literal["start_date"], typing_extensions.Literal["end_date"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        incident_updates: typing.Union[MetaOapg.properties.incident_updates, list, tuple, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        start_date: typing.Union[MetaOapg.properties.start_date, str, datetime, ],
        end_date: typing.Union[MetaOapg.properties.end_date, None, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'HealthIncident':
        return super().__new__(
            cls,
            *_args,
            incident_updates=incident_updates,
            title=title,
            start_date=start_date,
            end_date=end_date,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.incident_update import IncidentUpdate
