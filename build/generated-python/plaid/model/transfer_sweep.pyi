# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class TransferSweep(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Describes a sweep of funds to / from the sweep account.

A sweep is associated with many sweep events (events of type `swept` or `return_swept`) which can be retrieved by invoking the `/transfer/event/list` endpoint with the corresponding `sweep_id`.

`swept` events occur when the transfer amount is credited or debited from your sweep account, depending on the `type` of the transfer. `return_swept` events occur when a transfer is returned and Plaid undoes the credit or debit.

The total sum of the `swept` and `return_swept` events is equal to the `amount` of the sweep Plaid creates and matches the amount of the entry on your sweep account ledger.
    """


    class MetaOapg:
        required = {
            "funding_account_id",
            "amount",
            "created",
            "settled",
            "iso_currency_code",
            "id",
        }
        
        class properties:
            id = schemas.StrSchema
            funding_account_id = schemas.StrSchema
            created = schemas.DateTimeSchema
            amount = schemas.StrSchema
            iso_currency_code = schemas.StrSchema
            
            
            class settled(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'settled':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def status() -> typing.Type['SweepStatus']:
                return SweepStatus
            __annotations__ = {
                "id": id,
                "funding_account_id": funding_account_id,
                "created": created,
                "amount": amount,
                "iso_currency_code": iso_currency_code,
                "settled": settled,
                "status": status,
            }
        additional_properties = schemas.AnyTypeSchema
    
    funding_account_id: MetaOapg.properties.funding_account_id
    amount: MetaOapg.properties.amount
    created: MetaOapg.properties.created
    settled: MetaOapg.properties.settled
    iso_currency_code: MetaOapg.properties.iso_currency_code
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["funding_account_id"]) -> MetaOapg.properties.funding_account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settled"]) -> MetaOapg.properties.settled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'SweepStatus': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["funding_account_id"], typing_extensions.Literal["amount"], typing_extensions.Literal["created"], typing_extensions.Literal["settled"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["id"], typing_extensions.Literal["status"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["funding_account_id"]) -> MetaOapg.properties.funding_account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settled"]) -> MetaOapg.properties.settled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iso_currency_code"]) -> MetaOapg.properties.iso_currency_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['SweepStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["funding_account_id"], typing_extensions.Literal["amount"], typing_extensions.Literal["created"], typing_extensions.Literal["settled"], typing_extensions.Literal["iso_currency_code"], typing_extensions.Literal["id"], typing_extensions.Literal["status"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        funding_account_id: typing.Union[MetaOapg.properties.funding_account_id, str, ],
        amount: typing.Union[MetaOapg.properties.amount, str, ],
        created: typing.Union[MetaOapg.properties.created, str, datetime, ],
        settled: typing.Union[MetaOapg.properties.settled, None, str, date, ],
        iso_currency_code: typing.Union[MetaOapg.properties.iso_currency_code, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        status: typing.Union['SweepStatus', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'TransferSweep':
        return super().__new__(
            cls,
            *_args,
            funding_account_id=funding_account_id,
            amount=amount,
            created=created,
            settled=settled,
            iso_currency_code=iso_currency_code,
            id=id,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.sweep_status import SweepStatus
