# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class BankTransferEvent(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Represents an event in the Bank Transfers API.
    """


    class MetaOapg:
        required = {
            "account_id",
            "event_id",
            "event_type",
            "bank_transfer_amount",
            "bank_transfer_id",
            "bank_transfer_type",
            "origination_account_id",
            "failure_reason",
            "bank_transfer_iso_currency_code",
            "direction",
            "timestamp",
        }
        
        class properties:
            
            
            class event_id(
                schemas.IntSchema
            ):
                pass
            timestamp = schemas.DateTimeSchema
        
            @staticmethod
            def event_type() -> typing.Type['BankTransferEventType']:
                return BankTransferEventType
            account_id = schemas.StrSchema
            bank_transfer_id = schemas.StrSchema
            
            
            class origination_account_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'origination_account_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def bank_transfer_type() -> typing.Type['BankTransferType']:
                return BankTransferType
            bank_transfer_amount = schemas.StrSchema
            bank_transfer_iso_currency_code = schemas.StrSchema
        
            @staticmethod
            def failure_reason() -> typing.Type['BankTransferFailure']:
                return BankTransferFailure
        
            @staticmethod
            def direction() -> typing.Type['BankTransferDirection']:
                return BankTransferDirection
            __annotations__ = {
                "event_id": event_id,
                "timestamp": timestamp,
                "event_type": event_type,
                "account_id": account_id,
                "bank_transfer_id": bank_transfer_id,
                "origination_account_id": origination_account_id,
                "bank_transfer_type": bank_transfer_type,
                "bank_transfer_amount": bank_transfer_amount,
                "bank_transfer_iso_currency_code": bank_transfer_iso_currency_code,
                "failure_reason": failure_reason,
                "direction": direction,
            }
        additional_properties = schemas.AnyTypeSchema
    
    account_id: MetaOapg.properties.account_id
    event_id: MetaOapg.properties.event_id
    event_type: 'BankTransferEventType'
    bank_transfer_amount: MetaOapg.properties.bank_transfer_amount
    bank_transfer_id: MetaOapg.properties.bank_transfer_id
    bank_transfer_type: 'BankTransferType'
    origination_account_id: MetaOapg.properties.origination_account_id
    failure_reason: 'BankTransferFailure'
    bank_transfer_iso_currency_code: MetaOapg.properties.bank_transfer_iso_currency_code
    direction: 'BankTransferDirection'
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_id"]) -> MetaOapg.properties.event_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_type"]) -> 'BankTransferEventType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_transfer_amount"]) -> MetaOapg.properties.bank_transfer_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_transfer_id"]) -> MetaOapg.properties.bank_transfer_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_transfer_type"]) -> 'BankTransferType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origination_account_id"]) -> MetaOapg.properties.origination_account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failure_reason"]) -> 'BankTransferFailure': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_transfer_iso_currency_code"]) -> MetaOapg.properties.bank_transfer_iso_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["direction"]) -> 'BankTransferDirection': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account_id"], typing_extensions.Literal["event_id"], typing_extensions.Literal["event_type"], typing_extensions.Literal["bank_transfer_amount"], typing_extensions.Literal["bank_transfer_id"], typing_extensions.Literal["bank_transfer_type"], typing_extensions.Literal["origination_account_id"], typing_extensions.Literal["failure_reason"], typing_extensions.Literal["bank_transfer_iso_currency_code"], typing_extensions.Literal["direction"], typing_extensions.Literal["timestamp"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_id"]) -> MetaOapg.properties.event_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_type"]) -> 'BankTransferEventType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_transfer_amount"]) -> MetaOapg.properties.bank_transfer_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_transfer_id"]) -> MetaOapg.properties.bank_transfer_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_transfer_type"]) -> 'BankTransferType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origination_account_id"]) -> MetaOapg.properties.origination_account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failure_reason"]) -> 'BankTransferFailure': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_transfer_iso_currency_code"]) -> MetaOapg.properties.bank_transfer_iso_currency_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["direction"]) -> 'BankTransferDirection': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account_id"], typing_extensions.Literal["event_id"], typing_extensions.Literal["event_type"], typing_extensions.Literal["bank_transfer_amount"], typing_extensions.Literal["bank_transfer_id"], typing_extensions.Literal["bank_transfer_type"], typing_extensions.Literal["origination_account_id"], typing_extensions.Literal["failure_reason"], typing_extensions.Literal["bank_transfer_iso_currency_code"], typing_extensions.Literal["direction"], typing_extensions.Literal["timestamp"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        account_id: typing.Union[MetaOapg.properties.account_id, str, ],
        event_id: typing.Union[MetaOapg.properties.event_id, decimal.Decimal, int, ],
        event_type: 'BankTransferEventType',
        bank_transfer_amount: typing.Union[MetaOapg.properties.bank_transfer_amount, str, ],
        bank_transfer_id: typing.Union[MetaOapg.properties.bank_transfer_id, str, ],
        bank_transfer_type: 'BankTransferType',
        origination_account_id: typing.Union[MetaOapg.properties.origination_account_id, None, str, ],
        failure_reason: 'BankTransferFailure',
        bank_transfer_iso_currency_code: typing.Union[MetaOapg.properties.bank_transfer_iso_currency_code, str, ],
        direction: 'BankTransferDirection',
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, datetime, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'BankTransferEvent':
        return super().__new__(
            cls,
            *_args,
            account_id=account_id,
            event_id=event_id,
            event_type=event_type,
            bank_transfer_amount=bank_transfer_amount,
            bank_transfer_id=bank_transfer_id,
            bank_transfer_type=bank_transfer_type,
            origination_account_id=origination_account_id,
            failure_reason=failure_reason,
            bank_transfer_iso_currency_code=bank_transfer_iso_currency_code,
            direction=direction,
            timestamp=timestamp,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.bank_transfer_direction import BankTransferDirection
from plaid.model.bank_transfer_event_type import BankTransferEventType
from plaid.model.bank_transfer_failure import BankTransferFailure
from plaid.model.bank_transfer_type import BankTransferType
