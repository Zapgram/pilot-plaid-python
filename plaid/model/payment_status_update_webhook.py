# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class PaymentStatusUpdateWebhook(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Fired when the status of a payment has changed.
    """


    class MetaOapg:
        required = {
            "new_payment_status",
            "original_reference",
            "original_start_date",
            "environment",
            "webhook_type",
            "payment_id",
            "adjusted_start_date",
            "webhook_code",
            "old_payment_status",
            "timestamp",
        }
        
        class properties:
            webhook_type = schemas.StrSchema
            webhook_code = schemas.StrSchema
            payment_id = schemas.StrSchema
        
            @staticmethod
            def new_payment_status() -> typing.Type['PaymentInitiationPaymentStatus']:
                return PaymentInitiationPaymentStatus
        
            @staticmethod
            def old_payment_status() -> typing.Type['PaymentInitiationPaymentStatus']:
                return PaymentInitiationPaymentStatus
            
            
            class original_reference(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'original_reference':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class original_start_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'original_start_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class adjusted_start_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'adjusted_start_date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            timestamp = schemas.DateTimeSchema
        
            @staticmethod
            def environment() -> typing.Type['WebhookEnvironmentValues']:
                return WebhookEnvironmentValues
            
            
            class transaction_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transaction_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class adjusted_reference(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'adjusted_reference':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def error() -> typing.Type['PlaidError']:
                return PlaidError
            __annotations__ = {
                "webhook_type": webhook_type,
                "webhook_code": webhook_code,
                "payment_id": payment_id,
                "new_payment_status": new_payment_status,
                "old_payment_status": old_payment_status,
                "original_reference": original_reference,
                "original_start_date": original_start_date,
                "adjusted_start_date": adjusted_start_date,
                "timestamp": timestamp,
                "environment": environment,
                "transaction_id": transaction_id,
                "adjusted_reference": adjusted_reference,
                "error": error,
            }
        additional_properties = schemas.AnyTypeSchema
    
    new_payment_status: 'PaymentInitiationPaymentStatus'
    original_reference: MetaOapg.properties.original_reference
    original_start_date: MetaOapg.properties.original_start_date
    environment: 'WebhookEnvironmentValues'
    webhook_type: MetaOapg.properties.webhook_type
    payment_id: MetaOapg.properties.payment_id
    adjusted_start_date: MetaOapg.properties.adjusted_start_date
    webhook_code: MetaOapg.properties.webhook_code
    old_payment_status: 'PaymentInitiationPaymentStatus'
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["new_payment_status"]) -> 'PaymentInitiationPaymentStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["original_reference"]) -> MetaOapg.properties.original_reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["original_start_date"]) -> MetaOapg.properties.original_start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment"]) -> 'WebhookEnvironmentValues': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhook_type"]) -> MetaOapg.properties.webhook_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_id"]) -> MetaOapg.properties.payment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adjusted_start_date"]) -> MetaOapg.properties.adjusted_start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhook_code"]) -> MetaOapg.properties.webhook_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["old_payment_status"]) -> 'PaymentInitiationPaymentStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_id"]) -> MetaOapg.properties.transaction_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adjusted_reference"]) -> MetaOapg.properties.adjusted_reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> 'PlaidError': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["new_payment_status"], typing_extensions.Literal["original_reference"], typing_extensions.Literal["original_start_date"], typing_extensions.Literal["environment"], typing_extensions.Literal["webhook_type"], typing_extensions.Literal["payment_id"], typing_extensions.Literal["adjusted_start_date"], typing_extensions.Literal["webhook_code"], typing_extensions.Literal["old_payment_status"], typing_extensions.Literal["timestamp"], typing_extensions.Literal["transaction_id"], typing_extensions.Literal["adjusted_reference"], typing_extensions.Literal["error"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["new_payment_status"]) -> 'PaymentInitiationPaymentStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["original_reference"]) -> MetaOapg.properties.original_reference: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["original_start_date"]) -> MetaOapg.properties.original_start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment"]) -> 'WebhookEnvironmentValues': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhook_type"]) -> MetaOapg.properties.webhook_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_id"]) -> MetaOapg.properties.payment_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adjusted_start_date"]) -> MetaOapg.properties.adjusted_start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhook_code"]) -> MetaOapg.properties.webhook_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["old_payment_status"]) -> 'PaymentInitiationPaymentStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_id"]) -> typing.Union[MetaOapg.properties.transaction_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adjusted_reference"]) -> typing.Union[MetaOapg.properties.adjusted_reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union['PlaidError', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["new_payment_status"], typing_extensions.Literal["original_reference"], typing_extensions.Literal["original_start_date"], typing_extensions.Literal["environment"], typing_extensions.Literal["webhook_type"], typing_extensions.Literal["payment_id"], typing_extensions.Literal["adjusted_start_date"], typing_extensions.Literal["webhook_code"], typing_extensions.Literal["old_payment_status"], typing_extensions.Literal["timestamp"], typing_extensions.Literal["transaction_id"], typing_extensions.Literal["adjusted_reference"], typing_extensions.Literal["error"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        new_payment_status: 'PaymentInitiationPaymentStatus',
        original_reference: typing.Union[MetaOapg.properties.original_reference, None, str, ],
        original_start_date: typing.Union[MetaOapg.properties.original_start_date, None, str, date, ],
        environment: 'WebhookEnvironmentValues',
        webhook_type: typing.Union[MetaOapg.properties.webhook_type, str, ],
        payment_id: typing.Union[MetaOapg.properties.payment_id, str, ],
        adjusted_start_date: typing.Union[MetaOapg.properties.adjusted_start_date, None, str, date, ],
        webhook_code: typing.Union[MetaOapg.properties.webhook_code, str, ],
        old_payment_status: 'PaymentInitiationPaymentStatus',
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, datetime, ],
        transaction_id: typing.Union[MetaOapg.properties.transaction_id, None, str, schemas.Unset] = schemas.unset,
        adjusted_reference: typing.Union[MetaOapg.properties.adjusted_reference, None, str, schemas.Unset] = schemas.unset,
        error: typing.Union['PlaidError', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'PaymentStatusUpdateWebhook':
        return super().__new__(
            cls,
            *_args,
            new_payment_status=new_payment_status,
            original_reference=original_reference,
            original_start_date=original_start_date,
            environment=environment,
            webhook_type=webhook_type,
            payment_id=payment_id,
            adjusted_start_date=adjusted_start_date,
            webhook_code=webhook_code,
            old_payment_status=old_payment_status,
            timestamp=timestamp,
            transaction_id=transaction_id,
            adjusted_reference=adjusted_reference,
            error=error,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.payment_initiation_payment_status import PaymentInitiationPaymentStatus
from plaid.model.plaid_error import PlaidError
from plaid.model.webhook_environment_values import WebhookEnvironmentValues
