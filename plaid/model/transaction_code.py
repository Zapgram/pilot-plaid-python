# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class TransactionCode(
    schemas.EnumBase,
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An identifier classifying the transaction type.

This field is only populated for European institutions. For institutions in the US and Canada, this field is set to `null`.

`adjustment:` Bank adjustment

`atm:` Cash deposit or withdrawal via an automated teller machine

`bank charge:` Charge or fee levied by the institution

`bill payment`: Payment of a bill

`cash:` Cash deposit or withdrawal

`cashback:` Cash withdrawal while making a debit card purchase

`cheque:` Document ordering the payment of money to another person or organization

`direct debit:` Automatic withdrawal of funds initiated by a third party at a regular interval

`interest:` Interest earned or incurred

`purchase:` Purchase made with a debit or credit card

`standing order:` Payment instructed by the account holder to a third party at a regular interval

`transfer:` Transfer of money between accounts
    """


    class MetaOapg:
        enum_value_to_name = {
            "adjustment": "ADJUSTMENT",
            "atm": "ATM",
            "bank charge": "BANK_CHARGE",
            "bill payment": "BILL_PAYMENT",
            "cash": "CASH",
            "cashback": "CASHBACK",
            "cheque": "CHEQUE",
            "direct debit": "DIRECT_DEBIT",
            "interest": "INTEREST",
            "purchase": "PURCHASE",
            "standing order": "STANDING_ORDER",
            "transfer": "TRANSFER",
            schemas.NoneClass.NONE: "NONE",
        }
    
    @schemas.classproperty
    def ADJUSTMENT(cls):
        return cls("adjustment")
    
    @schemas.classproperty
    def ATM(cls):
        return cls("atm")
    
    @schemas.classproperty
    def BANK_CHARGE(cls):
        return cls("bank charge")
    
    @schemas.classproperty
    def BILL_PAYMENT(cls):
        return cls("bill payment")
    
    @schemas.classproperty
    def CASH(cls):
        return cls("cash")
    
    @schemas.classproperty
    def CASHBACK(cls):
        return cls("cashback")
    
    @schemas.classproperty
    def CHEQUE(cls):
        return cls("cheque")
    
    @schemas.classproperty
    def DIRECT_DEBIT(cls):
        return cls("direct debit")
    
    @schemas.classproperty
    def INTEREST(cls):
        return cls("interest")
    
    @schemas.classproperty
    def PURCHASE(cls):
        return cls("purchase")
    
    @schemas.classproperty
    def STANDING_ORDER(cls):
        return cls("standing order")
    
    @schemas.classproperty
    def TRANSFER(cls):
        return cls("transfer")
    
    @schemas.classproperty
    def NONE(cls):
        return cls(None)


    def __new__(
        cls,
        *_args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TransactionCode':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
        )
