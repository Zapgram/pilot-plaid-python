# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.394.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from plaid import schemas  # noqa: F401


class CreditBankIncomeAccount(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The Item's bank accounts that have the selected data.
    """


    class MetaOapg:
        required = {
            "official_name",
            "account_id",
            "subtype",
            "name",
            "owners",
            "type",
            "mask",
        }
        
        class properties:
            account_id = schemas.StrSchema
            
            
            class mask(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mask':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            name = schemas.StrSchema
            
            
            class official_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'official_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def subtype() -> typing.Type['DepositoryAccountSubtype']:
                return DepositoryAccountSubtype
        
            @staticmethod
            def type() -> typing.Type['CreditBankIncomeAccountType']:
                return CreditBankIncomeAccountType
            
            
            class owners(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Owner']:
                        return Owner
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Owner'], typing.List['Owner']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'owners':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Owner':
                    return super().__getitem__(i)
            __annotations__ = {
                "account_id": account_id,
                "mask": mask,
                "name": name,
                "official_name": official_name,
                "subtype": subtype,
                "type": type,
                "owners": owners,
            }
    
    official_name: MetaOapg.properties.official_name
    account_id: MetaOapg.properties.account_id
    subtype: 'DepositoryAccountSubtype'
    name: MetaOapg.properties.name
    owners: MetaOapg.properties.owners
    type: 'CreditBankIncomeAccountType'
    mask: MetaOapg.properties.mask
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mask"]) -> MetaOapg.properties.mask: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["official_name"]) -> MetaOapg.properties.official_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtype"]) -> 'DepositoryAccountSubtype': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'CreditBankIncomeAccountType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owners"]) -> MetaOapg.properties.owners: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account_id", "mask", "name", "official_name", "subtype", "type", "owners", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mask"]) -> MetaOapg.properties.mask: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["official_name"]) -> MetaOapg.properties.official_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtype"]) -> 'DepositoryAccountSubtype': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'CreditBankIncomeAccountType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owners"]) -> MetaOapg.properties.owners: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account_id", "mask", "name", "official_name", "subtype", "type", "owners", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        official_name: typing.Union[MetaOapg.properties.official_name, None, str, ],
        account_id: typing.Union[MetaOapg.properties.account_id, str, ],
        subtype: 'DepositoryAccountSubtype',
        name: typing.Union[MetaOapg.properties.name, str, ],
        owners: typing.Union[MetaOapg.properties.owners, list, tuple, ],
        type: 'CreditBankIncomeAccountType',
        mask: typing.Union[MetaOapg.properties.mask, None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreditBankIncomeAccount':
        return super().__new__(
            cls,
            *_args,
            official_name=official_name,
            account_id=account_id,
            subtype=subtype,
            name=name,
            owners=owners,
            type=type,
            mask=mask,
            _configuration=_configuration,
            **kwargs,
        )

from plaid.model.credit_bank_income_account_type import CreditBankIncomeAccountType
from plaid.model.depository_account_subtype import DepositoryAccountSubtype
from plaid.model.owner import Owner
